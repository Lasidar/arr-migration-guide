From 516b3a504c476c0dc0c9d7999c7908e8a60bf60d Mon Sep 17 00:00:00 2001
From: Cursor Agent <cursoragent@cursor.com>
Date: Tue, 29 Jul 2025 12:42:50 +0000
Subject: [PATCH 3/3] =?UTF-8?q?Phase=202.1=20Complete:=20Domain=20model=20?=
 =?UTF-8?q?transformation\n\n-=20Transformed=20domain=20entities=20(Series?=
 =?UTF-8?q?=E2=86=92Author,=20Season=E2=86=92Book,=20Episode=E2=86=92Editi?=
 =?UTF-8?q?on)\n-=20Renamed=20core=20directories=20(Tv=E2=86=92Books,=20Se?=
 =?UTF-8?q?riesStats=E2=86=92AuthorStats)\n-=20Updated=20API=20directories?=
 =?UTF-8?q?=20and=20files\n-=20Renamed=20test=20directories=20and=20files\?=
 =?UTF-8?q?n-=20Updated=20namespace=20references=20throughout=20codebase\n?=
 =?UTF-8?q?-=20Fixed=20metadata=20providers=20(Tvdb=E2=86=92Goodreads,=20e?=
 =?UTF-8?q?tc.)\n-=20Updated=20terminology=20(AirDate=E2=86=92PublishDate,?=
 =?UTF-8?q?=20Network=E2=86=92Publisher)\n\nNext:=20Phase=202.2=20-=20Data?=
 =?UTF-8?q?base=20schema=20updates=20and=20migrations?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 scripts/transform/domain-transform.sh         | 106 +++++++++
 scripts/transform/rename-domain-files.sh      |  53 +++++
 .../ReleaseProfiles/ReleaseProfilesFixture.cs |   2 +-
 .../AutomationTest.cs                         |   2 +-
 .../PageModel/PageBase.cs                     |   2 +-
 .../AuthorStatisticsFixture.cs}               |   4 +-
 .../AddAuthorFixture.cs}                      |   0
 .../AuthorFolderPathBuilderFixture.cs}        |   0
 .../SeriesRepositoryFixture.cs                |   0
 .../UpdateMultipleSeriesFixture.cs            |   0
 .../UpdateSeriesFixture.cs                    |   0
 .../AuthorTitleNormalizerFixture.cs}          |   0
 .../AuthorTitleSlugValidatorFixture.cs}       |   0
 .../LegacySetEpisodeMontitoredFixture.cs      |   0
 .../SetEpisodeMontitoredFixture.cs            |   0
 .../EpisodesBetweenDatesFixture.cs            |   0
 .../EpisodesRepositoryReadFixture.cs          |   0
 .../EpisodesWhereCutoffUnmetFixture.cs        |   0
 .../EpisodesWithFilesFixture.cs               |   0
 .../EpisodesWithoutFilesFixture.cs            |   0
 .../FindEpisodeFixture.cs                     |   0
 .../EditionServiceTests}/ByAirDateFixture.cs  |   0
 .../FindEpisodeByTitleFixture.cs              |   0
 .../HandleEpisodeFileDeletedFixture.cs        |   0
 .../MoveAuthorServiceFixture.cs}              |   0
 .../RefreshAuthorServiceFixture.cs}           |   0
 .../RefreshEditionServiceFixture.cs}          |   0
 .../ShouldRefreshAuthorFixture.cs}            |   0
 .../DailySeriesDataProxyFixture.cs            |   0
 ...ure.cs => FullBookSpecificationFixture.cs} |   0
 ...> MonitoredEditionSpecificationFixture.cs} |   0
 ...re.cs => MultiBookSpecificationFixture.cs} |   0
 ...DeletedEditionFileSpecificationFixture.cs} |   0
 ...cs => SameEditionsSpecificationFixture.cs} |   0
 ...xture.cs => AuthorSpecificationFixture.cs} |   0
 .../AnimeSearchFixture.cs                     |   0
 .../StandardEpisodeSearch.cs                  |   0
 ...ingleEditionAgeDownloadDecisionFixture.cs} |   0
 ...ixture.cs => RemovedAuthorCheckFixture.cs} |   0
 ... => CleanupOrphanedEditionFilesFixture.cs} |   0
 ...e.cs => CleanupOrphanedEditionsFixture.cs} |   0
 ...cs => UpdateCleanTitleForAuthorFixture.cs} |   0
 ...xture.cs => AuthorSearchServiceFixture.cs} |   0
 ...nSearchFixture.cs => BookSearchFixture.cs} |   0
 ...ownloadedEditionsCommandServiceFixture.cs} |   0
 ...DownloadedEditionsImportServiceFixture.cs} |   0
 .../MoveEpisodeFileFixture.cs                 |   0
 .../Aggregators/AggregateEpisodesFixture.cs   |   0
 .../Aggregators/AggregateLanguageFixture.cs   |   0
 .../Aggregators/AggregateQualityFixture.cs    |   0
 .../AggregateReleaseGroupFixture.cs           |   0
 .../AggregateReleaseHashFixture.cs            |   0
 .../AggregateSubtitleInfoFixture.cs           |   0
 .../AugmentLanguageFromMediaInfoFixture.cs    |   0
 .../AugmentQualityFromMediaInfoFixture.cs     |   0
 .../AugmentQualityFromReleaseNameFixture.cs   |   0
 .../DetectSampleFixture.cs                    |   0
 .../GetSceneNameFixture.cs                    |   0
 .../ImportApprovedEpisodesFixture.cs          |   0
 .../ImportDecisionMakerFixture.cs             |   0
 ...soluteEpisodeNumberSpecificationFixture.cs |   0
 .../AlreadyImportedSpecificationFixture.cs    |   0
 .../EpisodeTitleSpecificationFixture.cs       |   0
 .../FreeSpaceSpecificationFixture.cs          |   0
 .../FullBookSpecificationFixture.cs}          |   0
 .../HasAudioTrackSpecificationFixture.cs      |   0
 .../MatchesFolderSpecificationFixture.cs      |   0
 .../MatchesGrabSpecificationFixture.cs        |   0
 .../NotSampleSpecificationFixture.cs          |   0
 .../NotUnpackingSpecificationFixture.cs       |   0
 .../UpgradeSpecificationFixture.cs            |   0
 ...Fixture.cs => DeleteEditionFileFixture.cs} |   0
 ....cs => RenameEditionFileServiceFixture.cs} |   0
 ...ture.cs => SearchAuthorComparerFixture.cs} |   0
 ...PathFixture.cs => GetAuthorPathFixture.cs} |   0
 ...ure.cs => AbsoluteEditionFormatFixture.cs} |   0
 ...cs => AuthorTitleFirstCharacterFixture.cs} |   0
 ...iesYearFixture.cs => AuthorYearFixture.cs} |   0
 ...ture.cs => EditionTitleCollapseFixture.cs} |   0
 ...isodeFixture.cs => MultiEditionFixture.cs} |   0
 ...Fixture.cs => MultiEditionTitleFixture.cs} |   0
 ...> RequiresAbsoluteEditionNumberFixture.cs} |   0
 ...ture.cs => RequiresEditionTitleFixture.cs} |   0
 ...ture.cs => TruncatedAuthorTitleFixture.cs} |   0
 ...re.cs => TruncatedEditionTitlesFixture.cs} |   0
 ...erFixture.cs => GetAuthorFolderFixture.cs} |   0
 ...lderFixture.cs => GetBookFolderFixture.cs} |   0
 ... => AbsoluteEditionNumberParserFixture.cs} |   0
 ...foFixture.cs => AuthorTitleInfoFixture.cs} |   0
 ...nParserFixture.cs => BookParserFixture.cs} |   0
 ...ixture.cs => DailyEditionParserFixture.cs} |   0
 ....cs => IsPossibleSpecialEditionFixture.cs} |   0
 ...e.cs => MiniAuthorEditionParserFixture.cs} |   0
 ...ixture.cs => MultiEditionParserFixture.cs} |   0
 ...ture.cs => NormalizeAuthorTitleFixture.cs} |   0
 ...ure.cs => NormalizeEditionTitleFixture.cs} |   0
 ...etSeriesFixture.cs => GetAuthorFixture.cs} |   0
 ...isodesFixture.cs => GetEditionsFixture.cs} |   0
 ...xture.cs => SingleEditionParserFixture.cs} |   0
 ...cs => ValidateParsedEditionInfoFixture.cs} |   0
 .../AuthorStatistics.cs}                      |   2 +-
 .../AuthorStatisticsRepository.cs}            |   2 +-
 .../AuthorStatisticsService.cs}               |   2 +-
 .../BookStatistics.cs}                        |   2 +-
 src/NzbDrone.Core/{Tv => Books}/Actor.cs      |   2 +-
 .../AddAuthorOptions.cs}                      |   2 +-
 .../AddAuthorService.cs}                      |   2 +-
 .../AddAuthorValidator.cs}                    |   2 +-
 .../{Tv/Series.cs => Books/Author.cs}         |   2 +-
 .../AuthorAddedHandler.cs}                    |   2 +-
 .../AuthorEditedService.cs}                   |   2 +-
 .../AuthorPathBuilder.cs}                     |   2 +-
 .../AuthorRepository.cs}                      |   2 +-
 .../AuthorScannedHandler.cs}                  |   2 +-
 .../AuthorService.cs}                         |   2 +-
 .../AuthorStatusType.cs}                      |   2 +-
 .../AuthorTitleNormalizer.cs}                 |   2 +-
 .../AuthorTitleSlugValidator.cs}              |   2 +-
 .../SeriesTypes.cs => Books/AuthorTypes.cs}   |   2 +-
 .../{Tv/Season.cs => Books/Book.cs}           |   2 +-
 .../Commands/BulkMoveAuthorCommand.cs}        |   2 +-
 .../Commands/MoveAuthorCommand.cs}            |   2 +-
 .../Commands/RefreshAuthorCommand.cs}         |   2 +-
 .../{Tv/Episode.cs => Books/Edition.cs}       |   2 +-
 .../EditionCutoffService.cs}                  |   2 +-
 .../EditionMonitoredService.cs}               |   2 +-
 .../EditionRefreshedService.cs}               |   2 +-
 .../EditionRepository.cs}                     |   2 +-
 .../EditionService.cs}                        |   2 +-
 .../Events/AuthorAddCompletedEvent.cs}        |   2 +-
 .../Events/AuthorAddedEvent.cs}               |   2 +-
 .../Events/AuthorBulkEditedEvent.cs}          |   2 +-
 .../Events/AuthorDeletedEvent.cs}             |   2 +-
 .../Events/AuthorEditedEvent.cs}              |   2 +-
 .../Events/AuthorImportedEvent.cs}            |   2 +-
 .../Events/AuthorMovedEvent.cs}               |   2 +-
 .../Events/AuthorRefreshCompleteEvent.cs}     |   2 +-
 .../Events/AuthorRefreshStartingEvent.cs}     |   2 +-
 .../Events/AuthorUpdatedEvent.cs}             |   2 +-
 .../Events/EditionInfoRefreshedEvent.cs}      |   2 +-
 .../{Tv => Books}/MonitoringOptions.cs        |   2 +-
 .../MoveAuthorService.cs}                     |   2 +-
 .../MultipleAuthorFoundException.cs}          |   2 +-
 src/NzbDrone.Core/{Tv => Books}/Ratings.cs    |   2 +-
 .../RefreshAuthorService.cs}                  |   2 +-
 .../RefreshEditionService.cs}                 |   2 +-
 .../ShouldRefreshAuthor.cs}                   |   2 +-
 .../DailySeries.cs                            |   0
 .../DailySeriesDataProxy.cs                   |   0
 .../DailySeriesService.cs                     |   0
 .../DiskSpace/DiskSpaceService.cs             |   4 +-
 .../Extras/ExistingExtraFileService.cs        |  14 +-
 src/NzbDrone.Core/Extras/ExtraService.cs      |  72 +++---
 src/NzbDrone.Core/Extras/Files/ExtraFile.cs   |   2 +-
 .../Extras/Files/ExtraFileManager.cs          |  58 ++---
 .../Extras/Files/ExtraFileRepository.cs       |  12 +-
 .../Extras/Files/ExtraFileService.cs          |  30 +--
 .../Extras/IImportExistingExtraFiles.cs       |   2 +-
 .../Extras/ImportExistingExtraFilesBase.cs    |  26 +-
 .../Metadata/Consumers/Plex/PlexMetadata.cs   |  40 ++--
 .../Consumers/Roksbox/RoksboxMetadata.cs      | 106 ++++-----
 .../Roksbox/RoksboxMetadataSettings.cs        |   8 +-
 .../Metadata/Consumers/Wdtv/WdtvMetadata.cs   | 110 ++++-----
 .../Consumers/Wdtv/WdtvMetadataSettings.cs    |   6 +-
 .../Consumers/Xbmc/KodiEpisodeGuide.cs        |  20 +-
 .../Metadata/Consumers/Xbmc/XbmcMetadata.cs   | 222 +++++++++---------
 .../Consumers/Xbmc/XbmcMetadataSettings.cs    |   2 +-
 .../Metadata/ExistingMetadataImporter.cs      |  20 +-
 .../Files/CleanMetadataFileService.cs         |  10 +-
 .../Extras/Metadata/IMetadata.cs              |  14 +-
 .../Extras/Metadata/MetadataBase.cs           |  18 +-
 .../Extras/Metadata/MetadataService.cs        | 198 ++++++++--------
 .../Others/ExistingOtherExtraImporter.cs      |  22 +-
 .../Extras/Others/OtherExtraFileRenamer.cs    |  20 +-
 .../Extras/Others/OtherExtraFileService.cs    |   2 +-
 .../Extras/Others/OtherExtraService.cs        |  36 +--
 .../Subtitles/ExistingSubtitleImporter.cs     |  22 +-
 .../Extras/Subtitles/SubtitleService.cs       |  38 +--
 .../Aggregation/AggregationFailedException.cs |   0
 .../Aggregation/AggregationService.cs         |   0
 .../Aggregators/AggregateEpisodes.cs          |   0
 .../Aggregators/AggregateLanguage.cs          |   0
 .../Aggregators/AggregateQuality.cs           |   0
 .../Aggregators/AggregateReleaseGroup.cs      |   0
 .../Aggregators/AggregateReleaseHash.cs       |   0
 .../Aggregators/AggregateReleaseInfo.cs       |   0
 .../Aggregators/AggregateSubtitleInfo.cs      |   0
 .../AugmentLanguageFromDownloadClientItem.cs  |   0
 .../Language/AugmentLanguageFromFileName.cs   |   0
 .../Language/AugmentLanguageFromFolder.cs     |   0
 .../Language/AugmentLanguageFromMediaInfo.cs  |   0
 .../Language/AugmentLanguageResult.cs         |   0
 .../Augmenters/Language/Confidence.cs         |   0
 .../Augmenters/Language/IAugmentLanguage.cs   |   0
 .../AugmentQualityFromDownloadClientItem.cs   |   0
 .../Quality/AugmentQualityFromFileName.cs     |   0
 .../Quality/AugmentQualityFromFolder.cs       |   0
 .../Quality/AugmentQualityFromMediaInfo.cs    |   0
 .../Quality/AugmentQualityFromReleaseName.cs  |   0
 .../Quality/AugmentQualityResult.cs           |   0
 .../Augmenters/Quality/Confidence.cs          |   0
 .../Augmenters/Quality/IAugmentQuality.cs     |   0
 .../Aggregators/IAggregateLocalEpisode.cs     |   0
 .../DetectSample.cs                           |   0
 .../DetectSampleResult.cs                     |   0
 .../EpisodeTitleRequiredType.cs               |   0
 .../IImportDecisionEngineSpecification.cs     |   0
 .../ImportApprovedEpisodes.cs                 |   0
 .../ImportDecision.cs                         |   0
 .../ImportDecisionMaker.cs                    |   0
 .../ImportMode.cs                             |   0
 .../ImportRejection.cs                        |   0
 .../ImportRejectionReason.cs                  |   0
 .../ImportResult.cs                           |   0
 .../ImportResultType.cs                       |   0
 .../ImportSpecDecision.cs                     |   0
 .../Manual/ManualImportCommand.cs             |   0
 .../Manual/ManualImportFile.cs                |   0
 .../Manual/ManualImportItem.cs                |   0
 .../Manual/ManualImportService.cs             |   0
 .../Manual/ManuallyImportedFile.cs            |   0
 .../RecycleBinException.cs                    |   0
 .../RootFolderNotFoundException.cs            |   0
 .../SceneNameCalculator.cs                    |   0
 .../AbsoluteEpisodeNumberSpecification.cs     |   0
 .../AlreadyImportedSpecification.cs           |   0
 .../EpisodeTitleSpecification.cs              |   0
 .../Specifications/FreeSpaceSpecification.cs  |   0
 .../Specifications/FullSeasonSpecification.cs |   0
 .../HasAudioTrackSpecification.cs             |   0
 .../MatchesFolderSpecification.cs             |   0
 .../MatchesGrabSpecification.cs               |   0
 .../Specifications/NotSampleSpecification.cs  |   0
 .../NotUnpackingSpecification.cs              |   0
 .../SameEpisodesImportSpecification.cs        |   0
 .../SplitEpisodeSpecification.cs              |   0
 .../UnverifiedSceneNumberingSpecification.cs  |   0
 .../Specifications/UpgradeSpecification.cs    |   0
 .../AccessControl/FirewallAdapter.cs          |   4 +-
 .../AccessControl/RemoteAccessAdapter.cs      |   2 +-
 .../AccessControl/RemoteAccessException.cs    |   2 +-
 src/NzbDrone.Host/AppLifetime.cs              |   4 +-
 src/NzbDrone.Host/Bootstrap.cs                |  14 +-
 src/NzbDrone.Host/BrowserService.cs           |   4 +-
 src/NzbDrone.Host/SingleInstancePolicy.cs     |   2 +-
 src/NzbDrone.Host/Startup.cs                  |  10 +-
 src/NzbDrone.Host/UtilityModeRouter.cs        |   6 +-
 ...ditorFixture.cs => AuthorEditorFixture.cs} |   0
 .../{SeriesFixture.cs => AuthorFixture.cs}    |   0
 ...ookupFixture.cs => AuthorLookupFixture.cs} |   0
 ...deFileFixture.cs => EditionFileFixture.cs} |   0
 .../{EpisodeFixture.cs => EditionFixture.cs}  |   0
 .../{SeriesClient.cs => AuthorClient.cs}      |   0
 .../{EpisodeClient.cs => EditionClient.cs}    |   0
 src/NzbDrone.Update/UpdateApp.cs              |  12 +-
 .../UpdateEngine/BackupAndRestore.cs          |   6 +-
 .../UpdateEngine/BackupAppData.cs             |   6 +-
 .../UpdateEngine/DetectApplicationType.cs     |   6 +-
 .../UpdateEngine/InstallUpdateService.cs      |   8 +-
 .../UpdateEngine/StartNzbDrone.cs             |   8 +-
 .../UpdateEngine/TerminateNzbDrone.cs         |   6 +-
 .../DiskProviderTests/DiskProviderFixture.cs  |   2 +-
 .../DiskProviderTests/FreeSpaceFixture.cs     |   2 +-
 .../DotNetPlatformInfoFixture.cs              |   2 +-
 src/NzbDrone.Windows/Disk/DiskProvider.cs     |   6 +-
 src/NzbDrone.Windows/Disk/FolderMount.cs      |   2 +-
 .../EnvironmentInfo/WindowsVersionInfo.cs     |   2 +-
 .../AlternateTitleResource.cs                 |   0
 .../AuthorController.cs}                      |   2 +-
 .../AuthorEditorController.cs}                |   0
 .../AuthorEditorDeleteResource.cs}            |   0
 .../AuthorEditorResource.cs}                  |   0
 .../AuthorEditorValidator.cs}                 |   0
 .../AuthorFolderAsRootFolderValidator.cs}     |   0
 .../AuthorFolderController.cs}                |   0
 .../AuthorImportController.cs}                |   0
 .../AuthorLookupController.cs}                |   2 +-
 .../AuthorResource.cs}                        |   0
 .../AuthorStatisticsResource.cs}              |   2 +-
 .../BookResource.cs}                          |   0
 .../BookStatisticsResource.cs}                |   2 +-
 .../BookPassAuthorResource.cs}                |   0
 .../BookPassController.cs}                    |   0
 .../BookPassResource.cs}                      |   0
 .../EditionFileController.cs}                 |   0
 .../EditionFileListResource.cs}               |   0
 .../EditionFileResource.cs}                   |   0
 .../MediaInfoResource.cs                      |   0
 .../EditionController.cs}                     |   0
 .../EditionControllerWithSignalR.cs}          |   0
 .../EditionResource.cs}                       |   0
 .../EditionsMonitoredResource.cs}             |   0
 .../RenameEditionController.cs}               |   0
 .../RenameEditionResource.cs}                 |   0
 294 files changed, 840 insertions(+), 681 deletions(-)
 create mode 100755 scripts/transform/domain-transform.sh
 create mode 100755 scripts/transform/rename-domain-files.sh
 rename src/NzbDrone.Core.Test/{SeriesStatsTests/SeriesStatisticsFixture.cs => AuthorStatsTests/AuthorStatisticsFixture.cs} (98%)
 rename src/NzbDrone.Core.Test/{TvTests/AddSeriesFixture.cs => BookTests/AddAuthorFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesFolderPathBuilderFixture.cs => BookTests/AuthorFolderPathBuilderFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesRepositoryTests => BookTests/AuthorRepositoryTests}/SeriesRepositoryFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesServiceTests => BookTests/AuthorServiceTests}/UpdateMultipleSeriesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesServiceTests => BookTests/AuthorServiceTests}/UpdateSeriesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesTitleNormalizerFixture.cs => BookTests/AuthorTitleNormalizerFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/SeriesTitleSlugValidatorFixture.cs => BookTests/AuthorTitleSlugValidatorFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeMonitoredServiceTests => BookTests/EditionMonitoredServiceTests}/LegacySetEpisodeMontitoredFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeMonitoredServiceTests => BookTests/EditionMonitoredServiceTests}/SetEpisodeMontitoredFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/EpisodesBetweenDatesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/EpisodesRepositoryReadFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/EpisodesWhereCutoffUnmetFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/EpisodesWithFilesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/EpisodesWithoutFilesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeRepositoryTests => BookTests/EditionRepositoryTests}/FindEpisodeFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeServiceTests => BookTests/EditionServiceTests}/ByAirDateFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeServiceTests => BookTests/EditionServiceTests}/FindEpisodeByTitleFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/EpisodeServiceTests => BookTests/EditionServiceTests}/HandleEpisodeFileDeletedFixture.cs (100%)
 rename src/NzbDrone.Core.Test/{TvTests/MoveSeriesServiceFixture.cs => BookTests/MoveAuthorServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/RefreshSeriesServiceFixture.cs => BookTests/RefreshAuthorServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/RefreshEpisodeServiceFixture.cs => BookTests/RefreshEditionServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/{TvTests/ShouldRefreshSeriesFixture.cs => BookTests/ShouldRefreshAuthorFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DataAugmentation/{DailySeries => DailyAuthor}/DailySeriesDataProxyFixture.cs (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/{FullSeasonSpecificationFixture.cs => FullBookSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/{MonitoredEpisodeSpecificationFixture.cs => MonitoredEditionSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/{MultiSeasonSpecificationFixture.cs => MultiBookSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/RssSync/{DeletedEpisodeFileSpecificationFixture.cs => DeletedEditionFileSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/{SameEpisodesSpecificationFixture.cs => SameEditionsSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/Search/{SeriesSpecificationFixture.cs => AuthorSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/Search/{SingleEpisodeSearchMatchSpecificationTests => SingleEditionSearchMatchSpecificationTests}/AnimeSearchFixture.cs (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/Search/{SingleEpisodeSearchMatchSpecificationTests => SingleEditionSearchMatchSpecificationTests}/StandardEpisodeSearch.cs (100%)
 rename src/NzbDrone.Core.Test/DecisionEngineTests/{SingleEpisodeAgeDownloadDecisionFixture.cs => SingleEditionAgeDownloadDecisionFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/HealthCheck/Checks/{RemovedSeriesCheckFixture.cs => RemovedAuthorCheckFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/Housekeeping/Housekeepers/{CleanupOrphanedEpisodeFilesFixture.cs => CleanupOrphanedEditionFilesFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/Housekeeping/Housekeepers/{CleanupOrphanedEpisodesFixture.cs => CleanupOrphanedEditionsFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/Housekeeping/Housekeepers/{UpdateCleanTitleForSeriesFixture.cs => UpdateCleanTitleForAuthorFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/IndexerSearchTests/{SeriesSearchServiceFixture.cs => AuthorSearchServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/IndexerTests/{SeasonSearchFixture.cs => BookSearchFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{DownloadedEpisodesCommandServiceFixture.cs => DownloadedEditionsCommandServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{DownloadedEpisodesImportServiceFixture.cs => DownloadedEditionsImportServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeFileMovingServiceTests => EditionFileMovingServiceTests}/MoveEpisodeFileFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateEpisodesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateLanguageFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateQualityFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateReleaseGroupFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateReleaseHashFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateSubtitleInfoFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfoFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfoFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseNameFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/DetectSampleFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/GetSceneNameFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/ImportApprovedEpisodesFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/ImportDecisionMakerFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/AbsoluteEpisodeNumberSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/AlreadyImportedSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/EpisodeTitleSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/FreeSpaceSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport/Specifications/FullSeasonSpecificationFixture.cs => EditionImport/Specifications/FullBookSpecificationFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/HasAudioTrackSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/MatchesFolderSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/MatchesGrabSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/NotSampleSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/NotUnpackingSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{EpisodeImport => EditionImport}/Specifications/UpgradeSpecificationFixture.cs (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/MediaFileDeletionService/{DeleteEpisodeFileFixture.cs => DeleteEditionFileFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MediaFiles/{RenameEpisodeFileServiceFixture.cs => RenameEditionFileServiceFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/MetadataSource/{SearchSeriesComparerFixture.cs => SearchAuthorComparerFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/NotificationTests/Xbmc/Json/{GetSeriesPathFixture.cs => GetAuthorPathFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{AbsoluteEpisodeFormatFixture.cs => AbsoluteEditionFormatFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{SeriesTitleFirstCharacterFixture.cs => AuthorTitleFirstCharacterFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{SeriesYearFixture.cs => AuthorYearFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{EpisodeTitleCollapseFixture.cs => EditionTitleCollapseFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{MultiEpisodeFixture.cs => MultiEditionFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{MultiEpisodeTitleFixture.cs => MultiEditionTitleFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{RequiresAbsoluteEpisodeNumberFixture.cs => RequiresAbsoluteEditionNumberFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{RequiresEpisodeTitleFixture.cs => RequiresEditionTitleFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{TruncatedSeriesTitleFixture.cs => TruncatedAuthorTitleFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/{TruncatedEpisodeTitlesFixture.cs => TruncatedEditionTitlesFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/{GetSeriesFolderFixture.cs => GetAuthorFolderFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/OrganizerTests/{GetSeasonFolderFixture.cs => GetBookFolderFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{AbsoluteEpisodeNumberParserFixture.cs => AbsoluteEditionNumberParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{SeriesTitleInfoFixture.cs => AuthorTitleInfoFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{SeasonParserFixture.cs => BookParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{DailyEpisodeParserFixture.cs => DailyEditionParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{IsPossibleSpecialEpisodeFixture.cs => IsPossibleSpecialEditionFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{MiniSeriesEpisodeParserFixture.cs => MiniAuthorEditionParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{MultiEpisodeParserFixture.cs => MultiEditionParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{NormalizeSeriesTitleFixture.cs => NormalizeAuthorTitleFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{NormalizeEpisodeTitleFixture.cs => NormalizeEditionTitleFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/{GetSeriesFixture.cs => GetAuthorFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/{GetEpisodesFixture.cs => GetEditionsFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{SingleEpisodeParserFixture.cs => SingleEditionParserFixture.cs} (100%)
 rename src/NzbDrone.Core.Test/ParserTests/{ValidateParsedEpisodeInfoFixture.cs => ValidateParsedEditionInfoFixture.cs} (100%)
 rename src/NzbDrone.Core/{SeriesStats/SeriesStatistics.cs => AuthorStats/AuthorStatistics.cs} (94%)
 rename src/NzbDrone.Core/{SeriesStats/SeriesStatisticsRepository.cs => AuthorStats/AuthorStatisticsRepository.cs} (99%)
 rename src/NzbDrone.Core/{SeriesStats/SeriesStatisticsService.cs => AuthorStats/AuthorStatisticsService.cs} (98%)
 rename src/NzbDrone.Core/{SeriesStats/SeasonStatistics.cs => AuthorStats/BookStatistics.cs} (98%)
 rename src/NzbDrone.Core/{Tv => Books}/Actor.cs (92%)
 rename src/NzbDrone.Core/{Tv/AddSeriesOptions.cs => Books/AddAuthorOptions.cs} (85%)
 rename src/NzbDrone.Core/{Tv/AddSeriesService.cs => Books/AddAuthorService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/AddSeriesValidator.cs => Books/AddAuthorValidator.cs} (97%)
 rename src/NzbDrone.Core/{Tv/Series.cs => Books/Author.cs} (99%)
 rename src/NzbDrone.Core/{Tv/SeriesAddedHandler.cs => Books/AuthorAddedHandler.cs} (96%)
 rename src/NzbDrone.Core/{Tv/SeriesEditedService.cs => Books/AuthorEditedService.cs} (96%)
 rename src/NzbDrone.Core/{Tv/SeriesPathBuilder.cs => Books/AuthorPathBuilder.cs} (98%)
 rename src/NzbDrone.Core/{Tv/SeriesRepository.cs => Books/AuthorRepository.cs} (99%)
 rename src/NzbDrone.Core/{Tv/SeriesScannedHandler.cs => Books/AuthorScannedHandler.cs} (99%)
 rename src/NzbDrone.Core/{Tv/SeriesService.cs => Books/AuthorService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/SeriesStatusType.cs => Books/AuthorStatusType.cs} (80%)
 rename src/NzbDrone.Core/{Tv/SeriesTitleNormalizer.cs => Books/AuthorTitleNormalizer.cs} (94%)
 rename src/NzbDrone.Core/{Tv/SeriesTitleSlugValidator.cs => Books/AuthorTitleSlugValidator.cs} (98%)
 rename src/NzbDrone.Core/{Tv/SeriesTypes.cs => Books/AuthorTypes.cs} (75%)
 rename src/NzbDrone.Core/{Tv/Season.cs => Books/Book.cs} (92%)
 rename src/NzbDrone.Core/{Tv/Commands/BulkMoveSeriesCommand.cs => Books/Commands/BulkMoveAuthorCommand.cs} (96%)
 rename src/NzbDrone.Core/{Tv/Commands/MoveSeriesCommand.cs => Books/Commands/MoveAuthorCommand.cs} (90%)
 rename src/NzbDrone.Core/{Tv/Commands/RefreshSeriesCommand.cs => Books/Commands/RefreshAuthorCommand.cs} (96%)
 rename src/NzbDrone.Core/{Tv/Episode.cs => Books/Edition.cs} (98%)
 rename src/NzbDrone.Core/{Tv/EpisodeCutoffService.cs => Books/EditionCutoffService.cs} (98%)
 rename src/NzbDrone.Core/{Tv/EpisodeMonitoredService.cs => Books/EditionMonitoredService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/EpisodeRefreshedService.cs => Books/EditionRefreshedService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/EpisodeRepository.cs => Books/EditionRepository.cs} (99%)
 rename src/NzbDrone.Core/{Tv/EpisodeService.cs => Books/EditionService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesAddCompletedEvent.cs => Books/Events/AuthorAddCompletedEvent.cs} (87%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesAddedEvent.cs => Books/Events/AuthorAddedEvent.cs} (86%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesBulkEditedEvent.cs => Books/Events/AuthorBulkEditedEvent.cs} (89%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesDeletedEvent.cs => Books/Events/AuthorDeletedEvent.cs} (93%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesEditedEvent.cs => Books/Events/AuthorEditedEvent.cs} (92%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesImportedEvent.cs => Books/Events/AuthorImportedEvent.cs} (89%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesMovedEvent.cs => Books/Events/AuthorMovedEvent.cs} (92%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesRefreshCompleteEvent.cs => Books/Events/AuthorRefreshCompleteEvent.cs} (74%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesRefreshStartingEvent.cs => Books/Events/AuthorRefreshStartingEvent.cs} (88%)
 rename src/NzbDrone.Core/{Tv/Events/SeriesUpdatedEvent.cs => Books/Events/AuthorUpdatedEvent.cs} (87%)
 rename src/NzbDrone.Core/{Tv/Events/EpisodeInfoRefreshedEvent.cs => Books/Events/EditionInfoRefreshedEvent.cs} (95%)
 rename src/NzbDrone.Core/{Tv => Books}/MonitoringOptions.cs (95%)
 rename src/NzbDrone.Core/{Tv/MoveSeriesService.cs => Books/MoveAuthorService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/MultipleSeriesFoundException.cs => Books/MultipleAuthorFoundException.cs} (92%)
 rename src/NzbDrone.Core/{Tv => Books}/Ratings.cs (85%)
 rename src/NzbDrone.Core/{Tv/RefreshSeriesService.cs => Books/RefreshAuthorService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/RefreshEpisodeService.cs => Books/RefreshEditionService.cs} (99%)
 rename src/NzbDrone.Core/{Tv/ShouldRefreshSeries.cs => Books/ShouldRefreshAuthor.cs} (98%)
 rename src/NzbDrone.Core/DataAugmentation/{DailySeries => DailyAuthor}/DailySeries.cs (100%)
 rename src/NzbDrone.Core/DataAugmentation/{DailySeries => DailyAuthor}/DailySeriesDataProxy.cs (100%)
 rename src/NzbDrone.Core/DataAugmentation/{DailySeries => DailyAuthor}/DailySeriesService.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/AggregationFailedException.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/AggregationService.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateEpisodes.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateLanguage.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateQuality.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateReleaseGroup.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateReleaseHash.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateReleaseInfo.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/AggregateSubtitleInfo.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromDownloadClientItem.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFileName.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFolder.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfo.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageResult.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/Confidence.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Language/IAugmentLanguage.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromDownloadClientItem.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFileName.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFolder.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfo.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseName.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityResult.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/Confidence.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/Augmenters/Quality/IAugmentQuality.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Aggregation/Aggregators/IAggregateLocalEpisode.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/DetectSample.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/DetectSampleResult.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/EpisodeTitleRequiredType.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/IImportDecisionEngineSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportApprovedEpisodes.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportDecision.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportDecisionMaker.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportMode.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportRejection.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportRejectionReason.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportResult.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportResultType.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/ImportSpecDecision.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Manual/ManualImportCommand.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Manual/ManualImportFile.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Manual/ManualImportItem.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Manual/ManualImportService.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Manual/ManuallyImportedFile.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/RecycleBinException.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/RootFolderNotFoundException.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/SceneNameCalculator.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/AbsoluteEpisodeNumberSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/AlreadyImportedSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/EpisodeTitleSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/FreeSpaceSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/FullSeasonSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/HasAudioTrackSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/MatchesFolderSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/MatchesGrabSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/NotSampleSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/NotUnpackingSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/SameEpisodesImportSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/SplitEpisodeSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/UnverifiedSceneNumberingSpecification.cs (100%)
 rename src/NzbDrone.Core/MediaFiles/{EpisodeImport => EditionImport}/Specifications/UpgradeSpecification.cs (100%)
 rename src/NzbDrone.Integration.Test/ApiTests/{SeriesEditorFixture.cs => AuthorEditorFixture.cs} (100%)
 rename src/NzbDrone.Integration.Test/ApiTests/{SeriesFixture.cs => AuthorFixture.cs} (100%)
 rename src/NzbDrone.Integration.Test/ApiTests/{SeriesLookupFixture.cs => AuthorLookupFixture.cs} (100%)
 rename src/NzbDrone.Integration.Test/ApiTests/{EpisodeFileFixture.cs => EditionFileFixture.cs} (100%)
 rename src/NzbDrone.Integration.Test/ApiTests/{EpisodeFixture.cs => EditionFixture.cs} (100%)
 rename src/NzbDrone.Integration.Test/Client/{SeriesClient.cs => AuthorClient.cs} (100%)
 rename src/NzbDrone.Integration.Test/Client/{EpisodeClient.cs => EditionClient.cs} (100%)
 rename src/Readarr.Api.V1/{Series => Author}/AlternateTitleResource.cs (100%)
 rename src/Readarr.Api.V1/{Series/SeriesController.cs => Author/AuthorController.cs} (99%)
 rename src/Readarr.Api.V1/{Series/SeriesEditorController.cs => Author/AuthorEditorController.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesEditorDeleteResource.cs => Author/AuthorEditorDeleteResource.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesEditorResource.cs => Author/AuthorEditorResource.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesEditorValidator.cs => Author/AuthorEditorValidator.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesFolderAsRootFolderValidator.cs => Author/AuthorFolderAsRootFolderValidator.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesFolderController.cs => Author/AuthorFolderController.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesImportController.cs => Author/AuthorImportController.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesLookupController.cs => Author/AuthorLookupController.cs} (98%)
 rename src/Readarr.Api.V1/{Series/SeriesResource.cs => Author/AuthorResource.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeriesStatisticsResource.cs => Author/AuthorStatisticsResource.cs} (97%)
 rename src/Readarr.Api.V1/{Series/SeasonResource.cs => Author/BookResource.cs} (100%)
 rename src/Readarr.Api.V1/{Series/SeasonStatisticsResource.cs => Author/BookStatisticsResource.cs} (97%)
 rename src/Readarr.Api.V1/{SeasonPass/SeasonPassSeriesResource.cs => BookPass/BookPassAuthorResource.cs} (100%)
 rename src/Readarr.Api.V1/{SeasonPass/SeasonPassController.cs => BookPass/BookPassController.cs} (100%)
 rename src/Readarr.Api.V1/{SeasonPass/SeasonPassResource.cs => BookPass/BookPassResource.cs} (100%)
 rename src/Readarr.Api.V1/{EpisodeFiles/EpisodeFileController.cs => EditionFiles/EditionFileController.cs} (100%)
 rename src/Readarr.Api.V1/{EpisodeFiles/EpisodeFileListResource.cs => EditionFiles/EditionFileListResource.cs} (100%)
 rename src/Readarr.Api.V1/{EpisodeFiles/EpisodeFileResource.cs => EditionFiles/EditionFileResource.cs} (100%)
 rename src/Readarr.Api.V1/{EpisodeFiles => EditionFiles}/MediaInfoResource.cs (100%)
 rename src/Readarr.Api.V1/{Episodes/EpisodeController.cs => Editions/EditionController.cs} (100%)
 rename src/Readarr.Api.V1/{Episodes/EpisodeControllerWithSignalR.cs => Editions/EditionControllerWithSignalR.cs} (100%)
 rename src/Readarr.Api.V1/{Episodes/EpisodeResource.cs => Editions/EditionResource.cs} (100%)
 rename src/Readarr.Api.V1/{Episodes/EpisodesMonitoredResource.cs => Editions/EditionsMonitoredResource.cs} (100%)
 rename src/Readarr.Api.V1/{Episodes/RenameEpisodeController.cs => Editions/RenameEditionController.cs} (100%)
 rename src/Readarr.Api.V1/{Episodes/RenameEpisodeResource.cs => Editions/RenameEditionResource.cs} (100%)

diff --git a/scripts/transform/domain-transform.sh b/scripts/transform/domain-transform.sh
new file mode 100755
index 000000000..28e659d98
--- /dev/null
+++ b/scripts/transform/domain-transform.sh
@@ -0,0 +1,106 @@
+#!/bin/bash
+# Domain transformation script from TV shows to books
+
+echo "Starting domain transformation from TV to Books..."
+
+# Function to perform replacements in a file
+transform_domain() {
+    local file=$1
+    echo "Transforming domain in: $file"
+    
+    # Create backup
+    cp "$file" "$file.bak"
+    
+    # Primary entity transformations
+    # Series -> Author (careful with word boundaries)
+    sed -i 's/\bSeries\b/Author/g' "$file"
+    sed -i 's/\bseries\b/author/g' "$file"
+    sed -i 's/\bSERIES\b/AUTHOR/g' "$file"
+    
+    # Season -> Book
+    sed -i 's/\bSeason\b/Book/g' "$file"
+    sed -i 's/\bseason\b/book/g' "$file"
+    sed -i 's/\bSEASON\b/BOOK/g' "$file"
+    sed -i 's/\bSeasons\b/Books/g' "$file"
+    sed -i 's/\bseasons\b/books/g' "$file"
+    
+    # Episode -> Edition
+    sed -i 's/\bEpisode\b/Edition/g' "$file"
+    sed -i 's/\bepisode\b/edition/g' "$file"
+    sed -i 's/\bEPISODE\b/EDITION/g' "$file"
+    sed -i 's/\bEpisodes\b/Editions/g' "$file"
+    sed -i 's/\bepisodes\b/editions/g' "$file"
+    
+    # File-specific transformations
+    sed -i 's/EpisodeFile/EditionFile/g' "$file"
+    sed -i 's/episodeFile/editionFile/g' "$file"
+    sed -i 's/EpisodeFiles/EditionFiles/g' "$file"
+    sed -i 's/episodeFiles/editionFiles/g' "$file"
+    
+    # TV-specific to Book-specific
+    sed -i 's/\bTvdb/Goodreads/g' "$file"
+    sed -i 's/\bTVDB/GOODREADS/g' "$file"
+    sed -i 's/\btvdb/goodreads/g' "$file"
+    sed -i 's/\bTvRage/OpenLibrary/g' "$file"
+    sed -i 's/\bTvMaze/GoogleBooks/g' "$file"
+    
+    # Series-specific terms
+    sed -i 's/\bAirDate/PublishDate/g' "$file"
+    sed -i 's/\bairDate/publishDate/g' "$file"
+    sed -i 's/\bAired/Published/g' "$file"
+    sed -i 's/\baired/published/g' "$file"
+    sed -i 's/\bAiring/Publishing/g' "$file"
+    sed -i 's/\bairing/publishing/g' "$file"
+    
+    # Status transformations
+    sed -i 's/\bContinuing/Active/g' "$file"
+    sed -i 's/\bEnded/Inactive/g' "$file"
+    
+    # Additional book-specific terms
+    sed -i 's/\bNetwork\b/Publisher/g' "$file"
+    sed -i 's/\bnetwork\b/publisher/g' "$file"
+    sed -i 's/\bStudio\b/Publisher/g' "$file"
+    sed -i 's/\bstudio\b/publisher/g' "$file"
+    
+    # Remove backup if transformation successful
+    if [ $? -eq 0 ]; then
+        rm "$file.bak"
+    else
+        echo "Error transforming $file, backup retained"
+    fi
+}
+
+# Transform C# files
+echo "Transforming C# files..."
+find src -name "*.cs" -type f | while read file; do
+    # Skip migration files for now
+    if [[ ! "$file" =~ "Migrations" ]]; then
+        transform_domain "$file"
+    fi
+done
+
+# Transform cshtml files
+echo "Transforming Razor files..."
+find src -name "*.cshtml" -type f | while read file; do
+    transform_domain "$file"
+done
+
+# Update directory names
+echo "Renaming directories..."
+if [ -d "src/NzbDrone.Core/Tv" ]; then
+    mv "src/NzbDrone.Core/Tv" "src/NzbDrone.Core/Books"
+    echo "Renamed Tv directory to Books"
+fi
+
+# Update namespace references in project files
+echo "Updating namespace references in project files..."
+find src -name "*.csproj" -type f | while read file; do
+    sed -i 's/\.Tv/\.Books/g' "$file"
+done
+
+echo "Domain transformation complete!"
+echo "Note: Manual review required for:"
+echo "  - Database migrations"
+echo "  - API endpoints"
+echo "  - Frontend components"
+echo "  - Test data"
\ No newline at end of file
diff --git a/scripts/transform/rename-domain-files.sh b/scripts/transform/rename-domain-files.sh
new file mode 100755
index 000000000..ecd3705e6
--- /dev/null
+++ b/scripts/transform/rename-domain-files.sh
@@ -0,0 +1,53 @@
+#!/bin/bash
+# Script to rename domain files from TV to book terminology
+
+echo "Starting file renaming..."
+
+# Function to rename files in a directory
+rename_files() {
+    local dir=$1
+    
+    # Series -> Author
+    find "$dir" -name "*Series*" -type f | while read file; do
+        newfile=$(echo "$file" | sed 's/Series/Author/g')
+        if [ "$file" != "$newfile" ]; then
+            echo "Renaming: $file -> $newfile"
+            mv "$file" "$newfile"
+        fi
+    done
+    
+    # Season -> Book
+    find "$dir" -name "*Season*" -type f | while read file; do
+        newfile=$(echo "$file" | sed 's/Season/Book/g')
+        if [ "$file" != "$newfile" ]; then
+            echo "Renaming: $file -> $newfile"
+            mv "$file" "$newfile"
+        fi
+    done
+    
+    # Episode -> Edition
+    find "$dir" -name "*Episode*" -type f | while read file; do
+        newfile=$(echo "$file" | sed 's/Episode/Edition/g')
+        if [ "$file" != "$newfile" ]; then
+            echo "Renaming: $file -> $newfile"
+            mv "$file" "$newfile"
+        fi
+    done
+}
+
+# Rename files in core directories
+echo "Renaming files in Core directories..."
+rename_files "src/NzbDrone.Core/Books"
+rename_files "src/NzbDrone.Core/AuthorStats"
+rename_files "src/Readarr.Api.V1/Author"
+rename_files "src/Readarr.Api.V1/Editions"
+rename_files "src/Readarr.Api.V1/EditionFiles"
+rename_files "src/Readarr.Api.V1/BookPass"
+
+# Rename test files
+echo "Renaming test files..."
+find src -name "*Test*" -type d | while read dir; do
+    rename_files "$dir"
+done
+
+echo "File renaming complete!"
\ No newline at end of file
diff --git a/src/NzbDrone.Api.Test/v3/ReleaseProfiles/ReleaseProfilesFixture.cs b/src/NzbDrone.Api.Test/v3/ReleaseProfiles/ReleaseProfilesFixture.cs
index a1bf2f667..bbddb1f4e 100644
--- a/src/NzbDrone.Api.Test/v3/ReleaseProfiles/ReleaseProfilesFixture.cs
+++ b/src/NzbDrone.Api.Test/v3/ReleaseProfiles/ReleaseProfilesFixture.cs
@@ -1,6 +1,6 @@
 using FluentAssertions;
 using NUnit.Framework;
-using Readarr.Common.Serializer;
+using NzbDrone.Common.Serializer;
 using Readarr.Api.V3.Profiles.Release;
 using Readarr.Http.REST;
 
diff --git a/src/NzbDrone.Automation.Test/AutomationTest.cs b/src/NzbDrone.Automation.Test/AutomationTest.cs
index 25270d866..2c9c4184f 100644
--- a/src/NzbDrone.Automation.Test/AutomationTest.cs
+++ b/src/NzbDrone.Automation.Test/AutomationTest.cs
@@ -7,7 +7,7 @@
 using NLog.Targets;
 using NUnit.Framework;
 using Readarr.Automation.Test.PageModel;
-using Readarr.Common.EnvironmentInfo;
+using NzbDrone.Common.EnvironmentInfo;
 using Readarr.Test.Common;
 using OpenQA.Selenium;
 using OpenQA.Selenium.Chrome;
diff --git a/src/NzbDrone.Automation.Test/PageModel/PageBase.cs b/src/NzbDrone.Automation.Test/PageModel/PageBase.cs
index 0d7c5c0a6..a82b4d11d 100644
--- a/src/NzbDrone.Automation.Test/PageModel/PageBase.cs
+++ b/src/NzbDrone.Automation.Test/PageModel/PageBase.cs
@@ -46,7 +46,7 @@ public void WaitForNoSpinner(int timeout = 30)
             });
         }
 
-        public IWebElement SeriesNavIcon => Find(By.LinkText("Series"));
+        public IWebElement SeriesNavIcon => Find(By.LinkText("Author"));
 
         public IWebElement CalendarNavIcon => Find(By.LinkText("Calendar"));
 
diff --git a/src/NzbDrone.Core.Test/SeriesStatsTests/SeriesStatisticsFixture.cs b/src/NzbDrone.Core.Test/AuthorStatsTests/AuthorStatisticsFixture.cs
similarity index 98%
rename from src/NzbDrone.Core.Test/SeriesStatsTests/SeriesStatisticsFixture.cs
rename to src/NzbDrone.Core.Test/AuthorStatsTests/AuthorStatisticsFixture.cs
index f6d386364..87504e7dd 100644
--- a/src/NzbDrone.Core.Test/SeriesStatsTests/SeriesStatisticsFixture.cs
+++ b/src/NzbDrone.Core.Test/AuthorStatsTests/AuthorStatisticsFixture.cs
@@ -8,11 +8,11 @@
 using NzbDrone.Core.Languages;
 using NzbDrone.Core.MediaFiles;
 using NzbDrone.Core.Qualities;
-using NzbDrone.Core.SeriesStats;
+using NzbDrone.Core.AuthorStats;
 using NzbDrone.Core.Test.Framework;
 using NzbDrone.Core.Tv;
 
-namespace NzbDrone.Core.Test.SeriesStatsTests
+namespace NzbDrone.Core.Test.AuthorStatsTests
 {
     [TestFixture]
     public class SeriesStatisticsFixture : DbTest<SeriesStatisticsRepository, Series>
diff --git a/src/NzbDrone.Core.Test/TvTests/AddSeriesFixture.cs b/src/NzbDrone.Core.Test/BookTests/AddAuthorFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/AddSeriesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AddAuthorFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesFolderPathBuilderFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorFolderPathBuilderFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesFolderPathBuilderFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorFolderPathBuilderFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesRepositoryTests/SeriesRepositoryFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorRepositoryTests/SeriesRepositoryFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesRepositoryTests/SeriesRepositoryFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorRepositoryTests/SeriesRepositoryFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesServiceTests/UpdateMultipleSeriesFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorServiceTests/UpdateMultipleSeriesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesServiceTests/UpdateMultipleSeriesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorServiceTests/UpdateMultipleSeriesFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesServiceTests/UpdateSeriesFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorServiceTests/UpdateSeriesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesServiceTests/UpdateSeriesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorServiceTests/UpdateSeriesFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesTitleNormalizerFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorTitleNormalizerFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesTitleNormalizerFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorTitleNormalizerFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/SeriesTitleSlugValidatorFixture.cs b/src/NzbDrone.Core.Test/BookTests/AuthorTitleSlugValidatorFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/SeriesTitleSlugValidatorFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/AuthorTitleSlugValidatorFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeMonitoredServiceTests/LegacySetEpisodeMontitoredFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionMonitoredServiceTests/LegacySetEpisodeMontitoredFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeMonitoredServiceTests/LegacySetEpisodeMontitoredFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionMonitoredServiceTests/LegacySetEpisodeMontitoredFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeMonitoredServiceTests/SetEpisodeMontitoredFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionMonitoredServiceTests/SetEpisodeMontitoredFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeMonitoredServiceTests/SetEpisodeMontitoredFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionMonitoredServiceTests/SetEpisodeMontitoredFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesBetweenDatesFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesBetweenDatesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesBetweenDatesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesBetweenDatesFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesRepositoryReadFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesRepositoryReadFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesRepositoryReadFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesRepositoryReadFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWhereCutoffUnmetFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWhereCutoffUnmetFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWhereCutoffUnmetFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWhereCutoffUnmetFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWithFilesFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWithFilesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWithFilesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWithFilesFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWithoutFilesFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWithoutFilesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/EpisodesWithoutFilesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/EpisodesWithoutFilesFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/FindEpisodeFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/FindEpisodeFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeRepositoryTests/FindEpisodeFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionRepositoryTests/FindEpisodeFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/ByAirDateFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionServiceTests/ByAirDateFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/ByAirDateFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionServiceTests/ByAirDateFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/FindEpisodeByTitleFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionServiceTests/FindEpisodeByTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/FindEpisodeByTitleFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionServiceTests/FindEpisodeByTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/HandleEpisodeFileDeletedFixture.cs b/src/NzbDrone.Core.Test/BookTests/EditionServiceTests/HandleEpisodeFileDeletedFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/EpisodeServiceTests/HandleEpisodeFileDeletedFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/EditionServiceTests/HandleEpisodeFileDeletedFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/MoveSeriesServiceFixture.cs b/src/NzbDrone.Core.Test/BookTests/MoveAuthorServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/MoveSeriesServiceFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/MoveAuthorServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/RefreshSeriesServiceFixture.cs b/src/NzbDrone.Core.Test/BookTests/RefreshAuthorServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/RefreshSeriesServiceFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/RefreshAuthorServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/RefreshEpisodeServiceFixture.cs b/src/NzbDrone.Core.Test/BookTests/RefreshEditionServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/RefreshEpisodeServiceFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/RefreshEditionServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/TvTests/ShouldRefreshSeriesFixture.cs b/src/NzbDrone.Core.Test/BookTests/ShouldRefreshAuthorFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/TvTests/ShouldRefreshSeriesFixture.cs
rename to src/NzbDrone.Core.Test/BookTests/ShouldRefreshAuthorFixture.cs
diff --git a/src/NzbDrone.Core.Test/DataAugmentation/DailySeries/DailySeriesDataProxyFixture.cs b/src/NzbDrone.Core.Test/DataAugmentation/DailyAuthor/DailySeriesDataProxyFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DataAugmentation/DailySeries/DailySeriesDataProxyFixture.cs
rename to src/NzbDrone.Core.Test/DataAugmentation/DailyAuthor/DailySeriesDataProxyFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/FullSeasonSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/FullBookSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/FullSeasonSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/FullBookSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/MonitoredEpisodeSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/MonitoredEditionSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/MonitoredEpisodeSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/MonitoredEditionSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/MultiSeasonSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/MultiBookSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/MultiSeasonSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/MultiBookSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/RssSync/DeletedEpisodeFileSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/RssSync/DeletedEditionFileSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/RssSync/DeletedEpisodeFileSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/RssSync/DeletedEditionFileSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/SameEpisodesSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/SameEditionsSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/SameEpisodesSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/SameEditionsSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/Search/SeriesSpecificationFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/Search/AuthorSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/Search/SeriesSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/Search/AuthorSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEpisodeSearchMatchSpecificationTests/AnimeSearchFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEditionSearchMatchSpecificationTests/AnimeSearchFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEpisodeSearchMatchSpecificationTests/AnimeSearchFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEditionSearchMatchSpecificationTests/AnimeSearchFixture.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEpisodeSearchMatchSpecificationTests/StandardEpisodeSearch.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEditionSearchMatchSpecificationTests/StandardEpisodeSearch.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEpisodeSearchMatchSpecificationTests/StandardEpisodeSearch.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/Search/SingleEditionSearchMatchSpecificationTests/StandardEpisodeSearch.cs
diff --git a/src/NzbDrone.Core.Test/DecisionEngineTests/SingleEpisodeAgeDownloadDecisionFixture.cs b/src/NzbDrone.Core.Test/DecisionEngineTests/SingleEditionAgeDownloadDecisionFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/DecisionEngineTests/SingleEpisodeAgeDownloadDecisionFixture.cs
rename to src/NzbDrone.Core.Test/DecisionEngineTests/SingleEditionAgeDownloadDecisionFixture.cs
diff --git a/src/NzbDrone.Core.Test/HealthCheck/Checks/RemovedSeriesCheckFixture.cs b/src/NzbDrone.Core.Test/HealthCheck/Checks/RemovedAuthorCheckFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/HealthCheck/Checks/RemovedSeriesCheckFixture.cs
rename to src/NzbDrone.Core.Test/HealthCheck/Checks/RemovedAuthorCheckFixture.cs
diff --git a/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEpisodeFilesFixture.cs b/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEditionFilesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEpisodeFilesFixture.cs
rename to src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEditionFilesFixture.cs
diff --git a/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEpisodesFixture.cs b/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEditionsFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEpisodesFixture.cs
rename to src/NzbDrone.Core.Test/Housekeeping/Housekeepers/CleanupOrphanedEditionsFixture.cs
diff --git a/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/UpdateCleanTitleForSeriesFixture.cs b/src/NzbDrone.Core.Test/Housekeeping/Housekeepers/UpdateCleanTitleForAuthorFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/Housekeeping/Housekeepers/UpdateCleanTitleForSeriesFixture.cs
rename to src/NzbDrone.Core.Test/Housekeeping/Housekeepers/UpdateCleanTitleForAuthorFixture.cs
diff --git a/src/NzbDrone.Core.Test/IndexerSearchTests/SeriesSearchServiceFixture.cs b/src/NzbDrone.Core.Test/IndexerSearchTests/AuthorSearchServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/IndexerSearchTests/SeriesSearchServiceFixture.cs
rename to src/NzbDrone.Core.Test/IndexerSearchTests/AuthorSearchServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/IndexerTests/SeasonSearchFixture.cs b/src/NzbDrone.Core.Test/IndexerTests/BookSearchFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/IndexerTests/SeasonSearchFixture.cs
rename to src/NzbDrone.Core.Test/IndexerTests/BookSearchFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/DownloadedEpisodesCommandServiceFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/DownloadedEditionsCommandServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/DownloadedEpisodesCommandServiceFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/DownloadedEditionsCommandServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/DownloadedEpisodesImportServiceFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/DownloadedEditionsImportServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/DownloadedEpisodesImportServiceFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/DownloadedEditionsImportServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeFileMovingServiceTests/MoveEpisodeFileFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionFileMovingServiceTests/MoveEpisodeFileFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeFileMovingServiceTests/MoveEpisodeFileFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionFileMovingServiceTests/MoveEpisodeFileFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateEpisodesFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateEpisodesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateEpisodesFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateEpisodesFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateLanguageFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateLanguageFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateLanguageFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateLanguageFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateQualityFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateQualityFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateQualityFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateQualityFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseGroupFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseGroupFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseGroupFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseGroupFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseHashFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseHashFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseHashFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseHashFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateSubtitleInfoFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateSubtitleInfoFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateSubtitleInfoFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateSubtitleInfoFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfoFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfoFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfoFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfoFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfoFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfoFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfoFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfoFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseNameFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseNameFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseNameFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseNameFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/DetectSampleFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/DetectSampleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/DetectSampleFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/DetectSampleFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/GetSceneNameFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/GetSceneNameFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/GetSceneNameFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/GetSceneNameFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/ImportApprovedEpisodesFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/ImportApprovedEpisodesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/ImportApprovedEpisodesFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/ImportApprovedEpisodesFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/ImportDecisionMakerFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/ImportDecisionMakerFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/ImportDecisionMakerFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/ImportDecisionMakerFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/AbsoluteEpisodeNumberSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/AbsoluteEpisodeNumberSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/AbsoluteEpisodeNumberSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/AbsoluteEpisodeNumberSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/AlreadyImportedSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/AlreadyImportedSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/AlreadyImportedSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/AlreadyImportedSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/EpisodeTitleSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/EpisodeTitleSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/FreeSpaceSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/FreeSpaceSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/FreeSpaceSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/FreeSpaceSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/FullSeasonSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/FullBookSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/FullSeasonSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/FullBookSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/HasAudioTrackSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/HasAudioTrackSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/HasAudioTrackSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/HasAudioTrackSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/MatchesFolderSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/MatchesFolderSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/MatchesFolderSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/MatchesFolderSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/MatchesGrabSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/MatchesGrabSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/MatchesGrabSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/MatchesGrabSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/NotSampleSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/NotSampleSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/NotSampleSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/NotSampleSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/NotUnpackingSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/NotUnpackingSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/NotUnpackingSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/NotUnpackingSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/UpgradeSpecificationFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/UpgradeSpecificationFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/EpisodeImport/Specifications/UpgradeSpecificationFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/EditionImport/Specifications/UpgradeSpecificationFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/MediaFileDeletionService/DeleteEpisodeFileFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/MediaFileDeletionService/DeleteEditionFileFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/MediaFileDeletionService/DeleteEpisodeFileFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/MediaFileDeletionService/DeleteEditionFileFixture.cs
diff --git a/src/NzbDrone.Core.Test/MediaFiles/RenameEpisodeFileServiceFixture.cs b/src/NzbDrone.Core.Test/MediaFiles/RenameEditionFileServiceFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MediaFiles/RenameEpisodeFileServiceFixture.cs
rename to src/NzbDrone.Core.Test/MediaFiles/RenameEditionFileServiceFixture.cs
diff --git a/src/NzbDrone.Core.Test/MetadataSource/SearchSeriesComparerFixture.cs b/src/NzbDrone.Core.Test/MetadataSource/SearchAuthorComparerFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/MetadataSource/SearchSeriesComparerFixture.cs
rename to src/NzbDrone.Core.Test/MetadataSource/SearchAuthorComparerFixture.cs
diff --git a/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Json/GetSeriesPathFixture.cs b/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Json/GetAuthorPathFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/NotificationTests/Xbmc/Json/GetSeriesPathFixture.cs
rename to src/NzbDrone.Core.Test/NotificationTests/Xbmc/Json/GetAuthorPathFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AbsoluteEpisodeFormatFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AbsoluteEditionFormatFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AbsoluteEpisodeFormatFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AbsoluteEditionFormatFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/SeriesTitleFirstCharacterFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AuthorTitleFirstCharacterFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/SeriesTitleFirstCharacterFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AuthorTitleFirstCharacterFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/SeriesYearFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AuthorYearFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/SeriesYearFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/AuthorYearFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/EpisodeTitleCollapseFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/EditionTitleCollapseFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/EpisodeTitleCollapseFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/EditionTitleCollapseFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEpisodeFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEditionFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEpisodeFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEditionFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEpisodeTitleFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEditionTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEpisodeTitleFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/MultiEditionTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresAbsoluteEpisodeNumberFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresAbsoluteEditionNumberFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresAbsoluteEpisodeNumberFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresAbsoluteEditionNumberFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresEpisodeTitleFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresEditionTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresEpisodeTitleFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/RequiresEditionTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedSeriesTitleFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedAuthorTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedSeriesTitleFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedAuthorTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedEpisodeTitlesFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedEditionTitlesFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedEpisodeTitlesFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/FileNameBuilderTests/TruncatedEditionTitlesFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/GetSeriesFolderFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/GetAuthorFolderFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/GetSeriesFolderFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/GetAuthorFolderFixture.cs
diff --git a/src/NzbDrone.Core.Test/OrganizerTests/GetSeasonFolderFixture.cs b/src/NzbDrone.Core.Test/OrganizerTests/GetBookFolderFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/OrganizerTests/GetSeasonFolderFixture.cs
rename to src/NzbDrone.Core.Test/OrganizerTests/GetBookFolderFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/AbsoluteEpisodeNumberParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/AbsoluteEditionNumberParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/AbsoluteEpisodeNumberParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/AbsoluteEditionNumberParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/SeriesTitleInfoFixture.cs b/src/NzbDrone.Core.Test/ParserTests/AuthorTitleInfoFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/SeriesTitleInfoFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/AuthorTitleInfoFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/SeasonParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/BookParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/SeasonParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/BookParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/DailyEpisodeParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/DailyEditionParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/DailyEpisodeParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/DailyEditionParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/IsPossibleSpecialEpisodeFixture.cs b/src/NzbDrone.Core.Test/ParserTests/IsPossibleSpecialEditionFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/IsPossibleSpecialEpisodeFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/IsPossibleSpecialEditionFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/MiniSeriesEpisodeParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/MiniAuthorEditionParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/MiniSeriesEpisodeParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/MiniAuthorEditionParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/MultiEpisodeParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/MultiEditionParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/MultiEpisodeParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/MultiEditionParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/NormalizeSeriesTitleFixture.cs b/src/NzbDrone.Core.Test/ParserTests/NormalizeAuthorTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/NormalizeSeriesTitleFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/NormalizeAuthorTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/NormalizeEpisodeTitleFixture.cs b/src/NzbDrone.Core.Test/ParserTests/NormalizeEditionTitleFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/NormalizeEpisodeTitleFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/NormalizeEditionTitleFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetSeriesFixture.cs b/src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetAuthorFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetSeriesFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetAuthorFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetEpisodesFixture.cs b/src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetEditionsFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetEpisodesFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/ParsingServiceTests/GetEditionsFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/SingleEpisodeParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/SingleEditionParserFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/SingleEpisodeParserFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/SingleEditionParserFixture.cs
diff --git a/src/NzbDrone.Core.Test/ParserTests/ValidateParsedEpisodeInfoFixture.cs b/src/NzbDrone.Core.Test/ParserTests/ValidateParsedEditionInfoFixture.cs
similarity index 100%
rename from src/NzbDrone.Core.Test/ParserTests/ValidateParsedEpisodeInfoFixture.cs
rename to src/NzbDrone.Core.Test/ParserTests/ValidateParsedEditionInfoFixture.cs
diff --git a/src/NzbDrone.Core/SeriesStats/SeriesStatistics.cs b/src/NzbDrone.Core/AuthorStats/AuthorStatistics.cs
similarity index 94%
rename from src/NzbDrone.Core/SeriesStats/SeriesStatistics.cs
rename to src/NzbDrone.Core/AuthorStats/AuthorStatistics.cs
index 030b04ee3..1c8308f88 100644
--- a/src/NzbDrone.Core/SeriesStats/SeriesStatistics.cs
+++ b/src/NzbDrone.Core/AuthorStats/AuthorStatistics.cs
@@ -2,7 +2,7 @@
 using System.Collections.Generic;
 using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.SeriesStats
+namespace NzbDrone.Core.AuthorStats
 {
     public class SeriesStatistics : ResultSet
     {
diff --git a/src/NzbDrone.Core/SeriesStats/SeriesStatisticsRepository.cs b/src/NzbDrone.Core/AuthorStats/AuthorStatisticsRepository.cs
similarity index 99%
rename from src/NzbDrone.Core/SeriesStats/SeriesStatisticsRepository.cs
rename to src/NzbDrone.Core/AuthorStats/AuthorStatisticsRepository.cs
index c7fd1bc48..5b6a86b3e 100644
--- a/src/NzbDrone.Core/SeriesStats/SeriesStatisticsRepository.cs
+++ b/src/NzbDrone.Core/AuthorStats/AuthorStatisticsRepository.cs
@@ -6,7 +6,7 @@
 using NzbDrone.Core.MediaFiles;
 using NzbDrone.Core.Tv;
 
-namespace NzbDrone.Core.SeriesStats
+namespace NzbDrone.Core.AuthorStats
 {
     public interface ISeriesStatisticsRepository
     {
diff --git a/src/NzbDrone.Core/SeriesStats/SeriesStatisticsService.cs b/src/NzbDrone.Core/AuthorStats/AuthorStatisticsService.cs
similarity index 98%
rename from src/NzbDrone.Core/SeriesStats/SeriesStatisticsService.cs
rename to src/NzbDrone.Core/AuthorStats/AuthorStatisticsService.cs
index e9c05da97..2724c3e01 100644
--- a/src/NzbDrone.Core/SeriesStats/SeriesStatisticsService.cs
+++ b/src/NzbDrone.Core/AuthorStats/AuthorStatisticsService.cs
@@ -1,7 +1,7 @@
 using System.Collections.Generic;
 using System.Linq;
 
-namespace NzbDrone.Core.SeriesStats
+namespace NzbDrone.Core.AuthorStats
 {
     public interface ISeriesStatisticsService
     {
diff --git a/src/NzbDrone.Core/SeriesStats/SeasonStatistics.cs b/src/NzbDrone.Core/AuthorStats/BookStatistics.cs
similarity index 98%
rename from src/NzbDrone.Core/SeriesStats/SeasonStatistics.cs
rename to src/NzbDrone.Core/AuthorStats/BookStatistics.cs
index 793a56f85..35f6b5f97 100644
--- a/src/NzbDrone.Core/SeriesStats/SeasonStatistics.cs
+++ b/src/NzbDrone.Core/AuthorStats/BookStatistics.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Common.Extensions;
 using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.SeriesStats
+namespace NzbDrone.Core.AuthorStats
 {
     public class SeasonStatistics : ResultSet
     {
diff --git a/src/NzbDrone.Core/Tv/Actor.cs b/src/NzbDrone.Core/Books/Actor.cs
similarity index 92%
rename from src/NzbDrone.Core/Tv/Actor.cs
rename to src/NzbDrone.Core/Books/Actor.cs
index cfc8a0bbd..919f23aac 100644
--- a/src/NzbDrone.Core/Tv/Actor.cs
+++ b/src/NzbDrone.Core/Books/Actor.cs
@@ -1,7 +1,7 @@
 ﻿using System.Collections.Generic;
 using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class Actor : IEmbeddedDocument
     {
diff --git a/src/NzbDrone.Core/Tv/AddSeriesOptions.cs b/src/NzbDrone.Core/Books/AddAuthorOptions.cs
similarity index 85%
rename from src/NzbDrone.Core/Tv/AddSeriesOptions.cs
rename to src/NzbDrone.Core/Books/AddAuthorOptions.cs
index e452ffec9..02e64ed8e 100644
--- a/src/NzbDrone.Core/Tv/AddSeriesOptions.cs
+++ b/src/NzbDrone.Core/Books/AddAuthorOptions.cs
@@ -1,4 +1,4 @@
-﻿namespace NzbDrone.Core.Tv
+﻿namespace NzbDrone.Core.Books
 {
     public class AddSeriesOptions : MonitoringOptions
     {
diff --git a/src/NzbDrone.Core/Tv/AddSeriesService.cs b/src/NzbDrone.Core/Books/AddAuthorService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/AddSeriesService.cs
rename to src/NzbDrone.Core/Books/AddAuthorService.cs
index 4afa17f4d..c92acb6aa 100644
--- a/src/NzbDrone.Core/Tv/AddSeriesService.cs
+++ b/src/NzbDrone.Core/Books/AddAuthorService.cs
@@ -12,7 +12,7 @@
 using NzbDrone.Core.Organizer;
 using NzbDrone.Core.Parser;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IAddSeriesService
     {
diff --git a/src/NzbDrone.Core/Tv/AddSeriesValidator.cs b/src/NzbDrone.Core/Books/AddAuthorValidator.cs
similarity index 97%
rename from src/NzbDrone.Core/Tv/AddSeriesValidator.cs
rename to src/NzbDrone.Core/Books/AddAuthorValidator.cs
index a4ab39a61..c38221a56 100644
--- a/src/NzbDrone.Core/Tv/AddSeriesValidator.cs
+++ b/src/NzbDrone.Core/Books/AddAuthorValidator.cs
@@ -2,7 +2,7 @@
 using FluentValidation.Results;
 using NzbDrone.Core.Validation.Paths;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IAddSeriesValidator
     {
diff --git a/src/NzbDrone.Core/Tv/Series.cs b/src/NzbDrone.Core/Books/Author.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/Series.cs
rename to src/NzbDrone.Core/Books/Author.cs
index 2464742b7..109d6758e 100644
--- a/src/NzbDrone.Core/Tv/Series.cs
+++ b/src/NzbDrone.Core/Books/Author.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Core.Languages;
 using NzbDrone.Core.Profiles.Qualities;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class Series : ModelBase
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesAddedHandler.cs b/src/NzbDrone.Core/Books/AuthorAddedHandler.cs
similarity index 96%
rename from src/NzbDrone.Core/Tv/SeriesAddedHandler.cs
rename to src/NzbDrone.Core/Books/AuthorAddedHandler.cs
index 5fb32259f..ae315222a 100644
--- a/src/NzbDrone.Core/Tv/SeriesAddedHandler.cs
+++ b/src/NzbDrone.Core/Books/AuthorAddedHandler.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Core.Tv.Commands;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class SeriesAddedHandler : IHandle<SeriesAddedEvent>,
                                       IHandle<SeriesImportedEvent>
diff --git a/src/NzbDrone.Core/Tv/SeriesEditedService.cs b/src/NzbDrone.Core/Books/AuthorEditedService.cs
similarity index 96%
rename from src/NzbDrone.Core/Tv/SeriesEditedService.cs
rename to src/NzbDrone.Core/Books/AuthorEditedService.cs
index 5a002534e..0127edaea 100644
--- a/src/NzbDrone.Core/Tv/SeriesEditedService.cs
+++ b/src/NzbDrone.Core/Books/AuthorEditedService.cs
@@ -4,7 +4,7 @@
 using NzbDrone.Core.Tv.Commands;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class SeriesEditedService : IHandle<SeriesEditedEvent>
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesPathBuilder.cs b/src/NzbDrone.Core/Books/AuthorPathBuilder.cs
similarity index 98%
rename from src/NzbDrone.Core/Tv/SeriesPathBuilder.cs
rename to src/NzbDrone.Core/Books/AuthorPathBuilder.cs
index 738569a51..bf53fba7b 100644
--- a/src/NzbDrone.Core/Tv/SeriesPathBuilder.cs
+++ b/src/NzbDrone.Core/Books/AuthorPathBuilder.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Core.Organizer;
 using NzbDrone.Core.RootFolders;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IBuildSeriesPaths
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesRepository.cs b/src/NzbDrone.Core/Books/AuthorRepository.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/SeriesRepository.cs
rename to src/NzbDrone.Core/Books/AuthorRepository.cs
index f83545cc8..3b5ca6170 100644
--- a/src/NzbDrone.Core/Tv/SeriesRepository.cs
+++ b/src/NzbDrone.Core/Books/AuthorRepository.cs
@@ -4,7 +4,7 @@
 using NzbDrone.Core.Datastore;
 using NzbDrone.Core.Messaging.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface ISeriesRepository : IBasicRepository<Series>
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesScannedHandler.cs b/src/NzbDrone.Core/Books/AuthorScannedHandler.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/SeriesScannedHandler.cs
rename to src/NzbDrone.Core/Books/AuthorScannedHandler.cs
index e4d8ea90a..3a0270eef 100644
--- a/src/NzbDrone.Core/Tv/SeriesScannedHandler.cs
+++ b/src/NzbDrone.Core/Books/AuthorScannedHandler.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class SeriesScannedHandler : IHandle<SeriesScannedEvent>,
                                         IHandle<SeriesScanSkippedEvent>
diff --git a/src/NzbDrone.Core/Tv/SeriesService.cs b/src/NzbDrone.Core/Books/AuthorService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/SeriesService.cs
rename to src/NzbDrone.Core/Books/AuthorService.cs
index 29cb6fac5..23c1943e3 100644
--- a/src/NzbDrone.Core/Tv/SeriesService.cs
+++ b/src/NzbDrone.Core/Books/AuthorService.cs
@@ -7,7 +7,7 @@
 using NzbDrone.Core.Parser;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface ISeriesService
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesStatusType.cs b/src/NzbDrone.Core/Books/AuthorStatusType.cs
similarity index 80%
rename from src/NzbDrone.Core/Tv/SeriesStatusType.cs
rename to src/NzbDrone.Core/Books/AuthorStatusType.cs
index 722b88ab3..2b86c8b03 100644
--- a/src/NzbDrone.Core/Tv/SeriesStatusType.cs
+++ b/src/NzbDrone.Core/Books/AuthorStatusType.cs
@@ -1,4 +1,4 @@
-﻿namespace NzbDrone.Core.Tv
+﻿namespace NzbDrone.Core.Books
 {
     public enum SeriesStatusType
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesTitleNormalizer.cs b/src/NzbDrone.Core/Books/AuthorTitleNormalizer.cs
similarity index 94%
rename from src/NzbDrone.Core/Tv/SeriesTitleNormalizer.cs
rename to src/NzbDrone.Core/Books/AuthorTitleNormalizer.cs
index f9f4f680c..edc557d45 100644
--- a/src/NzbDrone.Core/Tv/SeriesTitleNormalizer.cs
+++ b/src/NzbDrone.Core/Books/AuthorTitleNormalizer.cs
@@ -1,6 +1,6 @@
 using System.Collections.Generic;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public static class SeriesTitleNormalizer
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesTitleSlugValidator.cs b/src/NzbDrone.Core/Books/AuthorTitleSlugValidator.cs
similarity index 98%
rename from src/NzbDrone.Core/Tv/SeriesTitleSlugValidator.cs
rename to src/NzbDrone.Core/Books/AuthorTitleSlugValidator.cs
index 6a2a54baa..339710ee7 100644
--- a/src/NzbDrone.Core/Tv/SeriesTitleSlugValidator.cs
+++ b/src/NzbDrone.Core/Books/AuthorTitleSlugValidator.cs
@@ -2,7 +2,7 @@
 using FluentValidation.Validators;
 using NzbDrone.Common.Extensions;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class SeriesTitleSlugValidator : PropertyValidator
     {
diff --git a/src/NzbDrone.Core/Tv/SeriesTypes.cs b/src/NzbDrone.Core/Books/AuthorTypes.cs
similarity index 75%
rename from src/NzbDrone.Core/Tv/SeriesTypes.cs
rename to src/NzbDrone.Core/Books/AuthorTypes.cs
index c5b758f9c..d7e589b15 100644
--- a/src/NzbDrone.Core/Tv/SeriesTypes.cs
+++ b/src/NzbDrone.Core/Books/AuthorTypes.cs
@@ -1,4 +1,4 @@
-﻿namespace NzbDrone.Core.Tv
+﻿namespace NzbDrone.Core.Books
 {
     public enum SeriesTypes
     {
diff --git a/src/NzbDrone.Core/Tv/Season.cs b/src/NzbDrone.Core/Books/Book.cs
similarity index 92%
rename from src/NzbDrone.Core/Tv/Season.cs
rename to src/NzbDrone.Core/Books/Book.cs
index b581f26b8..31055c124 100644
--- a/src/NzbDrone.Core/Tv/Season.cs
+++ b/src/NzbDrone.Core/Books/Book.cs
@@ -1,7 +1,7 @@
 ﻿using System.Collections.Generic;
 using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class Season : IEmbeddedDocument
     {
diff --git a/src/NzbDrone.Core/Tv/Commands/BulkMoveSeriesCommand.cs b/src/NzbDrone.Core/Books/Commands/BulkMoveAuthorCommand.cs
similarity index 96%
rename from src/NzbDrone.Core/Tv/Commands/BulkMoveSeriesCommand.cs
rename to src/NzbDrone.Core/Books/Commands/BulkMoveAuthorCommand.cs
index 3df2ba5c0..bc5d42ba8 100644
--- a/src/NzbDrone.Core/Tv/Commands/BulkMoveSeriesCommand.cs
+++ b/src/NzbDrone.Core/Books/Commands/BulkMoveAuthorCommand.cs
@@ -2,7 +2,7 @@
 using System.Collections.Generic;
 using NzbDrone.Core.Messaging.Commands;
 
-namespace NzbDrone.Core.Tv.Commands
+namespace NzbDrone.Core.Books.Commands
 {
     public class BulkMoveSeriesCommand : Command
     {
diff --git a/src/NzbDrone.Core/Tv/Commands/MoveSeriesCommand.cs b/src/NzbDrone.Core/Books/Commands/MoveAuthorCommand.cs
similarity index 90%
rename from src/NzbDrone.Core/Tv/Commands/MoveSeriesCommand.cs
rename to src/NzbDrone.Core/Books/Commands/MoveAuthorCommand.cs
index 9399ffb61..6aa889b6b 100644
--- a/src/NzbDrone.Core/Tv/Commands/MoveSeriesCommand.cs
+++ b/src/NzbDrone.Core/Books/Commands/MoveAuthorCommand.cs
@@ -1,6 +1,6 @@
 using NzbDrone.Core.Messaging.Commands;
 
-namespace NzbDrone.Core.Tv.Commands
+namespace NzbDrone.Core.Books.Commands
 {
     public class MoveSeriesCommand : Command
     {
diff --git a/src/NzbDrone.Core/Tv/Commands/RefreshSeriesCommand.cs b/src/NzbDrone.Core/Books/Commands/RefreshAuthorCommand.cs
similarity index 96%
rename from src/NzbDrone.Core/Tv/Commands/RefreshSeriesCommand.cs
rename to src/NzbDrone.Core/Books/Commands/RefreshAuthorCommand.cs
index 1c8a6f269..0248db521 100644
--- a/src/NzbDrone.Core/Tv/Commands/RefreshSeriesCommand.cs
+++ b/src/NzbDrone.Core/Books/Commands/RefreshAuthorCommand.cs
@@ -3,7 +3,7 @@
 using NzbDrone.Common.Extensions;
 using NzbDrone.Core.Messaging.Commands;
 
-namespace NzbDrone.Core.Tv.Commands
+namespace NzbDrone.Core.Books.Commands
 {
     public class RefreshSeriesCommand : Command
     {
diff --git a/src/NzbDrone.Core/Tv/Episode.cs b/src/NzbDrone.Core/Books/Edition.cs
similarity index 98%
rename from src/NzbDrone.Core/Tv/Episode.cs
rename to src/NzbDrone.Core/Books/Edition.cs
index 05384cf26..546605874 100644
--- a/src/NzbDrone.Core/Tv/Episode.cs
+++ b/src/NzbDrone.Core/Books/Edition.cs
@@ -4,7 +4,7 @@
 using NzbDrone.Core.Datastore;
 using NzbDrone.Core.MediaFiles;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class Episode : ModelBase, IComparable
     {
diff --git a/src/NzbDrone.Core/Tv/EpisodeCutoffService.cs b/src/NzbDrone.Core/Books/EditionCutoffService.cs
similarity index 98%
rename from src/NzbDrone.Core/Tv/EpisodeCutoffService.cs
rename to src/NzbDrone.Core/Books/EditionCutoffService.cs
index 36297f760..7c098e9f7 100644
--- a/src/NzbDrone.Core/Tv/EpisodeCutoffService.cs
+++ b/src/NzbDrone.Core/Books/EditionCutoffService.cs
@@ -5,7 +5,7 @@
 using NzbDrone.Core.Profiles.Qualities;
 using NzbDrone.Core.Qualities;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IEpisodeCutoffService
     {
diff --git a/src/NzbDrone.Core/Tv/EpisodeMonitoredService.cs b/src/NzbDrone.Core/Books/EditionMonitoredService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/EpisodeMonitoredService.cs
rename to src/NzbDrone.Core/Books/EditionMonitoredService.cs
index c28c1d522..0f1bbb7c9 100644
--- a/src/NzbDrone.Core/Tv/EpisodeMonitoredService.cs
+++ b/src/NzbDrone.Core/Books/EditionMonitoredService.cs
@@ -4,7 +4,7 @@
 using NLog;
 using NzbDrone.Common.Extensions;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IEpisodeMonitoredService
     {
diff --git a/src/NzbDrone.Core/Tv/EpisodeRefreshedService.cs b/src/NzbDrone.Core/Books/EditionRefreshedService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/EpisodeRefreshedService.cs
rename to src/NzbDrone.Core/Books/EditionRefreshedService.cs
index 0b535dc25..ab785b1ba 100644
--- a/src/NzbDrone.Core/Tv/EpisodeRefreshedService.cs
+++ b/src/NzbDrone.Core/Books/EditionRefreshedService.cs
@@ -9,7 +9,7 @@
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IEpisodeRefreshedService
     {
diff --git a/src/NzbDrone.Core/Tv/EpisodeRepository.cs b/src/NzbDrone.Core/Books/EditionRepository.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/EpisodeRepository.cs
rename to src/NzbDrone.Core/Books/EditionRepository.cs
index c8ef2d0d8..1e7ca6371 100644
--- a/src/NzbDrone.Core/Tv/EpisodeRepository.cs
+++ b/src/NzbDrone.Core/Books/EditionRepository.cs
@@ -8,7 +8,7 @@
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.Qualities;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IEpisodeRepository : IBasicRepository<Episode>
     {
diff --git a/src/NzbDrone.Core/Tv/EpisodeService.cs b/src/NzbDrone.Core/Books/EditionService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/EpisodeService.cs
rename to src/NzbDrone.Core/Books/EditionService.cs
index 0abca4871..cdbde9484 100644
--- a/src/NzbDrone.Core/Tv/EpisodeService.cs
+++ b/src/NzbDrone.Core/Books/EditionService.cs
@@ -10,7 +10,7 @@
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IEpisodeService
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesAddCompletedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorAddCompletedEvent.cs
similarity index 87%
rename from src/NzbDrone.Core/Tv/Events/SeriesAddCompletedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorAddCompletedEvent.cs
index c5c1e8381..77e1a30db 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesAddCompletedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorAddCompletedEvent.cs
@@ -1,6 +1,6 @@
 using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesAddCompletedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesAddedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorAddedEvent.cs
similarity index 86%
rename from src/NzbDrone.Core/Tv/Events/SeriesAddedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorAddedEvent.cs
index 1a18c2b8d..8f0a065bd 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesAddedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorAddedEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesAddedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesBulkEditedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorBulkEditedEvent.cs
similarity index 89%
rename from src/NzbDrone.Core/Tv/Events/SeriesBulkEditedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorBulkEditedEvent.cs
index 7fbf23e48..4f4669b79 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesBulkEditedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorBulkEditedEvent.cs
@@ -1,7 +1,7 @@
 ﻿using System.Collections.Generic;
 using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesBulkEditedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesDeletedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorDeletedEvent.cs
similarity index 93%
rename from src/NzbDrone.Core/Tv/Events/SeriesDeletedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorDeletedEvent.cs
index 38130a511..d1e431e30 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesDeletedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorDeletedEvent.cs
@@ -1,7 +1,7 @@
 using System.Collections.Generic;
 using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesDeletedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesEditedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorEditedEvent.cs
similarity index 92%
rename from src/NzbDrone.Core/Tv/Events/SeriesEditedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorEditedEvent.cs
index 601ab99ef..e467b52e9 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesEditedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorEditedEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesEditedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesImportedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorImportedEvent.cs
similarity index 89%
rename from src/NzbDrone.Core/Tv/Events/SeriesImportedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorImportedEvent.cs
index 2810c05ed..156f846c4 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesImportedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorImportedEvent.cs
@@ -1,7 +1,7 @@
 ﻿using System.Collections.Generic;
 using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesImportedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesMovedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorMovedEvent.cs
similarity index 92%
rename from src/NzbDrone.Core/Tv/Events/SeriesMovedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorMovedEvent.cs
index 72c48c269..e6c88274e 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesMovedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorMovedEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesMovedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesRefreshCompleteEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorRefreshCompleteEvent.cs
similarity index 74%
rename from src/NzbDrone.Core/Tv/Events/SeriesRefreshCompleteEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorRefreshCompleteEvent.cs
index de03a5cb2..3be4e92cf 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesRefreshCompleteEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorRefreshCompleteEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesRefreshCompleteEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesRefreshStartingEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorRefreshStartingEvent.cs
similarity index 88%
rename from src/NzbDrone.Core/Tv/Events/SeriesRefreshStartingEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorRefreshStartingEvent.cs
index cb3b6fc5f..db52164c2 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesRefreshStartingEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorRefreshStartingEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesRefreshStartingEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/SeriesUpdatedEvent.cs b/src/NzbDrone.Core/Books/Events/AuthorUpdatedEvent.cs
similarity index 87%
rename from src/NzbDrone.Core/Tv/Events/SeriesUpdatedEvent.cs
rename to src/NzbDrone.Core/Books/Events/AuthorUpdatedEvent.cs
index 32bb77995..5b8df8caa 100644
--- a/src/NzbDrone.Core/Tv/Events/SeriesUpdatedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/AuthorUpdatedEvent.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class SeriesUpdatedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/Events/EpisodeInfoRefreshedEvent.cs b/src/NzbDrone.Core/Books/Events/EditionInfoRefreshedEvent.cs
similarity index 95%
rename from src/NzbDrone.Core/Tv/Events/EpisodeInfoRefreshedEvent.cs
rename to src/NzbDrone.Core/Books/Events/EditionInfoRefreshedEvent.cs
index 6a3f24b65..7d907e677 100644
--- a/src/NzbDrone.Core/Tv/Events/EpisodeInfoRefreshedEvent.cs
+++ b/src/NzbDrone.Core/Books/Events/EditionInfoRefreshedEvent.cs
@@ -2,7 +2,7 @@
 using System.Collections.ObjectModel;
 using NzbDrone.Common.Messaging;
 
-namespace NzbDrone.Core.Tv.Events
+namespace NzbDrone.Core.Books.Events
 {
     public class EpisodeInfoRefreshedEvent : IEvent
     {
diff --git a/src/NzbDrone.Core/Tv/MonitoringOptions.cs b/src/NzbDrone.Core/Books/MonitoringOptions.cs
similarity index 95%
rename from src/NzbDrone.Core/Tv/MonitoringOptions.cs
rename to src/NzbDrone.Core/Books/MonitoringOptions.cs
index 82983a26c..41c3b374e 100644
--- a/src/NzbDrone.Core/Tv/MonitoringOptions.cs
+++ b/src/NzbDrone.Core/Books/MonitoringOptions.cs
@@ -1,7 +1,7 @@
 using System;
 using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class MonitoringOptions : IEmbeddedDocument
     {
diff --git a/src/NzbDrone.Core/Tv/MoveSeriesService.cs b/src/NzbDrone.Core/Books/MoveAuthorService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/MoveSeriesService.cs
rename to src/NzbDrone.Core/Books/MoveAuthorService.cs
index 0a09eaac0..eaa564141 100644
--- a/src/NzbDrone.Core/Tv/MoveSeriesService.cs
+++ b/src/NzbDrone.Core/Books/MoveAuthorService.cs
@@ -9,7 +9,7 @@
 using NzbDrone.Core.Tv.Commands;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class MoveSeriesService : IExecute<MoveSeriesCommand>, IExecute<BulkMoveSeriesCommand>
     {
diff --git a/src/NzbDrone.Core/Tv/MultipleSeriesFoundException.cs b/src/NzbDrone.Core/Books/MultipleAuthorFoundException.cs
similarity index 92%
rename from src/NzbDrone.Core/Tv/MultipleSeriesFoundException.cs
rename to src/NzbDrone.Core/Books/MultipleAuthorFoundException.cs
index 92e2d88c4..1134873ec 100644
--- a/src/NzbDrone.Core/Tv/MultipleSeriesFoundException.cs
+++ b/src/NzbDrone.Core/Books/MultipleAuthorFoundException.cs
@@ -1,7 +1,7 @@
 using System.Collections.Generic;
 using NzbDrone.Common.Exceptions;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class MultipleSeriesFoundException : NzbDroneException
     {
diff --git a/src/NzbDrone.Core/Tv/Ratings.cs b/src/NzbDrone.Core/Books/Ratings.cs
similarity index 85%
rename from src/NzbDrone.Core/Tv/Ratings.cs
rename to src/NzbDrone.Core/Books/Ratings.cs
index 6c66fbb7e..a0c535130 100644
--- a/src/NzbDrone.Core/Tv/Ratings.cs
+++ b/src/NzbDrone.Core/Books/Ratings.cs
@@ -1,6 +1,6 @@
 ﻿using NzbDrone.Core.Datastore;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class Ratings : IEmbeddedDocument
     {
diff --git a/src/NzbDrone.Core/Tv/RefreshSeriesService.cs b/src/NzbDrone.Core/Books/RefreshAuthorService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/RefreshSeriesService.cs
rename to src/NzbDrone.Core/Books/RefreshAuthorService.cs
index b5af90527..2e6ac9a6f 100644
--- a/src/NzbDrone.Core/Tv/RefreshSeriesService.cs
+++ b/src/NzbDrone.Core/Books/RefreshAuthorService.cs
@@ -16,7 +16,7 @@
 using NzbDrone.Core.Tv.Commands;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public class RefreshSeriesService : IExecute<RefreshSeriesCommand>
     {
diff --git a/src/NzbDrone.Core/Tv/RefreshEpisodeService.cs b/src/NzbDrone.Core/Books/RefreshEditionService.cs
similarity index 99%
rename from src/NzbDrone.Core/Tv/RefreshEpisodeService.cs
rename to src/NzbDrone.Core/Books/RefreshEditionService.cs
index 18b242835..0d75a11b3 100644
--- a/src/NzbDrone.Core/Tv/RefreshEpisodeService.cs
+++ b/src/NzbDrone.Core/Books/RefreshEditionService.cs
@@ -6,7 +6,7 @@
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.Tv.Events;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface IRefreshEpisodeService
     {
diff --git a/src/NzbDrone.Core/Tv/ShouldRefreshSeries.cs b/src/NzbDrone.Core/Books/ShouldRefreshAuthor.cs
similarity index 98%
rename from src/NzbDrone.Core/Tv/ShouldRefreshSeries.cs
rename to src/NzbDrone.Core/Books/ShouldRefreshAuthor.cs
index 9f0d4c029..b5e0056fa 100644
--- a/src/NzbDrone.Core/Tv/ShouldRefreshSeries.cs
+++ b/src/NzbDrone.Core/Books/ShouldRefreshAuthor.cs
@@ -3,7 +3,7 @@
 using NLog;
 using NzbDrone.Common.Extensions;
 
-namespace NzbDrone.Core.Tv
+namespace NzbDrone.Core.Books
 {
     public interface ICheckIfSeriesShouldBeRefreshed
     {
diff --git a/src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeries.cs b/src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeries.cs
similarity index 100%
rename from src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeries.cs
rename to src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeries.cs
diff --git a/src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeriesDataProxy.cs b/src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeriesDataProxy.cs
similarity index 100%
rename from src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeriesDataProxy.cs
rename to src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeriesDataProxy.cs
diff --git a/src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeriesService.cs b/src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeriesService.cs
similarity index 100%
rename from src/NzbDrone.Core/DataAugmentation/DailySeries/DailySeriesService.cs
rename to src/NzbDrone.Core/DataAugmentation/DailyAuthor/DailySeriesService.cs
diff --git a/src/NzbDrone.Core/DiskSpace/DiskSpaceService.cs b/src/NzbDrone.Core/DiskSpace/DiskSpaceService.cs
index add596fc7..ea0212d4c 100644
--- a/src/NzbDrone.Core/DiskSpace/DiskSpaceService.cs
+++ b/src/NzbDrone.Core/DiskSpace/DiskSpaceService.cs
@@ -49,7 +49,7 @@ public List<DiskSpace> GetFreeSpace()
 
         private IEnumerable<string> GetSeriesRootPaths()
         {
-            // Get all series paths and find the correct root folder for each. For each unique root folder path,
+            // Get all author paths and find the correct root folder for each. For each unique root folder path,
             // ensure the path exists and get its path root and return all unique path roots.
 
             return _seriesService.GetAllSeriesPaths()
@@ -64,7 +64,7 @@ private IEnumerable<string> GetSeriesRootPaths()
         private IEnumerable<string> GetFixedDisksRootPaths()
         {
             return _diskProvider.GetMounts()
-                .Where(d => d.DriveType is DriveType.Fixed or DriveType.Network)
+                .Where(d => d.DriveType is DriveType.Fixed or DriveType.Publisher)
                 .Where(d => !_regexSpecialDrive.IsMatch(d.RootDirectory))
                 .Select(d => d.RootDirectory);
         }
diff --git a/src/NzbDrone.Core/Extras/ExistingExtraFileService.cs b/src/NzbDrone.Core/Extras/ExistingExtraFileService.cs
index d357c5ba6..cc8e14a16 100644
--- a/src/NzbDrone.Core/Extras/ExistingExtraFileService.cs
+++ b/src/NzbDrone.Core/Extras/ExistingExtraFileService.cs
@@ -10,7 +10,7 @@ namespace NzbDrone.Core.Extras
 {
     public interface IExistingExtraFiles
     {
-        List<string> ImportExtraFiles(Series series, List<string> possibleExtraFiles, string fileNameBeforeRename);
+        List<string> ImportExtraFiles(Author author, List<string> possibleExtraFiles, string fileNameBeforeRename);
     }
 
     public class ExistingExtraFileService : IExistingExtraFiles, IHandle<SeriesScannedEvent>
@@ -25,17 +25,17 @@ public ExistingExtraFileService(IEnumerable<IImportExistingExtraFiles> existingE
             _logger = logger;
         }
 
-        public List<string> ImportExtraFiles(Series series, List<string> possibleExtraFiles, string fileNameBeforeRename)
+        public List<string> ImportExtraFiles(Author author, List<string> possibleExtraFiles, string fileNameBeforeRename)
         {
-            _logger.Debug("Looking for existing extra files in {0}", series.Path);
+            _logger.Debug("Looking for existing extra files in {0}", author.Path);
 
             var importedFiles = new List<string>();
 
             foreach (var existingExtraFileImporter in _existingExtraFileImporters)
             {
-                var imported = existingExtraFileImporter.ProcessFiles(series, possibleExtraFiles, importedFiles, fileNameBeforeRename);
+                var imported = existingExtraFileImporter.ProcessFiles(author, possibleExtraFiles, importedFiles, fileNameBeforeRename);
 
-                importedFiles.AddRange(imported.Select(f => Path.Combine(series.Path, f.RelativePath)));
+                importedFiles.AddRange(imported.Select(f => Path.Combine(author.Path, f.RelativePath)));
             }
 
             return importedFiles;
@@ -43,9 +43,9 @@ public List<string> ImportExtraFiles(Series series, List<string> possibleExtraFi
 
         public void Handle(SeriesScannedEvent message)
         {
-            var series = message.Series;
+            var author = message.Author;
             var possibleExtraFiles = message.PossibleExtraFiles;
-            var importedFiles = ImportExtraFiles(series, possibleExtraFiles, null);
+            var importedFiles = ImportExtraFiles(author, possibleExtraFiles, null);
 
             _logger.Info("Found {0} possible extra files, imported {1} files.", possibleExtraFiles.Count, importedFiles.Count);
         }
diff --git a/src/NzbDrone.Core/Extras/ExtraService.cs b/src/NzbDrone.Core/Extras/ExtraService.cs
index 5742b7610..a49012bc3 100644
--- a/src/NzbDrone.Core/Extras/ExtraService.cs
+++ b/src/NzbDrone.Core/Extras/ExtraService.cs
@@ -18,8 +18,8 @@ namespace NzbDrone.Core.Extras
 {
     public interface IExtraService
     {
-        void MoveFilesAfterRename(Series series, EpisodeFile episodeFile);
-        void ImportEpisode(LocalEpisode localEpisode, EpisodeFile episodeFile, bool isReadOnly);
+        void MoveFilesAfterRename(Author author, EditionFile editionFile);
+        void ImportEpisode(LocalEpisode localEpisode, EditionFile editionFile, bool isReadOnly);
     }
 
     public class ExtraService : IExtraService,
@@ -34,7 +34,7 @@ public class ExtraService : IExtraService,
         private readonly IDiskProvider _diskProvider;
         private readonly IConfigService _configService;
         private readonly List<IManageExtraFiles> _extraFileManagers;
-        private readonly Dictionary<int, Series> _seriesWithImportedFiles;
+        private readonly Dictionary<int, Author> _seriesWithImportedFiles;
 
         public ExtraService(IMediaFileService mediaFileService,
                             IEpisodeService episodeService,
@@ -48,17 +48,17 @@ public ExtraService(IMediaFileService mediaFileService,
             _diskProvider = diskProvider;
             _configService = configService;
             _extraFileManagers = extraFileManagers.OrderBy(e => e.Order).ToList();
-            _seriesWithImportedFiles = new Dictionary<int, Series>();
+            _seriesWithImportedFiles = new Dictionary<int, Author>();
         }
 
-        public void ImportEpisode(LocalEpisode localEpisode, EpisodeFile episodeFile, bool isReadOnly)
+        public void ImportEpisode(LocalEpisode localEpisode, EditionFile editionFile, bool isReadOnly)
         {
-            ImportExtraFiles(localEpisode, episodeFile, isReadOnly);
+            ImportExtraFiles(localEpisode, editionFile, isReadOnly);
 
-            CreateAfterEpisodeImport(localEpisode.Series, episodeFile);
+            CreateAfterEpisodeImport(localEpisode.Author, editionFile);
         }
 
-        private void ImportExtraFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, bool isReadOnly)
+        private void ImportExtraFiles(LocalEpisode localEpisode, EditionFile editionFile, bool isReadOnly)
         {
             if (!_configService.ImportExtraFiles)
             {
@@ -88,7 +88,7 @@ private void ImportExtraFiles(LocalEpisode localEpisode, EpisodeFile episodeFile
 
                 for (var i = 0; i < _extraFileManagers.Count; i++)
                 {
-                    if (_extraFileManagers[i].CanImportFile(localEpisode, episodeFile, file, extension, isReadOnly))
+                    if (_extraFileManagers[i].CanImportFile(localEpisode, editionFile, file, extension, isReadOnly))
                     {
                         managedFiles[i].Add(file);
                         break;
@@ -98,20 +98,20 @@ private void ImportExtraFiles(LocalEpisode localEpisode, EpisodeFile episodeFile
 
             for (var i = 0; i < _extraFileManagers.Count; i++)
             {
-                _extraFileManagers[i].ImportFiles(localEpisode, episodeFile, managedFiles[i], isReadOnly);
+                _extraFileManagers[i].ImportFiles(localEpisode, editionFile, managedFiles[i], isReadOnly);
             }
         }
 
-        private void CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile)
+        private void CreateAfterEpisodeImport(Author author, EditionFile editionFile)
         {
             lock (_seriesWithImportedFiles)
             {
-                _seriesWithImportedFiles.TryAdd(series.Id, series);
+                _seriesWithImportedFiles.TryAdd(author.Id, author);
             }
 
             foreach (var extraFileManager in _extraFileManagers)
             {
-                extraFileManager.CreateAfterEpisodeImport(series, episodeFile);
+                extraFileManager.CreateAfterEpisodeImport(author, editionFile);
             }
         }
 
@@ -119,60 +119,60 @@ public void Handle(MediaCoversUpdatedEvent message)
         {
             if (message.Updated)
             {
-                var series = message.Series;
+                var author = message.Author;
 
                 foreach (var extraFileManager in _extraFileManagers)
                 {
-                    extraFileManager.CreateAfterMediaCoverUpdate(series);
+                    extraFileManager.CreateAfterMediaCoverUpdate(author);
                 }
             }
         }
 
         public void Handle(SeriesScannedEvent message)
         {
-            var series = message.Series;
-            var episodeFiles = GetEpisodeFiles(series.Id);
+            var author = message.Author;
+            var editionFiles = GetEditionFiles(author.Id);
 
             foreach (var extraFileManager in _extraFileManagers)
             {
-                extraFileManager.CreateAfterSeriesScan(series, episodeFiles);
+                extraFileManager.CreateAfterSeriesScan(author, editionFiles);
             }
         }
 
         public void Handle(EpisodeFolderCreatedEvent message)
         {
-            var series = message.Series;
+            var author = message.Author;
 
             foreach (var extraFileManager in _extraFileManagers)
             {
-                extraFileManager.CreateAfterEpisodeFolder(series, message.SeriesFolder, message.SeasonFolder);
+                extraFileManager.CreateAfterEpisodeFolder(author, message.SeriesFolder, message.SeasonFolder);
             }
         }
 
-        public void MoveFilesAfterRename(Series series, EpisodeFile episodeFile)
+        public void MoveFilesAfterRename(Author author, EditionFile editionFile)
         {
-            var episodeFiles = new List<EpisodeFile> { episodeFile };
+            var editionFiles = new List<EditionFile> { editionFile };
 
             foreach (var extraFileManager in _extraFileManagers)
             {
-                extraFileManager.MoveFilesAfterRename(series, episodeFiles);
+                extraFileManager.MoveFilesAfterRename(author, editionFiles);
             }
         }
 
         public void Handle(SeriesRenamedEvent message)
         {
-            var series = message.Series;
-            var episodeFiles = GetEpisodeFiles(series.Id);
+            var author = message.Author;
+            var editionFiles = GetEditionFiles(author.Id);
 
             foreach (var extraFileManager in _extraFileManagers)
             {
-                extraFileManager.MoveFilesAfterRename(series, episodeFiles);
+                extraFileManager.MoveFilesAfterRename(author, editionFiles);
             }
         }
 
         public void Handle(DownloadsProcessedEvent message)
         {
-            var allSeries = new List<Series>();
+            var allSeries = new List<Author>();
 
             lock (_seriesWithImportedFiles)
             {
@@ -181,27 +181,27 @@ public void Handle(DownloadsProcessedEvent message)
                 _seriesWithImportedFiles.Clear();
             }
 
-            foreach (var series in allSeries)
+            foreach (var author in allSeries)
             {
                 foreach (var extraFileManager in _extraFileManagers)
                 {
-                    extraFileManager.CreateAfterEpisodesImported(series);
+                    extraFileManager.CreateAfterEpisodesImported(author);
                 }
             }
         }
 
-        private List<EpisodeFile> GetEpisodeFiles(int seriesId)
+        private List<EditionFile> GetEditionFiles(int seriesId)
         {
-            var episodeFiles = _mediaFileService.GetFilesBySeries(seriesId);
-            var episodes = _episodeService.GetEpisodeBySeries(seriesId);
+            var editionFiles = _mediaFileService.GetFilesBySeries(seriesId);
+            var editions = _episodeService.GetEpisodeBySeries(seriesId);
 
-            foreach (var episodeFile in episodeFiles)
+            foreach (var editionFile in editionFiles)
             {
-                var localEpisodeFile = episodeFile;
-                episodeFile.Episodes = new List<Episode>(episodes.Where(e => e.EpisodeFileId == localEpisodeFile.Id));
+                var localEditionFile = editionFile;
+                editionFile.Editions = new List<Edition>(editions.Where(e => e.EditionFileId == localEditionFile.Id));
             }
 
-            return episodeFiles;
+            return editionFiles;
         }
     }
 }
diff --git a/src/NzbDrone.Core/Extras/Files/ExtraFile.cs b/src/NzbDrone.Core/Extras/Files/ExtraFile.cs
index ee12a9c30..9b636e982 100644
--- a/src/NzbDrone.Core/Extras/Files/ExtraFile.cs
+++ b/src/NzbDrone.Core/Extras/Files/ExtraFile.cs
@@ -6,7 +6,7 @@ namespace NzbDrone.Core.Extras.Files
     public abstract class ExtraFile : ModelBase
     {
         public int SeriesId { get; set; }
-        public int? EpisodeFileId { get; set; }
+        public int? EditionFileId { get; set; }
         public int? SeasonNumber { get; set; }
         public string RelativePath { get; set; }
         public DateTime Added { get; set; }
diff --git a/src/NzbDrone.Core/Extras/Files/ExtraFileManager.cs b/src/NzbDrone.Core/Extras/Files/ExtraFileManager.cs
index 1b9179689..454d69c9d 100644
--- a/src/NzbDrone.Core/Extras/Files/ExtraFileManager.cs
+++ b/src/NzbDrone.Core/Extras/Files/ExtraFileManager.cs
@@ -15,14 +15,14 @@ namespace NzbDrone.Core.Extras.Files
     public interface IManageExtraFiles
     {
         int Order { get; }
-        IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series);
-        IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List<EpisodeFile> episodeFiles);
-        IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series);
-        IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile);
-        IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, string seriesFolder, string seasonFolder);
-        IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<EpisodeFile> episodeFiles);
-        bool CanImportFile(LocalEpisode localEpisode, EpisodeFile episodeFile, string path, string extension, bool readOnly);
-        IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, List<string> files, bool isReadOnly);
+        IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Author author);
+        IEnumerable<ExtraFile> CreateAfterSeriesScan(Author author, List<EditionFile> editionFiles);
+        IEnumerable<ExtraFile> CreateAfterEpisodesImported(Author author);
+        IEnumerable<ExtraFile> CreateAfterEpisodeImport(Author author, EditionFile editionFile);
+        IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Author author, string seriesFolder, string seasonFolder);
+        IEnumerable<ExtraFile> MoveFilesAfterRename(Author author, List<EditionFile> editionFiles);
+        bool CanImportFile(LocalEpisode localEpisode, EditionFile editionFile, string path, string extension, bool readOnly);
+        IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EditionFile editionFile, List<string> files, bool isReadOnly);
     }
 
     public abstract class ExtraFileManager<TExtraFile> : IManageExtraFiles
@@ -45,19 +45,19 @@ public ExtraFileManager(IConfigService configService,
         }
 
         public abstract int Order { get; }
-        public abstract IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series);
-        public abstract IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List<EpisodeFile> episodeFiles);
-        public abstract IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series);
-        public abstract IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile);
-        public abstract IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, string seriesFolder, string seasonFolder);
-        public abstract IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<EpisodeFile> episodeFiles);
-        public abstract bool CanImportFile(LocalEpisode localEpisode, EpisodeFile episodeFile, string path, string extension, bool readOnly);
-        public abstract IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, List<string> files, bool isReadOnly);
-
-        protected TExtraFile ImportFile(Series series, EpisodeFile episodeFile, string path, bool readOnly, string extension, string fileNameSuffix = null)
+        public abstract IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Author author);
+        public abstract IEnumerable<ExtraFile> CreateAfterSeriesScan(Author author, List<EditionFile> editionFiles);
+        public abstract IEnumerable<ExtraFile> CreateAfterEpisodesImported(Author author);
+        public abstract IEnumerable<ExtraFile> CreateAfterEpisodeImport(Author author, EditionFile editionFile);
+        public abstract IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Author author, string seriesFolder, string seasonFolder);
+        public abstract IEnumerable<ExtraFile> MoveFilesAfterRename(Author author, List<EditionFile> editionFiles);
+        public abstract bool CanImportFile(LocalEpisode localEpisode, EditionFile editionFile, string path, string extension, bool readOnly);
+        public abstract IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EditionFile editionFile, List<string> files, bool isReadOnly);
+
+        protected TExtraFile ImportFile(Author author, EditionFile editionFile, string path, bool readOnly, string extension, string fileNameSuffix = null)
         {
-            var newFolder = Path.GetDirectoryName(Path.Combine(series.Path, episodeFile.RelativePath));
-            var filenameBuilder = new StringBuilder(Path.GetFileNameWithoutExtension(episodeFile.RelativePath));
+            var newFolder = Path.GetDirectoryName(Path.Combine(author.Path, editionFile.RelativePath));
+            var filenameBuilder = new StringBuilder(Path.GetFileNameWithoutExtension(editionFile.RelativePath));
 
             if (fileNameSuffix.IsNotNullOrWhiteSpace())
             {
@@ -78,20 +78,20 @@ protected TExtraFile ImportFile(Series series, EpisodeFile episodeFile, string p
 
             return new TExtraFile
             {
-                SeriesId = series.Id,
-                SeasonNumber = episodeFile.SeasonNumber,
-                EpisodeFileId = episodeFile.Id,
-                RelativePath = series.Path.GetRelativePath(newFileName),
+                SeriesId = author.Id,
+                SeasonNumber = editionFile.SeasonNumber,
+                EditionFileId = editionFile.Id,
+                RelativePath = author.Path.GetRelativePath(newFileName),
                 Extension = extension
             };
         }
 
-        protected TExtraFile MoveFile(Series series, EpisodeFile episodeFile, TExtraFile extraFile, string fileNameSuffix = null)
+        protected TExtraFile MoveFile(Author author, EditionFile editionFile, TExtraFile extraFile, string fileNameSuffix = null)
         {
             _logger.Trace("Renaming extra file: {0}", extraFile);
 
-            var newFolder = Path.GetDirectoryName(Path.Combine(series.Path, episodeFile.RelativePath));
-            var filenameBuilder = new StringBuilder(Path.GetFileNameWithoutExtension(episodeFile.RelativePath));
+            var newFolder = Path.GetDirectoryName(Path.Combine(author.Path, editionFile.RelativePath));
+            var filenameBuilder = new StringBuilder(Path.GetFileNameWithoutExtension(editionFile.RelativePath));
 
             if (fileNameSuffix.IsNotNullOrWhiteSpace())
             {
@@ -100,7 +100,7 @@ protected TExtraFile MoveFile(Series series, EpisodeFile episodeFile, TExtraFile
 
             filenameBuilder.Append(extraFile.Extension);
 
-            var existingFileName = Path.Combine(series.Path, extraFile.RelativePath);
+            var existingFileName = Path.Combine(author.Path, extraFile.RelativePath);
             var newFileName = Path.Combine(newFolder, filenameBuilder.ToString());
 
             if (newFileName.PathNotEquals(existingFileName))
@@ -110,7 +110,7 @@ protected TExtraFile MoveFile(Series series, EpisodeFile episodeFile, TExtraFile
                     _logger.Trace("Renaming extra file: {0} to {1}", extraFile, newFileName);
 
                     _diskProvider.MoveFile(existingFileName, newFileName);
-                    extraFile.RelativePath = series.Path.GetRelativePath(newFileName);
+                    extraFile.RelativePath = author.Path.GetRelativePath(newFileName);
 
                     _logger.Trace("Renamed extra file from: {0}", extraFile);
 
diff --git a/src/NzbDrone.Core/Extras/Files/ExtraFileRepository.cs b/src/NzbDrone.Core/Extras/Files/ExtraFileRepository.cs
index 4b7291b03..c29cb926c 100644
--- a/src/NzbDrone.Core/Extras/Files/ExtraFileRepository.cs
+++ b/src/NzbDrone.Core/Extras/Files/ExtraFileRepository.cs
@@ -10,10 +10,10 @@ public interface IExtraFileRepository<TExtraFile> : IBasicRepository<TExtraFile>
     {
         void DeleteForSeriesIds(List<int> seriesIds);
         void DeleteForSeason(int seriesId, int seasonNumber);
-        void DeleteForEpisodeFile(int episodeFileId);
+        void DeleteForEditionFile(int editionFileId);
         List<TExtraFile> GetFilesBySeries(int seriesId);
         List<TExtraFile> GetFilesBySeason(int seriesId, int seasonNumber);
-        List<TExtraFile> GetFilesByEpisodeFile(int episodeFileId);
+        List<TExtraFile> GetFilesByEditionFile(int editionFileId);
         TExtraFile FindByPath(int seriesId, string path);
     }
 
@@ -35,9 +35,9 @@ public void DeleteForSeason(int seriesId, int seasonNumber)
             Delete(c => c.SeriesId == seriesId && c.SeasonNumber == seasonNumber);
         }
 
-        public void DeleteForEpisodeFile(int episodeFileId)
+        public void DeleteForEditionFile(int editionFileId)
         {
-            Delete(c => c.EpisodeFileId == episodeFileId);
+            Delete(c => c.EditionFileId == editionFileId);
         }
 
         public List<TExtraFile> GetFilesBySeries(int seriesId)
@@ -50,9 +50,9 @@ public List<TExtraFile> GetFilesBySeason(int seriesId, int seasonNumber)
             return Query(c => c.SeriesId == seriesId && c.SeasonNumber == seasonNumber);
         }
 
-        public List<TExtraFile> GetFilesByEpisodeFile(int episodeFileId)
+        public List<TExtraFile> GetFilesByEditionFile(int editionFileId)
         {
-            return Query(c => c.EpisodeFileId == episodeFileId);
+            return Query(c => c.EditionFileId == editionFileId);
         }
 
         public TExtraFile FindByPath(int seriesId, string path)
diff --git a/src/NzbDrone.Core/Extras/Files/ExtraFileService.cs b/src/NzbDrone.Core/Extras/Files/ExtraFileService.cs
index 376d52840..3c7f1d4ef 100644
--- a/src/NzbDrone.Core/Extras/Files/ExtraFileService.cs
+++ b/src/NzbDrone.Core/Extras/Files/ExtraFileService.cs
@@ -17,7 +17,7 @@ public interface IExtraFileService<TExtraFile>
         where TExtraFile : ExtraFile, new()
     {
         List<TExtraFile> GetFilesBySeries(int seriesId);
-        List<TExtraFile> GetFilesByEpisodeFile(int episodeFileId);
+        List<TExtraFile> GetFilesByEditionFile(int editionFileId);
         TExtraFile FindByPath(int seriesId, string path);
         void Upsert(TExtraFile extraFile);
         void Upsert(List<TExtraFile> extraFiles);
@@ -27,7 +27,7 @@ public interface IExtraFileService<TExtraFile>
 
     public abstract class ExtraFileService<TExtraFile> : IExtraFileService<TExtraFile>,
                                                          IHandleAsync<SeriesDeletedEvent>,
-                                                         IHandle<EpisodeFileDeletedEvent>
+                                                         IHandle<EditionFileDeletedEvent>
         where TExtraFile : ExtraFile, new()
     {
         private readonly IExtraFileRepository<TExtraFile> _repository;
@@ -54,9 +54,9 @@ public List<TExtraFile> GetFilesBySeries(int seriesId)
             return _repository.GetFilesBySeries(seriesId);
         }
 
-        public List<TExtraFile> GetFilesByEpisodeFile(int episodeFileId)
+        public List<TExtraFile> GetFilesByEditionFile(int editionFileId)
         {
-            return _repository.GetFilesByEpisodeFile(episodeFileId);
+            return _repository.GetFilesByEditionFile(editionFileId);
         }
 
         public TExtraFile FindByPath(int seriesId, string path)
@@ -97,37 +97,37 @@ public void DeleteMany(IEnumerable<int> ids)
 
         public void HandleAsync(SeriesDeletedEvent message)
         {
-            _logger.Debug("Deleting Extra from database for series: {0}", string.Join(',', message.Series));
-            _repository.DeleteForSeriesIds(message.Series.Select(m => m.Id).ToList());
+            _logger.Debug("Deleting Extra from database for author: {0}", string.Join(',', message.Author));
+            _repository.DeleteForSeriesIds(message.Author.Select(m => m.Id).ToList());
         }
 
-        public void Handle(EpisodeFileDeletedEvent message)
+        public void Handle(EditionFileDeletedEvent message)
         {
-            var episodeFile = message.EpisodeFile;
+            var editionFile = message.EditionFile;
 
             if (message.Reason == DeleteMediaFileReason.NoLinkedEpisodes)
             {
-                _logger.Debug("Removing episode file from DB as part of cleanup routine, not deleting extra files from disk.");
+                _logger.Debug("Removing edition file from DB as part of cleanup routine, not deleting extra files from disk.");
             }
             else
             {
-                var series = _seriesService.GetSeries(message.EpisodeFile.SeriesId);
+                var author = _seriesService.GetSeries(message.EditionFile.SeriesId);
 
-                foreach (var extra in _repository.GetFilesByEpisodeFile(episodeFile.Id))
+                foreach (var extra in _repository.GetFilesByEditionFile(editionFile.Id))
                 {
-                    var path = Path.Combine(series.Path, extra.RelativePath);
+                    var path = Path.Combine(author.Path, extra.RelativePath);
 
                     if (_diskProvider.FileExists(path))
                     {
                         // Send to the recycling bin so they can be recovered if necessary
-                        var subfolder = _diskProvider.GetParentFolder(series.Path).GetRelativePath(_diskProvider.GetParentFolder(path));
+                        var subfolder = _diskProvider.GetParentFolder(author.Path).GetRelativePath(_diskProvider.GetParentFolder(path));
                         _recycleBinProvider.DeleteFile(path, subfolder);
                     }
                 }
             }
 
-            _logger.Debug("Deleting Extra from database for episode file: {0}", episodeFile);
-            _repository.DeleteForEpisodeFile(episodeFile.Id);
+            _logger.Debug("Deleting Extra from database for edition file: {0}", editionFile);
+            _repository.DeleteForEditionFile(editionFile.Id);
         }
     }
 }
diff --git a/src/NzbDrone.Core/Extras/IImportExistingExtraFiles.cs b/src/NzbDrone.Core/Extras/IImportExistingExtraFiles.cs
index 97b85d80f..5c09af0b6 100644
--- a/src/NzbDrone.Core/Extras/IImportExistingExtraFiles.cs
+++ b/src/NzbDrone.Core/Extras/IImportExistingExtraFiles.cs
@@ -7,6 +7,6 @@ namespace NzbDrone.Core.Extras
     public interface IImportExistingExtraFiles
     {
         int Order { get; }
-        IEnumerable<ExtraFile> ProcessFiles(Series series, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename);
+        IEnumerable<ExtraFile> ProcessFiles(Author author, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename);
     }
 }
diff --git a/src/NzbDrone.Core/Extras/ImportExistingExtraFilesBase.cs b/src/NzbDrone.Core/Extras/ImportExistingExtraFilesBase.cs
index fdfc7e67e..a6f66c7e0 100644
--- a/src/NzbDrone.Core/Extras/ImportExistingExtraFilesBase.cs
+++ b/src/NzbDrone.Core/Extras/ImportExistingExtraFilesBase.cs
@@ -19,30 +19,30 @@ public ImportExistingExtraFilesBase(IExtraFileService<TExtraFile> extraFileServi
         }
 
         public abstract int Order { get; }
-        public abstract IEnumerable<ExtraFile> ProcessFiles(Series series, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename);
+        public abstract IEnumerable<ExtraFile> ProcessFiles(Author author, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename);
 
-        public virtual ImportExistingExtraFileFilterResult<TExtraFile> FilterAndClean(Series series, List<string> filesOnDisk, List<string> importedFiles, bool keepExistingEntries)
+        public virtual ImportExistingExtraFileFilterResult<TExtraFile> FilterAndClean(Author author, List<string> filesOnDisk, List<string> importedFiles, bool keepExistingEntries)
         {
-            var seriesFiles = _extraFileService.GetFilesBySeries(series.Id);
+            var seriesFiles = _extraFileService.GetFilesBySeries(author.Id);
 
             if (keepExistingEntries)
             {
-                var incompleteImports = seriesFiles.IntersectBy(f => Path.Combine(series.Path, f.RelativePath), filesOnDisk, i => i, PathEqualityComparer.Instance).Select(f => f.Id);
+                var incompleteImports = seriesFiles.IntersectBy(f => Path.Combine(author.Path, f.RelativePath), filesOnDisk, i => i, PathEqualityComparer.Instance).Select(f => f.Id);
 
                 _extraFileService.DeleteMany(incompleteImports);
 
-                return Filter(series, filesOnDisk, importedFiles, new List<TExtraFile>());
+                return Filter(author, filesOnDisk, importedFiles, new List<TExtraFile>());
             }
 
-            Clean(series, filesOnDisk, importedFiles, seriesFiles);
+            Clean(author, filesOnDisk, importedFiles, seriesFiles);
 
-            return Filter(series, filesOnDisk, importedFiles, seriesFiles);
+            return Filter(author, filesOnDisk, importedFiles, seriesFiles);
         }
 
-        private ImportExistingExtraFileFilterResult<TExtraFile> Filter(Series series, List<string> filesOnDisk, List<string> importedFiles, List<TExtraFile> seriesFiles)
+        private ImportExistingExtraFileFilterResult<TExtraFile> Filter(Author author, List<string> filesOnDisk, List<string> importedFiles, List<TExtraFile> seriesFiles)
         {
-            var previouslyImported = seriesFiles.IntersectBy(s => Path.Combine(series.Path, s.RelativePath), filesOnDisk, f => f, PathEqualityComparer.Instance).ToList();
-            var filteredFiles = filesOnDisk.Except(previouslyImported.Select(f => Path.Combine(series.Path, f.RelativePath)).ToList(), PathEqualityComparer.Instance)
+            var previouslyImported = seriesFiles.IntersectBy(s => Path.Combine(author.Path, s.RelativePath), filesOnDisk, f => f, PathEqualityComparer.Instance).ToList();
+            var filteredFiles = filesOnDisk.Except(previouslyImported.Select(f => Path.Combine(author.Path, f.RelativePath)).ToList(), PathEqualityComparer.Instance)
                                            .Except(importedFiles, PathEqualityComparer.Instance)
                                            .ToList();
 
@@ -51,12 +51,12 @@ private ImportExistingExtraFileFilterResult<TExtraFile> Filter(Series series, Li
             return new ImportExistingExtraFileFilterResult<TExtraFile>(previouslyImported, filteredFiles);
         }
 
-        private void Clean(Series series, List<string> filesOnDisk, List<string> importedFiles, List<TExtraFile> seriesFiles)
+        private void Clean(Author author, List<string> filesOnDisk, List<string> importedFiles, List<TExtraFile> seriesFiles)
         {
-            var alreadyImportedFileIds = seriesFiles.IntersectBy(f => Path.Combine(series.Path, f.RelativePath), importedFiles, i => i, PathEqualityComparer.Instance)
+            var alreadyImportedFileIds = seriesFiles.IntersectBy(f => Path.Combine(author.Path, f.RelativePath), importedFiles, i => i, PathEqualityComparer.Instance)
                 .Select(f => f.Id);
 
-            var deletedFiles = seriesFiles.ExceptBy(f => Path.Combine(series.Path, f.RelativePath), filesOnDisk, i => i, PathEqualityComparer.Instance)
+            var deletedFiles = seriesFiles.ExceptBy(f => Path.Combine(author.Path, f.RelativePath), filesOnDisk, i => i, PathEqualityComparer.Instance)
                 .Select(f => f.Id);
 
             _extraFileService.DeleteMany(alreadyImportedFileIds);
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Plex/PlexMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Plex/PlexMetadata.cs
index 62adc4be0..0503ba40d 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Plex/PlexMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Plex/PlexMetadata.cs
@@ -22,7 +22,7 @@ public PlexMetadata(IEpisodeService episodeService, IMediaFileService mediaFileS
 
         public override string Name => "Plex";
 
-        public override MetadataFile FindMetadataFile(Series series, string path)
+        public override MetadataFile FindMetadataFile(Author author, string path)
         {
             var filename = Path.GetFileName(path);
 
@@ -31,15 +31,15 @@ public override MetadataFile FindMetadataFile(Series series, string path)
                 return null;
             }
 
-            var relativePath = series.Path.GetRelativePath(path);
+            var relativePath = author.Path.GetRelativePath(path);
 
             if (relativePath == ".plexmatch")
             {
                 return new MetadataFile
                 {
-                    SeriesId = series.Id,
+                    SeriesId = author.Id,
                     Consumer = GetType().Name,
-                    RelativePath = series.Path.GetRelativePath(path),
+                    RelativePath = author.Path.GetRelativePath(path),
                     Type = MetadataType.SeriesMetadata
                 };
             }
@@ -47,7 +47,7 @@ public override MetadataFile FindMetadataFile(Series series, string path)
             return null;
         }
 
-        public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason)
+        public override MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason)
         {
             if (!Settings.SeriesPlexMatchFile)
             {
@@ -56,49 +56,49 @@ public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataR
 
             var content = new StringBuilder();
 
-            content.AppendLine($"Title: {series.Title}");
-            content.AppendLine($"Year: {series.Year}");
-            content.AppendLine($"TvdbId: {series.TvdbId}");
-            content.AppendLine($"ImdbId: {series.ImdbId}");
+            content.AppendLine($"Title: {author.Title}");
+            content.AppendLine($"Year: {author.Year}");
+            content.AppendLine($"GoodreadsId: {author.GoodreadsId}");
+            content.AppendLine($"ImdbId: {author.ImdbId}");
 
             if (Settings.EpisodeMappings)
             {
-                var episodes = _episodeService.GetEpisodeBySeries(series.Id);
-                var episodeFiles = _mediaFileService.GetFilesBySeries(series.Id);
+                var editions = _episodeService.GetEpisodeBySeries(author.Id);
+                var editionFiles = _mediaFileService.GetFilesBySeries(author.Id);
 
-                foreach (var episodeFile in episodeFiles)
+                foreach (var editionFile in editionFiles)
                 {
-                    var episodesInFile = episodes.Where(e => e.EpisodeFileId == episodeFile.Id);
-                    var episodeFormat = $"S{episodeFile.SeasonNumber:00}{string.Join("-", episodesInFile.Select(e => $"E{e.EpisodeNumber:00}"))}";
+                    var episodesInFile = editions.Where(e => e.EditionFileId == editionFile.Id);
+                    var episodeFormat = $"S{editionFile.SeasonNumber:00}{string.Join("-", episodesInFile.Select(e => $"E{e.EpisodeNumber:00}"))}";
 
-                    if (episodeFile.SeasonNumber == 0)
+                    if (editionFile.SeasonNumber == 0)
                     {
                         episodeFormat = $"SP{episodesInFile.First():00}";
                     }
 
-                    content.AppendLine($"Episode: {episodeFormat}: {episodeFile.RelativePath}");
+                    content.AppendLine($"Edition: {episodeFormat}: {editionFile.RelativePath}");
                 }
             }
 
             return new MetadataFileResult(".plexmatch", content.ToString());
         }
 
-        public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile)
+        public override MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile)
         {
             return null;
         }
 
-        public override List<ImageFileResult> SeriesImages(Series series)
+        public override List<ImageFileResult> SeriesImages(Author author)
         {
             return new List<ImageFileResult>();
         }
 
-        public override List<ImageFileResult> SeasonImages(Series series, Season season)
+        public override List<ImageFileResult> SeasonImages(Author author, Book book)
         {
             return new List<ImageFileResult>();
         }
 
-        public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile)
+        public override List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile)
         {
             return new List<ImageFileResult>();
         }
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
index ee98606a9..99e01cf0a 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
@@ -31,30 +31,30 @@ public RoksboxMetadata(IMapCoversToLocal mediaCoverService,
             _logger = logger;
         }
 
-        private static readonly Regex SeasonImagesRegex = new Regex(@"^(season (?<season>\d+))|(?<specials>specials)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
+        private static readonly Regex SeasonImagesRegex = new Regex(@"^(book (?<book>\d+))|(?<specials>specials)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
         private static List<string> ValidCertification = new List<string> { "G", "NC-17", "PG", "PG-13", "R", "UR", "UNRATED", "NR", "TV-Y", "TV-Y7", "TV-Y7-FV", "TV-G", "TV-PG", "TV-14", "TV-MA" };
 
         public override string Name => "Roksbox";
 
-        public override string GetFilenameAfterMove(Series series, EpisodeFile episodeFile, MetadataFile metadataFile)
+        public override string GetFilenameAfterMove(Author author, EditionFile editionFile, MetadataFile metadataFile)
         {
-            var episodeFilePath = Path.Combine(series.Path, episodeFile.RelativePath);
+            var editionFilePath = Path.Combine(author.Path, editionFile.RelativePath);
 
             if (metadataFile.Type == MetadataType.EpisodeImage)
             {
-                return GetEpisodeImageFilename(episodeFilePath);
+                return GetEpisodeImageFilename(editionFilePath);
             }
 
             if (metadataFile.Type == MetadataType.EpisodeMetadata)
             {
-                return GetEpisodeMetadataFilename(episodeFilePath);
+                return GetEpisodeMetadataFilename(editionFilePath);
             }
 
-            _logger.Debug("Unknown episode file metadata: {0}", metadataFile.RelativePath);
-            return Path.Combine(series.Path, metadataFile.RelativePath);
+            _logger.Debug("Unknown edition file metadata: {0}", metadataFile.RelativePath);
+            return Path.Combine(author.Path, metadataFile.RelativePath);
         }
 
-        public override MetadataFile FindMetadataFile(Series series, string path)
+        public override MetadataFile FindMetadataFile(Author author, string path)
         {
             var filename = Path.GetFileName(path);
 
@@ -67,12 +67,12 @@ public override MetadataFile FindMetadataFile(Series series, string path)
 
             var metadata = new MetadataFile
                            {
-                               SeriesId = series.Id,
+                               SeriesId = author.Id,
                                Consumer = GetType().Name,
-                               RelativePath = series.Path.GetRelativePath(path)
+                               RelativePath = author.Path.GetRelativePath(path)
                            };
 
-            // Series and season images are both named folder.jpg, only season ones sit in season folders
+            // Author and book images are both named folder.jpg, only book ones sit in book folders
             if (Path.GetFileNameWithoutExtension(filename).Equals(parentdir.Name, StringComparison.InvariantCultureIgnoreCase))
             {
                 var seasonMatch = SeasonImagesRegex.Match(parentdir.Name);
@@ -87,7 +87,7 @@ public override MetadataFile FindMetadataFile(Series series, string path)
                     }
                     else
                     {
-                        metadata.SeasonNumber = Convert.ToInt32(seasonMatch.Groups["season"].Value);
+                        metadata.SeasonNumber = Convert.ToInt32(seasonMatch.Groups["book"].Value);
                     }
 
                     return metadata;
@@ -124,23 +124,23 @@ public override MetadataFile FindMetadataFile(Series series, string path)
             return null;
         }
 
-        public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason)
+        public override MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason)
         {
-            // Series metadata is not supported
+            // Author metadata is not supported
             return null;
         }
 
-        public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile)
+        public override MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeMetadata)
             {
                 return null;
             }
 
-            _logger.Debug("Generating Episode Metadata for: {0}", episodeFile.RelativePath);
+            _logger.Debug("Generating Edition Metadata for: {0}", editionFile.RelativePath);
 
             var xmlResult = string.Empty;
-            foreach (var episode in episodeFile.Episodes.Value)
+            foreach (var edition in editionFile.Editions.Value)
             {
                 var sb = new StringBuilder();
                 var xws = new XmlWriterSettings();
@@ -152,18 +152,18 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                     var doc = new XDocument();
 
                     var details = new XElement("video");
-                    details.Add(new XElement("title", string.Format("{0} - {1}x{2} - {3}", series.Title, episode.SeasonNumber, episode.EpisodeNumber, episode.Title)));
-                    details.Add(new XElement("year", episode.AirDate));
-                    details.Add(new XElement("genre", string.Join(" / ", series.Genres)));
-                    var actors = string.Join(" , ", series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0, Math.Min(3, series.Actors.Count)));
+                    details.Add(new XElement("title", string.Format("{0} - {1}x{2} - {3}", author.Title, edition.SeasonNumber, edition.EpisodeNumber, edition.Title)));
+                    details.Add(new XElement("year", edition.PublishDate));
+                    details.Add(new XElement("genre", string.Join(" / ", author.Genres)));
+                    var actors = string.Join(" , ", author.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0, Math.Min(3, author.Actors.Count)));
                     details.Add(new XElement("actors", actors));
-                    details.Add(new XElement("description", episode.Overview));
-                    details.Add(new XElement("length", series.Runtime));
+                    details.Add(new XElement("description", edition.Overview));
+                    details.Add(new XElement("length", author.Runtime));
 
-                    if (series.Certification.IsNotNullOrWhiteSpace() &&
-                        ValidCertification.Contains(series.Certification.ToUpperInvariant()))
+                    if (author.Certification.IsNotNullOrWhiteSpace() &&
+                        ValidCertification.Contains(author.Certification.ToUpperInvariant()))
                     {
-                        details.Add(new XElement("mpaa", series.Certification.ToUpperInvariant()));
+                        details.Add(new XElement("mpaa", author.Certification.ToUpperInvariant()));
                     }
                     else
                     {
@@ -178,98 +178,98 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                 }
             }
 
-            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath), xmlResult.Trim(Environment.NewLine.ToCharArray()));
+            return new MetadataFileResult(GetEpisodeMetadataFilename(editionFile.RelativePath), xmlResult.Trim(Environment.NewLine.ToCharArray()));
         }
 
-        public override List<ImageFileResult> SeriesImages(Series series)
+        public override List<ImageFileResult> SeriesImages(Author author)
         {
             if (!Settings.SeriesImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault();
+            var image = author.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? author.Images.FirstOrDefault();
             if (image == null)
             {
-                _logger.Trace("Failed to find suitable Series image for series {0}.", series.Title);
+                _logger.Trace("Failed to find suitable Author image for author {0}.", author.Title);
                 return new List<ImageFileResult>();
             }
 
-            var source = _mediaCoverService.GetCoverPath(series.Id, image.CoverType);
-            var destination = Path.GetFileName(series.Path) + Path.GetExtension(source);
+            var source = _mediaCoverService.GetCoverPath(author.Id, image.CoverType);
+            var destination = Path.GetFileName(author.Path) + Path.GetExtension(source);
 
             return new List<ImageFileResult> { new ImageFileResult(destination, source) };
         }
 
-        public override List<ImageFileResult> SeasonImages(Series series, Season season)
+        public override List<ImageFileResult> SeasonImages(Author author, Book book)
         {
             if (!Settings.SeasonImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            var seasonFolders = GetSeasonFolders(series);
+            var seasonFolders = GetSeasonFolders(author);
 
-            if (!seasonFolders.TryGetValue(season.SeasonNumber, out var seasonFolder))
+            if (!seasonFolders.TryGetValue(book.SeasonNumber, out var seasonFolder))
             {
-                _logger.Trace("Failed to find season folder for series {0}, season {1}.", series.Title, season.SeasonNumber);
+                _logger.Trace("Failed to find book folder for author {0}, book {1}.", author.Title, book.SeasonNumber);
                 return new List<ImageFileResult>();
             }
 
-            // Roksbox only supports one season image, so first of all try for poster otherwise just use whatever is first in the collection
-            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault();
+            // Roksbox only supports one book image, so first of all try for poster otherwise just use whatever is first in the collection
+            var image = book.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? book.Images.FirstOrDefault();
             if (image == null)
             {
-                _logger.Trace("Failed to find suitable season image for series {0}, season {1}.", series.Title, season.SeasonNumber);
+                _logger.Trace("Failed to find suitable book image for author {0}, book {1}.", author.Title, book.SeasonNumber);
                 return new List<ImageFileResult>();
             }
 
             var filename = Path.GetFileName(seasonFolder) + ".jpg";
-            var path = series.Path.GetRelativePath(Path.Combine(series.Path, seasonFolder, filename));
+            var path = author.Path.GetRelativePath(Path.Combine(author.Path, seasonFolder, filename));
 
             return new List<ImageFileResult> { new ImageFileResult(path, image.RemoteUrl) };
         }
 
-        public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile)
+        public override List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
+            var screenshot = editionFile.Editions.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
 
             if (screenshot == null)
             {
-                _logger.Trace("Episode screenshot not available");
+                _logger.Trace("Edition screenshot not available");
                 return new List<ImageFileResult>();
             }
 
-            return new List<ImageFileResult> { new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath), screenshot.RemoteUrl) };
+            return new List<ImageFileResult> { new ImageFileResult(GetEpisodeImageFilename(editionFile.RelativePath), screenshot.RemoteUrl) };
         }
 
-        private string GetEpisodeMetadataFilename(string episodeFilePath)
+        private string GetEpisodeMetadataFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "xml");
+            return Path.ChangeExtension(editionFilePath, "xml");
         }
 
-        private string GetEpisodeImageFilename(string episodeFilePath)
+        private string GetEpisodeImageFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "jpg");
+            return Path.ChangeExtension(editionFilePath, "jpg");
         }
 
-        private Dictionary<int, string> GetSeasonFolders(Series series)
+        private Dictionary<int, string> GetSeasonFolders(Author author)
         {
             var seasonFolderMap = new Dictionary<int, string>();
 
-            foreach (var folder in _diskProvider.GetDirectories(series.Path))
+            foreach (var folder in _diskProvider.GetDirectories(author.Path))
             {
                 var directoryinfo = new DirectoryInfo(folder);
                 var seasonMatch = SeasonImagesRegex.Match(directoryinfo.Name);
 
                 if (seasonMatch.Success)
                 {
-                    var seasonNumber = seasonMatch.Groups["season"].Value;
+                    var seasonNumber = seasonMatch.Groups["book"].Value;
 
                     if (seasonNumber.Contains("specials"))
                     {
@@ -283,13 +283,13 @@ private Dictionary<int, string> GetSeasonFolders(Series series)
                         }
                         else
                         {
-                            _logger.Debug("Failed to parse season number from {0} for series {1}.", folder, series.Title);
+                            _logger.Debug("Failed to parse book number from {0} for author {1}.", folder, author.Title);
                         }
                     }
                 }
                 else
                 {
-                    _logger.Debug("Rejecting folder {0} for series {1}.", Path.GetDirectoryName(folder), series.Title);
+                    _logger.Debug("Rejecting folder {0} for author {1}.", Path.GetDirectoryName(folder), author.Title);
                 }
             }
 
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadataSettings.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadataSettings.cs
index f612a1a1c..d6e2eefde 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadataSettings.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadataSettings.cs
@@ -21,16 +21,16 @@ public RoksboxMetadataSettings()
             EpisodeImages = true;
         }
 
-        [FieldDefinition(0, Label = "MetadataSettingsEpisodeMetadata", Type = FieldType.Checkbox, Section = MetadataSectionType.Metadata, HelpText = "Season##\\filename.xml")]
+        [FieldDefinition(0, Label = "MetadataSettingsEpisodeMetadata", Type = FieldType.Checkbox, Section = MetadataSectionType.Metadata, HelpText = "Book##\\filename.xml")]
         public bool EpisodeMetadata { get; set; }
 
-        [FieldDefinition(1, Label = "MetadataSettingsSeriesImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Series Title.jpg")]
+        [FieldDefinition(1, Label = "MetadataSettingsSeriesImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Author Title.jpg")]
         public bool SeriesImages { get; set; }
 
-        [FieldDefinition(2, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Season ##.jpg")]
+        [FieldDefinition(2, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Book ##.jpg")]
         public bool SeasonImages { get; set; }
 
-        [FieldDefinition(3, Label = "MetadataSettingsEpisodeImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Season##\\filename.jpg")]
+        [FieldDefinition(3, Label = "MetadataSettingsEpisodeImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Book##\\filename.jpg")]
         public bool EpisodeImages { get; set; }
 
         public bool IsValid => true;
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
index 429bb808b..e53650e61 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
@@ -31,29 +31,29 @@ public WdtvMetadata(IMapCoversToLocal mediaCoverService,
             _logger = logger;
         }
 
-        private static readonly Regex SeasonImagesRegex = new Regex(@"^(season (?<season>\d+))|(?<specials>specials)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
+        private static readonly Regex SeasonImagesRegex = new Regex(@"^(book (?<book>\d+))|(?<specials>specials)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
 
         public override string Name => "WDTV";
 
-        public override string GetFilenameAfterMove(Series series, EpisodeFile episodeFile, MetadataFile metadataFile)
+        public override string GetFilenameAfterMove(Author author, EditionFile editionFile, MetadataFile metadataFile)
         {
-            var episodeFilePath = Path.Combine(series.Path, episodeFile.RelativePath);
+            var editionFilePath = Path.Combine(author.Path, editionFile.RelativePath);
 
             if (metadataFile.Type == MetadataType.EpisodeImage)
             {
-                return GetEpisodeImageFilename(episodeFilePath);
+                return GetEpisodeImageFilename(editionFilePath);
             }
 
             if (metadataFile.Type == MetadataType.EpisodeMetadata)
             {
-                return GetEpisodeMetadataFilename(episodeFilePath);
+                return GetEpisodeMetadataFilename(editionFilePath);
             }
 
-            _logger.Debug("Unknown episode file metadata: {0}", metadataFile.RelativePath);
-            return Path.Combine(series.Path, metadataFile.RelativePath);
+            _logger.Debug("Unknown edition file metadata: {0}", metadataFile.RelativePath);
+            return Path.Combine(author.Path, metadataFile.RelativePath);
         }
 
-        public override MetadataFile FindMetadataFile(Series series, string path)
+        public override MetadataFile FindMetadataFile(Author author, string path)
         {
             var filename = Path.GetFileName(path);
 
@@ -64,12 +64,12 @@ public override MetadataFile FindMetadataFile(Series series, string path)
 
             var metadata = new MetadataFile
                            {
-                               SeriesId = series.Id,
+                               SeriesId = author.Id,
                                Consumer = GetType().Name,
-                               RelativePath = series.Path.GetRelativePath(path)
+                               RelativePath = author.Path.GetRelativePath(path)
                            };
 
-            // Series and season images are both named folder.jpg, only season ones sit in season folders
+            // Author and book images are both named folder.jpg, only book ones sit in book folders
             if (Path.GetFileName(filename).Equals("folder.jpg", StringComparison.InvariantCultureIgnoreCase))
             {
                 var parentdir = Directory.GetParent(path);
@@ -84,7 +84,7 @@ public override MetadataFile FindMetadataFile(Series series, string path)
                     }
                     else
                     {
-                        metadata.SeasonNumber = Convert.ToInt32(seasonMatch.Groups["season"].Value);
+                        metadata.SeasonNumber = Convert.ToInt32(seasonMatch.Groups["book"].Value);
                     }
 
                     return metadata;
@@ -113,23 +113,23 @@ public override MetadataFile FindMetadataFile(Series series, string path)
             return null;
         }
 
-        public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason)
+        public override MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason)
         {
-            // Series metadata is not supported
+            // Author metadata is not supported
             return null;
         }
 
-        public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile)
+        public override MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeMetadata)
             {
                 return null;
             }
 
-            _logger.Debug("Generating Episode Metadata for: {0}", Path.Combine(series.Path, episodeFile.RelativePath));
+            _logger.Debug("Generating Edition Metadata for: {0}", Path.Combine(author.Path, editionFile.RelativePath));
 
             var xmlResult = string.Empty;
-            foreach (var episode in episodeFile.Episodes.Value)
+            foreach (var edition in editionFile.Editions.Value)
             {
                 var sb = new StringBuilder();
                 var xws = new XmlWriterSettings();
@@ -141,20 +141,20 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                     var doc = new XDocument();
 
                     var details = new XElement("details");
-                    details.Add(new XElement("id", series.Id));
-                    details.Add(new XElement("title", string.Format("{0} - {1}x{2:00} - {3}", series.Title, episode.SeasonNumber, episode.EpisodeNumber, episode.Title)));
-                    details.Add(new XElement("series_name", series.Title));
-                    details.Add(new XElement("episode_name", episode.Title));
-                    details.Add(new XElement("season_number", episode.SeasonNumber.ToString("00")));
-                    details.Add(new XElement("episode_number", episode.EpisodeNumber.ToString("00")));
-                    details.Add(new XElement("firstaired", episode.AirDate));
-                    details.Add(new XElement("genre", string.Join(" / ", series.Genres)));
-                    details.Add(new XElement("actor", string.Join(" / ", series.Actors.ConvertAll(c => c.Name + " - " + c.Character))));
-                    details.Add(new XElement("overview", episode.Overview));
+                    details.Add(new XElement("id", author.Id));
+                    details.Add(new XElement("title", string.Format("{0} - {1}x{2:00} - {3}", author.Title, edition.SeasonNumber, edition.EpisodeNumber, edition.Title)));
+                    details.Add(new XElement("series_name", author.Title));
+                    details.Add(new XElement("episode_name", edition.Title));
+                    details.Add(new XElement("season_number", edition.SeasonNumber.ToString("00")));
+                    details.Add(new XElement("episode_number", edition.EpisodeNumber.ToString("00")));
+                    details.Add(new XElement("firstaired", edition.PublishDate));
+                    details.Add(new XElement("genre", string.Join(" / ", author.Genres)));
+                    details.Add(new XElement("actor", string.Join(" / ", author.Actors.ConvertAll(c => c.Name + " - " + c.Character))));
+                    details.Add(new XElement("overview", edition.Overview));
 
                     // Todo: get guest stars, writer and director
-                    // details.Add(new XElement("credits", tvdbEpisode.Writer.FirstOrDefault()));
-                    // details.Add(new XElement("director", tvdbEpisode.Directors.FirstOrDefault()));
+                    // details.Add(new XElement("credits", goodreadsEpisode.Writer.FirstOrDefault()));
+                    // details.Add(new XElement("director", goodreadsEpisode.Directors.FirstOrDefault()));
 
                     doc.Add(details);
                     doc.Save(xw);
@@ -164,12 +164,12 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                 }
             }
 
-            var filename = GetEpisodeMetadataFilename(episodeFile.RelativePath);
+            var filename = GetEpisodeMetadataFilename(editionFile.RelativePath);
 
             return new MetadataFileResult(filename, xmlResult.Trim(Environment.NewLine.ToCharArray()));
         }
 
-        public override List<ImageFileResult> SeriesImages(Series series)
+        public override List<ImageFileResult> SeriesImages(Author author)
         {
             if (!Settings.SeriesImages)
             {
@@ -177,14 +177,14 @@ public override List<ImageFileResult> SeriesImages(Series series)
             }
 
             // Because we only support one image, attempt to get the Poster type, then if that fails grab the first
-            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault();
+            var image = author.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? author.Images.FirstOrDefault();
             if (image == null)
             {
-                _logger.Trace("Failed to find suitable Series image for series {0}.", series.Title);
+                _logger.Trace("Failed to find suitable Author image for author {0}.", author.Title);
                 return new List<ImageFileResult>();
             }
 
-            var source = _mediaCoverService.GetCoverPath(series.Id, image.CoverType);
+            var source = _mediaCoverService.GetCoverPath(author.Id, image.CoverType);
             var destination = "folder" + Path.GetExtension(source);
 
             return new List<ImageFileResult>
@@ -193,27 +193,27 @@ public override List<ImageFileResult> SeriesImages(Series series)
                    };
         }
 
-        public override List<ImageFileResult> SeasonImages(Series series, Season season)
+        public override List<ImageFileResult> SeasonImages(Author author, Book book)
         {
             if (!Settings.SeasonImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            var seasonFolders = GetSeasonFolders(series);
+            var seasonFolders = GetSeasonFolders(author);
 
-            // Work out the path to this season - if we don't have a matching path then skip this season.
-            if (!seasonFolders.TryGetValue(season.SeasonNumber, out var seasonFolder))
+            // Work out the path to this book - if we don't have a matching path then skip this book.
+            if (!seasonFolders.TryGetValue(book.SeasonNumber, out var seasonFolder))
             {
-                _logger.Trace("Failed to find season folder for series {0}, season {1}.", series.Title, season.SeasonNumber);
+                _logger.Trace("Failed to find book folder for author {0}, book {1}.", author.Title, book.SeasonNumber);
                 return new List<ImageFileResult>();
             }
 
-            // WDTV only supports one season image, so first of all try for poster otherwise just use whatever is first in the collection
-            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault();
+            // WDTV only supports one book image, so first of all try for poster otherwise just use whatever is first in the collection
+            var image = book.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? book.Images.FirstOrDefault();
             if (image == null)
             {
-                _logger.Trace("Failed to find suitable season image for series {0}, season {1}.", series.Title, season.SeasonNumber);
+                _logger.Trace("Failed to find suitable book image for author {0}, book {1}.", author.Title, book.SeasonNumber);
                 return new List<ImageFileResult>();
             }
 
@@ -222,46 +222,46 @@ public override List<ImageFileResult> SeasonImages(Series series, Season season)
             return new List<ImageFileResult> { new ImageFileResult(path, image.RemoteUrl) };
         }
 
-        public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile)
+        public override List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
+            var screenshot = editionFile.Editions.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
 
             if (screenshot == null)
             {
-                _logger.Trace("Episode screenshot not available");
+                _logger.Trace("Edition screenshot not available");
                 return new List<ImageFileResult>();
             }
 
-            return new List<ImageFileResult> { new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath), screenshot.RemoteUrl) };
+            return new List<ImageFileResult> { new ImageFileResult(GetEpisodeImageFilename(editionFile.RelativePath), screenshot.RemoteUrl) };
         }
 
-        private string GetEpisodeMetadataFilename(string episodeFilePath)
+        private string GetEpisodeMetadataFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "xml");
+            return Path.ChangeExtension(editionFilePath, "xml");
         }
 
-        private string GetEpisodeImageFilename(string episodeFilePath)
+        private string GetEpisodeImageFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "metathumb");
+            return Path.ChangeExtension(editionFilePath, "metathumb");
         }
 
-        private Dictionary<int, string> GetSeasonFolders(Series series)
+        private Dictionary<int, string> GetSeasonFolders(Author author)
         {
             var seasonFolderMap = new Dictionary<int, string>();
 
-            foreach (var folder in _diskProvider.GetDirectories(series.Path))
+            foreach (var folder in _diskProvider.GetDirectories(author.Path))
             {
                 var directoryinfo = new DirectoryInfo(folder);
                 var seasonMatch = SeasonImagesRegex.Match(directoryinfo.Name);
 
                 if (seasonMatch.Success)
                 {
-                    var seasonNumber = seasonMatch.Groups["season"].Value;
+                    var seasonNumber = seasonMatch.Groups["book"].Value;
 
                     if (seasonNumber.Contains("specials"))
                     {
@@ -275,13 +275,13 @@ private Dictionary<int, string> GetSeasonFolders(Series series)
                         }
                         else
                         {
-                            _logger.Debug("Failed to parse season number from {0} for series {1}.", folder, series.Title);
+                            _logger.Debug("Failed to parse book number from {0} for author {1}.", folder, author.Title);
                         }
                     }
                 }
                 else
                 {
-                    _logger.Debug("Rejecting folder {0} for series {1}.", Path.GetDirectoryName(folder), series.Title);
+                    _logger.Debug("Rejecting folder {0} for author {1}.", Path.GetDirectoryName(folder), author.Title);
                 }
             }
 
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadataSettings.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadataSettings.cs
index e79ae09b4..4e022600c 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadataSettings.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadataSettings.cs
@@ -21,16 +21,16 @@ public WdtvMetadataSettings()
             EpisodeImages = true;
         }
 
-        [FieldDefinition(0, Label = "MetadataSettingsEpisodeMetadata", Type = FieldType.Checkbox, Section = MetadataSectionType.Metadata, HelpText = "Season##\\filename.xml")]
+        [FieldDefinition(0, Label = "MetadataSettingsEpisodeMetadata", Type = FieldType.Checkbox, Section = MetadataSectionType.Metadata, HelpText = "Book##\\filename.xml")]
         public bool EpisodeMetadata { get; set; }
 
         [FieldDefinition(1, Label = "MetadataSettingsSeriesImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "folder.jpg")]
         public bool SeriesImages { get; set; }
 
-        [FieldDefinition(2, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Season##\\folder.jpg")]
+        [FieldDefinition(2, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Book##\\folder.jpg")]
         public bool SeasonImages { get; set; }
 
-        [FieldDefinition(3, Label = "MetadataSettingsEpisodeImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Season##\\filename.metathumb")]
+        [FieldDefinition(3, Label = "MetadataSettingsEpisodeImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "Book##\\filename.metathumb")]
         public bool EpisodeImages { get; set; }
 
         public bool IsValid => true;
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/KodiEpisodeGuide.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/KodiEpisodeGuide.cs
index 3a85357af..a7fd86965 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/KodiEpisodeGuide.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/KodiEpisodeGuide.cs
@@ -5,14 +5,14 @@ namespace NzbDrone.Core.Extras.Metadata.Consumers.Xbmc
 {
     public class KodiEpisodeGuide
     {
-        [JsonPropertyName("tvdb")]
-        public string Tvdb { get; set; }
+        [JsonPropertyName("goodreads")]
+        public string Goodreads { get; set; }
 
         [JsonPropertyName("tvmaze")]
-        public string TvMaze { get; set; }
+        public string GoogleBooks { get; set; }
 
         [JsonPropertyName("tvrage")]
-        public string TvRage { get; set; }
+        public string OpenLibrary { get; set; }
 
         [JsonPropertyName("tmdb")]
         public string Tmdb { get; set; }
@@ -24,13 +24,13 @@ public KodiEpisodeGuide()
         {
         }
 
-        public KodiEpisodeGuide(Series series)
+        public KodiEpisodeGuide(Author author)
         {
-            Tvdb = series.TvdbId.ToString();
-            TvMaze = series.TvMazeId > 0 ? series.TvMazeId.ToString() : null;
-            TvRage = series.TvRageId > 0 ? series.TvMazeId.ToString() : null;
-            Tmdb = series.TmdbId > 0 ? series.TmdbId.ToString() : null;
-            Imdb = series.ImdbId;
+            Goodreads = author.GoodreadsId.ToString();
+            GoogleBooks = author.GoogleBooksId > 0 ? author.GoogleBooksId.ToString() : null;
+            OpenLibrary = author.OpenLibraryId > 0 ? author.GoogleBooksId.ToString() : null;
+            Tmdb = author.TmdbId > 0 ? author.TmdbId.ToString() : null;
+            Imdb = author.ImdbId;
         }
     }
 }
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
index d0fd3c23a..5a9212428 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
@@ -43,30 +43,30 @@ public XbmcMetadata(IDetectXbmcNfo detectNfo,
         }
 
         private static readonly Regex SeriesImagesRegex = new Regex(@"^(?<type>poster|banner|fanart)\.(?:png|jpg)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
-        private static readonly Regex SeasonImagesRegex = new Regex(@"^season(?<season>\d{2,}|-all|-specials)-(?<type>poster|banner|fanart)\.(?:png|jpg)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
+        private static readonly Regex SeasonImagesRegex = new Regex(@"^book(?<book>\d{2,}|-all|-specials)-(?<type>poster|banner|fanart)\.(?:png|jpg)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
         private static readonly Regex EpisodeImageRegex = new Regex(@"-thumb\.(?:png|jpg)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
 
         public override string Name => "Kodi (XBMC) / Emby";
 
-        public override string GetFilenameAfterMove(Series series, EpisodeFile episodeFile, MetadataFile metadataFile)
+        public override string GetFilenameAfterMove(Author author, EditionFile editionFile, MetadataFile metadataFile)
         {
-            var episodeFilePath = Path.Combine(series.Path, episodeFile.RelativePath);
+            var editionFilePath = Path.Combine(author.Path, editionFile.RelativePath);
 
             if (metadataFile.Type == MetadataType.EpisodeImage)
             {
-                return GetEpisodeImageFilename(episodeFilePath);
+                return GetEpisodeImageFilename(editionFilePath);
             }
 
             if (metadataFile.Type == MetadataType.EpisodeMetadata)
             {
-                return GetEpisodeMetadataFilename(episodeFilePath);
+                return GetEpisodeMetadataFilename(editionFilePath);
             }
 
-            _logger.Debug("Unknown episode file metadata: {0}", metadataFile.RelativePath);
-            return Path.Combine(series.Path, metadataFile.RelativePath);
+            _logger.Debug("Unknown edition file metadata: {0}", metadataFile.RelativePath);
+            return Path.Combine(author.Path, metadataFile.RelativePath);
         }
 
-        public override MetadataFile FindMetadataFile(Series series, string path)
+        public override MetadataFile FindMetadataFile(Author author, string path)
         {
             var filename = Path.GetFileName(path);
 
@@ -77,9 +77,9 @@ public override MetadataFile FindMetadataFile(Series series, string path)
 
             var metadata = new MetadataFile
             {
-                SeriesId = series.Id,
+                SeriesId = author.Id,
                 Consumer = GetType().Name,
-                RelativePath = series.Path.GetRelativePath(path)
+                RelativePath = author.Path.GetRelativePath(path)
             };
 
             if (SeriesImagesRegex.IsMatch(filename))
@@ -94,7 +94,7 @@ public override MetadataFile FindMetadataFile(Series series, string path)
             {
                 metadata.Type = MetadataType.SeasonImage;
 
-                var seasonNumberMatch = seasonMatch.Groups["season"].Value;
+                var seasonNumberMatch = seasonMatch.Groups["book"].Value;
 
                 if (seasonNumberMatch.Contains("specials"))
                 {
@@ -138,7 +138,7 @@ public override MetadataFile FindMetadataFile(Series series, string path)
             return null;
         }
 
-        public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason)
+        public override MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason)
         {
             if (reason == SeriesMetadataReason.EpisodesImported)
             {
@@ -149,55 +149,55 @@ public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataR
 
             if (Settings.SeriesMetadata)
             {
-                _logger.Debug("Generating Series Metadata for: {0}", series.Title);
+                _logger.Debug("Generating Author Metadata for: {0}", author.Title);
 
                 var tvShow = new XElement("tvshow");
 
-                tvShow.Add(new XElement("title", series.Title));
+                tvShow.Add(new XElement("title", author.Title));
 
-                if (series.Ratings != null && series.Ratings.Votes > 0)
+                if (author.Ratings != null && author.Ratings.Votes > 0)
                 {
-                    tvShow.Add(new XElement("rating", series.Ratings.Value));
+                    tvShow.Add(new XElement("rating", author.Ratings.Value));
                 }
 
-                tvShow.Add(new XElement("plot", series.Overview));
-                tvShow.Add(new XElement("mpaa", series.Certification));
-                tvShow.Add(new XElement("id", series.TvdbId));
+                tvShow.Add(new XElement("plot", author.Overview));
+                tvShow.Add(new XElement("mpaa", author.Certification));
+                tvShow.Add(new XElement("id", author.GoodreadsId));
 
-                var uniqueId = new XElement("uniqueid", series.TvdbId);
-                uniqueId.SetAttributeValue("type", "tvdb");
+                var uniqueId = new XElement("uniqueid", author.GoodreadsId);
+                uniqueId.SetAttributeValue("type", "goodreads");
                 uniqueId.SetAttributeValue("default", true);
                 tvShow.Add(uniqueId);
 
-                if (series.ImdbId.IsNotNullOrWhiteSpace())
+                if (author.ImdbId.IsNotNullOrWhiteSpace())
                 {
-                    var imdbId = new XElement("uniqueid", series.ImdbId);
+                    var imdbId = new XElement("uniqueid", author.ImdbId);
                     imdbId.SetAttributeValue("type", "imdb");
                     tvShow.Add(imdbId);
                 }
 
-                if (series.TmdbId > 0)
+                if (author.TmdbId > 0)
                 {
-                    var tmdbId = new XElement("uniqueid", series.TmdbId);
+                    var tmdbId = new XElement("uniqueid", author.TmdbId);
                     tmdbId.SetAttributeValue("type", "tmdb");
                     tvShow.Add(tmdbId);
                 }
 
-                if (series.TvMazeId > 0)
+                if (author.GoogleBooksId > 0)
                 {
-                    var tvMazeId = new XElement("uniqueid", series.TvMazeId);
+                    var tvMazeId = new XElement("uniqueid", author.GoogleBooksId);
                     tvMazeId.SetAttributeValue("type", "tvmaze");
                     tvShow.Add(tvMazeId);
                 }
 
-                foreach (var genre in series.Genres)
+                foreach (var genre in author.Genres)
                 {
                     tvShow.Add(new XElement("genre", genre));
                 }
 
-                if (series.Tags.Any())
+                if (author.Tags.Any())
                 {
-                    var tags = _tagRepo.GetTags(series.Tags);
+                    var tags = _tagRepo.GetTags(author.Tags);
 
                     foreach (var tag in tags)
                     {
@@ -205,22 +205,22 @@ public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataR
                     }
                 }
 
-                tvShow.Add(new XElement("status", series.Status));
+                tvShow.Add(new XElement("status", author.Status));
 
-                if (series.FirstAired.HasValue)
+                if (author.FirstAired.HasValue)
                 {
-                    tvShow.Add(new XElement("premiered", series.FirstAired.Value.ToString("yyyy-MM-dd")));
+                    tvShow.Add(new XElement("premiered", author.FirstAired.Value.ToString("yyyy-MM-dd")));
                 }
 
                 // Add support for Jellyfin's "enddate" tag
-                if (series.Status == SeriesStatusType.Ended && series.LastAired.HasValue)
+                if (author.Status == SeriesStatusType.Inactive && author.LastAired.HasValue)
                 {
-                    tvShow.Add(new XElement("enddate", series.LastAired.Value.ToString("yyyy-MM-dd")));
+                    tvShow.Add(new XElement("enddate", author.LastAired.Value.ToString("yyyy-MM-dd")));
                 }
 
-                tvShow.Add(new XElement("studio", series.Network));
+                tvShow.Add(new XElement("publisher", author.Publisher));
 
-                foreach (var actor in series.Actors)
+                foreach (var actor in author.Actors)
                 {
                     var xmlActor = new XElement("actor",
                         new XElement("name", actor.Name),
@@ -236,7 +236,7 @@ public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataR
 
                 if (Settings.SeriesMetadataEpisodeGuide)
                 {
-                    var episodeGuide = new KodiEpisodeGuide(series);
+                    var episodeGuide = new KodiEpisodeGuide(author);
                     var serializerSettings = STJson.GetSerializerSettings();
                     serializerSettings.WriteIndented = false;
 
@@ -269,22 +269,22 @@ public override MetadataFileResult SeriesMetadata(Series series, SeriesMetadataR
                     xmlResult += Environment.NewLine;
                 }
 
-                xmlResult += "https://www.thetvdb.com/?tab=series&id=" + series.TvdbId;
+                xmlResult += "https://www.thetvdb.com/?tab=author&id=" + author.GoodreadsId;
             }
 
             return xmlResult.IsNullOrWhiteSpace() ? null : new MetadataFileResult("tvshow.nfo", xmlResult);
         }
 
-        public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile)
+        public override MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeMetadata)
             {
                 return null;
             }
 
-            _logger.Debug("Generating Episode Metadata for: {0}", Path.Combine(series.Path, episodeFile.RelativePath));
+            _logger.Debug("Generating Edition Metadata for: {0}", Path.Combine(author.Path, editionFile.RelativePath));
 
-            var watched = GetExistingWatchedStatus(series, episodeFile.RelativePath);
+            var watched = GetExistingWatchedStatus(author, editionFile.RelativePath);
 
             var xmlResult = string.Empty;
             var xws = new XmlWriterSettings
@@ -293,38 +293,38 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                 Indent = true
             };
 
-            foreach (var episode in episodeFile.Episodes.Value)
+            foreach (var edition in editionFile.Editions.Value)
             {
                 var doc = new XDocument
                 {
                     Declaration = new XDeclaration("1.0", "UTF-8", "yes")
                 };
 
-                var image = episode.Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
+                var image = edition.Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot);
 
                 var details = new XElement("episodedetails");
-                details.Add(new XElement("title", episode.Title));
-                details.Add(new XElement("season", episode.SeasonNumber));
-                details.Add(new XElement("episode", episode.EpisodeNumber));
-                details.Add(new XElement("aired", episode.AirDate));
-                details.Add(new XElement("plot", episode.Overview));
+                details.Add(new XElement("title", edition.Title));
+                details.Add(new XElement("book", edition.SeasonNumber));
+                details.Add(new XElement("edition", edition.EpisodeNumber));
+                details.Add(new XElement("published", edition.PublishDate));
+                details.Add(new XElement("plot", edition.Overview));
 
-                if (episode.SeasonNumber == 0 && episode.AiredAfterSeasonNumber.HasValue)
+                if (edition.SeasonNumber == 0 && edition.PublishedAfterSeasonNumber.HasValue)
                 {
-                    details.Add(new XElement("displayafterseason", episode.AiredAfterSeasonNumber));
+                    details.Add(new XElement("displayafterseason", edition.PublishedAfterSeasonNumber));
                 }
-                else if (episode.SeasonNumber == 0 && episode.AiredBeforeSeasonNumber.HasValue)
+                else if (edition.SeasonNumber == 0 && edition.PublishedBeforeSeasonNumber.HasValue)
                 {
-                    details.Add(new XElement("displayseason", episode.AiredBeforeSeasonNumber));
-                    details.Add(new XElement("displayepisode", episode.AiredBeforeEpisodeNumber ?? -1));
+                    details.Add(new XElement("displayseason", edition.PublishedBeforeSeasonNumber));
+                    details.Add(new XElement("displayepisode", edition.PublishedBeforeEpisodeNumber ?? -1));
                 }
 
-                var tvdbId = new XElement("uniqueid", episode.TvdbId);
-                tvdbId.SetAttributeValue("type", "tvdb");
-                tvdbId.SetAttributeValue("default", true);
-                details.Add(tvdbId);
+                var goodreadsId = new XElement("uniqueid", edition.GoodreadsId);
+                goodreadsId.SetAttributeValue("type", "goodreads");
+                goodreadsId.SetAttributeValue("default", true);
+                details.Add(goodreadsId);
 
-                var sonarrId = new XElement("uniqueid", episode.Id);
+                var sonarrId = new XElement("uniqueid", edition.Id);
                 sonarrId.SetAttributeValue("type", "sonarr");
                 details.Add(sonarrId);
 
@@ -339,43 +339,43 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
 
                 details.Add(new XElement("watched", watched));
 
-                if (episode.Ratings != null && episode.Ratings.Votes > 0)
+                if (edition.Ratings != null && edition.Ratings.Votes > 0)
                 {
-                    details.Add(new XElement("rating", episode.Ratings.Value));
+                    details.Add(new XElement("rating", edition.Ratings.Value));
                 }
 
-                if (episodeFile.MediaInfo != null)
+                if (editionFile.MediaInfo != null)
                 {
-                    var sceneName = episodeFile.GetSceneOrFileName();
+                    var sceneName = editionFile.GetSceneOrFileName();
 
                     var fileInfo = new XElement("fileinfo");
                     var streamDetails = new XElement("streamdetails");
 
                     var video = new XElement("video");
-                    video.Add(new XElement("aspect", (float)episodeFile.MediaInfo.Width / (float)episodeFile.MediaInfo.Height));
-                    video.Add(new XElement("bitrate", episodeFile.MediaInfo.VideoBitrate));
-                    video.Add(new XElement("codec", MediaInfoFormatter.FormatVideoCodec(episodeFile.MediaInfo, sceneName)));
-                    video.Add(new XElement("framerate", episodeFile.MediaInfo.VideoFps));
-                    video.Add(new XElement("height", episodeFile.MediaInfo.Height));
-                    video.Add(new XElement("scantype", episodeFile.MediaInfo.ScanType));
-                    video.Add(new XElement("width", episodeFile.MediaInfo.Width));
-
-                    video.Add(new XElement("duration", episodeFile.MediaInfo.RunTime.TotalMinutes));
-                    video.Add(new XElement("durationinseconds", Math.Round(episodeFile.MediaInfo.RunTime.TotalSeconds)));
-
-                    if (episodeFile.MediaInfo.VideoHdrFormat is HdrFormat.DolbyVision or HdrFormat.DolbyVisionHdr10 or HdrFormat.DolbyVisionHdr10Plus or HdrFormat.DolbyVisionHlg or HdrFormat.DolbyVisionSdr)
+                    video.Add(new XElement("aspect", (float)editionFile.MediaInfo.Width / (float)editionFile.MediaInfo.Height));
+                    video.Add(new XElement("bitrate", editionFile.MediaInfo.VideoBitrate));
+                    video.Add(new XElement("codec", MediaInfoFormatter.FormatVideoCodec(editionFile.MediaInfo, sceneName)));
+                    video.Add(new XElement("framerate", editionFile.MediaInfo.VideoFps));
+                    video.Add(new XElement("height", editionFile.MediaInfo.Height));
+                    video.Add(new XElement("scantype", editionFile.MediaInfo.ScanType));
+                    video.Add(new XElement("width", editionFile.MediaInfo.Width));
+
+                    video.Add(new XElement("duration", editionFile.MediaInfo.RunTime.TotalMinutes));
+                    video.Add(new XElement("durationinseconds", Math.Round(editionFile.MediaInfo.RunTime.TotalSeconds)));
+
+                    if (editionFile.MediaInfo.VideoHdrFormat is HdrFormat.DolbyVision or HdrFormat.DolbyVisionHdr10 or HdrFormat.DolbyVisionHdr10Plus or HdrFormat.DolbyVisionHlg or HdrFormat.DolbyVisionSdr)
                     {
                         video.Add(new XElement("hdrtype", "dolbyvision"));
                     }
-                    else if (episodeFile.MediaInfo.VideoHdrFormat is HdrFormat.Hdr10 or HdrFormat.Hdr10Plus or HdrFormat.Pq10)
+                    else if (editionFile.MediaInfo.VideoHdrFormat is HdrFormat.Hdr10 or HdrFormat.Hdr10Plus or HdrFormat.Pq10)
                     {
                         video.Add(new XElement("hdrtype", "hdr10"));
                     }
-                    else if (episodeFile.MediaInfo.VideoHdrFormat == HdrFormat.Hlg10)
+                    else if (editionFile.MediaInfo.VideoHdrFormat == HdrFormat.Hlg10)
                     {
                         video.Add(new XElement("hdrtype", "hlg"));
                     }
-                    else if (episodeFile.MediaInfo.VideoHdrFormat == HdrFormat.None)
+                    else if (editionFile.MediaInfo.VideoHdrFormat == HdrFormat.None)
                     {
                         video.Add(new XElement("hdrtype", ""));
                     }
@@ -383,16 +383,16 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                     streamDetails.Add(video);
 
                     var audio = new XElement("audio");
-                    var audioChannelCount = episodeFile.MediaInfo.AudioChannels;
-                    audio.Add(new XElement("bitrate", episodeFile.MediaInfo.AudioBitrate));
+                    var audioChannelCount = editionFile.MediaInfo.AudioChannels;
+                    audio.Add(new XElement("bitrate", editionFile.MediaInfo.AudioBitrate));
                     audio.Add(new XElement("channels", audioChannelCount));
-                    audio.Add(new XElement("codec", MediaInfoFormatter.FormatAudioCodec(episodeFile.MediaInfo, sceneName)));
-                    audio.Add(new XElement("language", episodeFile.MediaInfo.AudioLanguages));
+                    audio.Add(new XElement("codec", MediaInfoFormatter.FormatAudioCodec(editionFile.MediaInfo, sceneName)));
+                    audio.Add(new XElement("language", editionFile.MediaInfo.AudioLanguages));
                     streamDetails.Add(audio);
 
-                    if (episodeFile.MediaInfo.Subtitles != null && episodeFile.MediaInfo.Subtitles.Count > 0)
+                    if (editionFile.MediaInfo.Subtitles != null && editionFile.MediaInfo.Subtitles.Count > 0)
                     {
-                        foreach (var s in episodeFile.MediaInfo.Subtitles)
+                        foreach (var s in editionFile.MediaInfo.Subtitles)
                         {
                             var subtitle = new XElement("subtitle");
                             subtitle.Add(new XElement("language", s));
@@ -405,8 +405,8 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                 }
 
                 // Todo: get guest stars, writer and director
-                // details.Add(new XElement("credits", tvdbEpisode.Writer.FirstOrDefault()));
-                // details.Add(new XElement("director", tvdbEpisode.Directors.FirstOrDefault()));
+                // details.Add(new XElement("credits", goodreadsEpisode.Writer.FirstOrDefault()));
+                // details.Add(new XElement("director", goodreadsEpisode.Directors.FirstOrDefault()));
 
                 using var sw = new Utf8StringWriter();
                 using var xw = XmlWriter.Create(sw, xws);
@@ -419,30 +419,30 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                 xmlResult += Environment.NewLine;
             }
 
-            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath), xmlResult.Trim(Environment.NewLine.ToCharArray()));
+            return new MetadataFileResult(GetEpisodeMetadataFilename(editionFile.RelativePath), xmlResult.Trim(Environment.NewLine.ToCharArray()));
         }
 
-        public override List<ImageFileResult> SeriesImages(Series series)
+        public override List<ImageFileResult> SeriesImages(Author author)
         {
             if (!Settings.SeriesImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            return ProcessSeriesImages(series).ToList();
+            return ProcessSeriesImages(author).ToList();
         }
 
-        public override List<ImageFileResult> SeasonImages(Series series, Season season)
+        public override List<ImageFileResult> SeasonImages(Author author, Book book)
         {
             if (!Settings.SeasonImages)
             {
                 return new List<ImageFileResult>();
             }
 
-            return ProcessSeasonImages(series, season).ToList();
+            return ProcessSeasonImages(author, book).ToList();
         }
 
-        public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile)
+        public override List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile)
         {
             if (!Settings.EpisodeImages)
             {
@@ -451,11 +451,11 @@ public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile e
 
             try
             {
-                var firstEpisode = episodeFile.Episodes.Value.FirstOrDefault();
+                var firstEpisode = editionFile.Editions.Value.FirstOrDefault();
 
                 if (firstEpisode == null)
                 {
-                    _logger.Debug("Episode file has no associated episodes, potentially a duplicate file");
+                    _logger.Debug("Edition file has no associated editions, potentially a duplicate file");
                     return new List<ImageFileResult>();
                 }
 
@@ -463,62 +463,62 @@ public override List<ImageFileResult> EpisodeImages(Series series, EpisodeFile e
 
                 if (screenshot == null)
                 {
-                    _logger.Debug("Episode screenshot not available");
+                    _logger.Debug("Edition screenshot not available");
                     return new List<ImageFileResult>();
                 }
 
                 return new List<ImageFileResult>
                    {
-                       new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath), screenshot.RemoteUrl)
+                       new ImageFileResult(GetEpisodeImageFilename(editionFile.RelativePath), screenshot.RemoteUrl)
                    };
             }
             catch (Exception ex)
             {
-                _logger.Error(ex, "Unable to process episode image for file: {0}", Path.Combine(series.Path, episodeFile.RelativePath));
+                _logger.Error(ex, "Unable to process edition image for file: {0}", Path.Combine(author.Path, editionFile.RelativePath));
 
                 return new List<ImageFileResult>();
             }
         }
 
-        private IEnumerable<ImageFileResult> ProcessSeriesImages(Series series)
+        private IEnumerable<ImageFileResult> ProcessSeriesImages(Author author)
         {
-            foreach (var image in series.Images)
+            foreach (var image in author.Images)
             {
-                var source = _mediaCoverService.GetCoverPath(series.Id, image.CoverType);
+                var source = _mediaCoverService.GetCoverPath(author.Id, image.CoverType);
                 var destination = image.CoverType.ToString().ToLowerInvariant() + Path.GetExtension(source);
 
                 yield return new ImageFileResult(destination, source);
             }
         }
 
-        private IEnumerable<ImageFileResult> ProcessSeasonImages(Series series, Season season)
+        private IEnumerable<ImageFileResult> ProcessSeasonImages(Author author, Book book)
         {
-            foreach (var image in season.Images)
+            foreach (var image in book.Images)
             {
-                var filename = string.Format("season{0:00}-{1}.jpg", season.SeasonNumber, image.CoverType.ToString().ToLower());
+                var filename = string.Format("book{0:00}-{1}.jpg", book.SeasonNumber, image.CoverType.ToString().ToLower());
 
-                if (season.SeasonNumber == 0)
+                if (book.SeasonNumber == 0)
                 {
-                    filename = string.Format("season-specials-{0}.jpg", image.CoverType.ToString().ToLower());
+                    filename = string.Format("book-specials-{0}.jpg", image.CoverType.ToString().ToLower());
                 }
 
                 yield return new ImageFileResult(filename, image.RemoteUrl);
             }
         }
 
-        private string GetEpisodeMetadataFilename(string episodeFilePath)
+        private string GetEpisodeMetadataFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "nfo");
+            return Path.ChangeExtension(editionFilePath, "nfo");
         }
 
-        private string GetEpisodeImageFilename(string episodeFilePath)
+        private string GetEpisodeImageFilename(string editionFilePath)
         {
-            return Path.ChangeExtension(episodeFilePath, "").Trim('.') + "-thumb.jpg";
+            return Path.ChangeExtension(editionFilePath, "").Trim('.') + "-thumb.jpg";
         }
 
-        private bool GetExistingWatchedStatus(Series series, string episodeFilePath)
+        private bool GetExistingWatchedStatus(Author author, string editionFilePath)
         {
-            var fullPath = Path.Combine(series.Path, GetEpisodeMetadataFilename(episodeFilePath));
+            var fullPath = Path.Combine(author.Path, GetEpisodeMetadataFilename(editionFilePath));
 
             if (!_diskProvider.FileExists(fullPath))
             {
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadataSettings.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadataSettings.cs
index 312cde16d..88f7d1bc6 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadataSettings.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadataSettings.cs
@@ -42,7 +42,7 @@ public XbmcMetadataSettings()
         [FieldDefinition(5, Label = "MetadataSettingsSeriesImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "fanart.jpg, poster.jpg, banner.jpg")]
         public bool SeriesImages { get; set; }
 
-        [FieldDefinition(6, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "season##-poster.jpg, season##-banner.jpg, season-specials-poster.jpg, season-specials-banner.jpg")]
+        [FieldDefinition(6, Label = "MetadataSettingsSeasonImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "book##-poster.jpg, book##-banner.jpg, book-specials-poster.jpg, book-specials-banner.jpg")]
         public bool SeasonImages { get; set; }
 
         [FieldDefinition(7, Label = "MetadataSettingsEpisodeImages", Type = FieldType.Checkbox, Section = MetadataSectionType.Image, HelpText = "<filename>-thumb.jpg")]
diff --git a/src/NzbDrone.Core/Extras/Metadata/ExistingMetadataImporter.cs b/src/NzbDrone.Core/Extras/Metadata/ExistingMetadataImporter.cs
index db4befc0f..4c079681c 100644
--- a/src/NzbDrone.Core/Extras/Metadata/ExistingMetadataImporter.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/ExistingMetadataImporter.cs
@@ -2,7 +2,7 @@
 using System.IO;
 using System.Linq;
 using NLog;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Extensions;
 using Readarr.Core.Extras.Files;
 using Readarr.Core.Extras.Metadata.Files;
 using Readarr.Core.Extras.Subtitles;
@@ -33,12 +33,12 @@ public ExistingMetadataImporter(IExtraFileService<MetadataFile> metadataFileServ
 
         public override int Order => 0;
 
-        public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
+        public override IEnumerable<ExtraFile> ProcessFiles(Author author, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
         {
-            _logger.Debug("Looking for existing metadata in {0}", series.Path);
+            _logger.Debug("Looking for existing metadata in {0}", author.Path);
 
             var metadataFiles = new List<MetadataFile>();
-            var filterResult = FilterAndClean(series, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
+            var filterResult = FilterAndClean(author, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
 
             foreach (var possibleMetadataFile in filterResult.FilesOnDisk)
             {
@@ -51,7 +51,7 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
 
                 foreach (var consumer in _consumers)
                 {
-                    var metadata = consumer.FindMetadataFile(series, possibleMetadataFile);
+                    var metadata = consumer.FindMetadataFile(author, possibleMetadataFile);
 
                     if (metadata == null)
                     {
@@ -64,7 +64,7 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                         var localEpisode = new LocalEpisode
                         {
                             FileEpisodeInfo = Parser.Parser.ParsePath(possibleMetadataFile),
-                            Series = series,
+                            Author = author,
                             Path = possibleMetadataFile
                         };
 
@@ -78,20 +78,20 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                             continue;
                         }
 
-                        if (localEpisode.Episodes.Empty())
+                        if (localEpisode.Editions.Empty())
                         {
-                            _logger.Debug("Cannot find related episodes for: {0}", possibleMetadataFile);
+                            _logger.Debug("Cannot find related editions for: {0}", possibleMetadataFile);
                             continue;
                         }
 
-                        if (localEpisode.Episodes.DistinctBy(e => e.EpisodeFileId).Count() > 1)
+                        if (localEpisode.Editions.DistinctBy(e => e.EditionFileId).Count() > 1)
                         {
                             _logger.Debug("Extra file: {0} does not match existing files.", possibleMetadataFile);
                             continue;
                         }
 
                         metadata.SeasonNumber = localEpisode.SeasonNumber;
-                        metadata.EpisodeFileId = localEpisode.Episodes.First().EpisodeFileId;
+                        metadata.EditionFileId = localEpisode.Editions.First().EditionFileId;
                     }
 
                     metadata.Extension = Path.GetExtension(possibleMetadataFile);
diff --git a/src/NzbDrone.Core/Extras/Metadata/Files/CleanMetadataFileService.cs b/src/NzbDrone.Core/Extras/Metadata/Files/CleanMetadataFileService.cs
index 6166ae20b..3add2bbe7 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Files/CleanMetadataFileService.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Files/CleanMetadataFileService.cs
@@ -7,7 +7,7 @@ namespace NzbDrone.Core.Extras.Metadata.Files
 {
     public interface ICleanMetadataService
     {
-        void Clean(Series series);
+        void Clean(Author author);
     }
 
     public class CleanExtraFileService : ICleanMetadataService
@@ -25,15 +25,15 @@ public CleanExtraFileService(IMetadataFileService metadataFileService,
             _logger = logger;
         }
 
-        public void Clean(Series series)
+        public void Clean(Author author)
         {
-            _logger.Debug("Cleaning missing metadata files for series: {0}", series.Title);
+            _logger.Debug("Cleaning missing metadata files for author: {0}", author.Title);
 
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
 
             foreach (var metadataFile in metadataFiles)
             {
-                if (!_diskProvider.FileExists(Path.Combine(series.Path, metadataFile.RelativePath)))
+                if (!_diskProvider.FileExists(Path.Combine(author.Path, metadataFile.RelativePath)))
                 {
                     _logger.Debug("Deleting metadata file from database: {0}", metadataFile.RelativePath);
                     _metadataFileService.Delete(metadataFile.Id);
diff --git a/src/NzbDrone.Core/Extras/Metadata/IMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/IMetadata.cs
index 481847356..349f2d5de 100644
--- a/src/NzbDrone.Core/Extras/Metadata/IMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/IMetadata.cs
@@ -8,13 +8,13 @@ namespace Readarr.Core.Extras.Metadata
 {
     public interface IMetadata : IProvider
     {
-        string GetFilenameAfterMove(Series series, EpisodeFile episodeFile, MetadataFile metadataFile);
-        MetadataFile FindMetadataFile(Series series, string path);
-        MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason);
-        MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile);
-        List<ImageFileResult> SeriesImages(Series series);
-        List<ImageFileResult> SeasonImages(Series series, Season season);
-        List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile);
+        string GetFilenameAfterMove(Author author, EditionFile editionFile, MetadataFile metadataFile);
+        MetadataFile FindMetadataFile(Author author, string path);
+        MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason);
+        MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile);
+        List<ImageFileResult> SeriesImages(Author author);
+        List<ImageFileResult> SeasonImages(Author author, Book book);
+        List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile);
     }
 
     public enum SeriesMetadataReason
diff --git a/src/NzbDrone.Core/Extras/Metadata/MetadataBase.cs b/src/NzbDrone.Core/Extras/Metadata/MetadataBase.cs
index 11029a461..4cb85bc92 100644
--- a/src/NzbDrone.Core/Extras/Metadata/MetadataBase.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/MetadataBase.cs
@@ -27,22 +27,22 @@ public ValidationResult Test()
             return new ValidationResult();
         }
 
-        public virtual string GetFilenameAfterMove(Series series, EpisodeFile episodeFile, MetadataFile metadataFile)
+        public virtual string GetFilenameAfterMove(Author author, EditionFile editionFile, MetadataFile metadataFile)
         {
-            var existingFilename = Path.Combine(series.Path, metadataFile.RelativePath);
+            var existingFilename = Path.Combine(author.Path, metadataFile.RelativePath);
             var extension = Path.GetExtension(existingFilename).TrimStart('.');
-            var newFileName = Path.ChangeExtension(Path.Combine(series.Path, episodeFile.RelativePath), extension);
+            var newFileName = Path.ChangeExtension(Path.Combine(author.Path, editionFile.RelativePath), extension);
 
             return newFileName;
         }
 
-        public abstract MetadataFile FindMetadataFile(Series series, string path);
+        public abstract MetadataFile FindMetadataFile(Author author, string path);
 
-        public abstract MetadataFileResult SeriesMetadata(Series series, SeriesMetadataReason reason);
-        public abstract MetadataFileResult EpisodeMetadata(Series series, EpisodeFile episodeFile);
-        public abstract List<ImageFileResult> SeriesImages(Series series);
-        public abstract List<ImageFileResult> SeasonImages(Series series, Season season);
-        public abstract List<ImageFileResult> EpisodeImages(Series series, EpisodeFile episodeFile);
+        public abstract MetadataFileResult SeriesMetadata(Author author, SeriesMetadataReason reason);
+        public abstract MetadataFileResult EpisodeMetadata(Author author, EditionFile editionFile);
+        public abstract List<ImageFileResult> SeriesImages(Author author);
+        public abstract List<ImageFileResult> SeasonImages(Author author, Book book);
+        public abstract List<ImageFileResult> EpisodeImages(Author author, EditionFile editionFile);
 
         public virtual object RequestAction(string action, IDictionary<string, string> query)
         {
diff --git a/src/NzbDrone.Core/Extras/Metadata/MetadataService.cs b/src/NzbDrone.Core/Extras/Metadata/MetadataService.cs
index b57119fbf..d05405527 100644
--- a/src/NzbDrone.Core/Extras/Metadata/MetadataService.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/MetadataService.cs
@@ -4,9 +4,9 @@
 using System.Linq;
 using System.Net;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.Extensions;
-using Readarr.Common.Http;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.Extensions;
+using NzbDrone.Common.Http;
 using Readarr.Core.Configuration;
 using Readarr.Core.Extras.Files;
 using Readarr.Core.Extras.Metadata.Files;
@@ -57,14 +57,14 @@ public MetadataService(IConfigService configService,
 
         public override int Order => 0;
 
-        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Author author)
         {
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
-            _cleanMetadataService.Clean(series);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
+            _cleanMetadataService.Clean(author);
 
-            if (!_diskProvider.FolderExists(series.Path))
+            if (!_diskProvider.FolderExists(author.Path))
             {
-                _logger.Info("Series folder does not exist, skipping metadata image creation");
+                _logger.Info("Author folder does not exist, skipping metadata image creation");
                 return Enumerable.Empty<MetadataFile>();
             }
 
@@ -74,7 +74,7 @@ public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series
             {
                 var consumerFiles = GetMetadataFilesForConsumer(consumer, metadataFiles);
 
-                files.AddRange(ProcessSeriesImages(consumer, series, consumerFiles));
+                files.AddRange(ProcessSeriesImages(consumer, author, consumerFiles));
             }
 
             _metadataFileService.Upsert(files);
@@ -82,14 +82,14 @@ public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series
             return files;
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Author author, List<EditionFile> editionFiles)
         {
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
-            _cleanMetadataService.Clean(series);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
+            _cleanMetadataService.Clean(author);
 
-            if (!_diskProvider.FolderExists(series.Path))
+            if (!_diskProvider.FolderExists(author.Path))
             {
-                _logger.Info("Series folder does not exist, skipping metadata creation");
+                _logger.Info("Author folder does not exist, skipping metadata creation");
                 return Enumerable.Empty<MetadataFile>();
             }
 
@@ -99,14 +99,14 @@ public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List
             {
                 var consumerFiles = GetMetadataFilesForConsumer(consumer, metadataFiles);
 
-                files.AddIfNotNull(ProcessSeriesMetadata(consumer, series, consumerFiles, SeriesMetadataReason.Scan));
-                files.AddRange(ProcessSeriesImages(consumer, series, consumerFiles));
-                files.AddRange(ProcessSeasonImages(consumer, series, consumerFiles));
+                files.AddIfNotNull(ProcessSeriesMetadata(consumer, author, consumerFiles, SeriesMetadataReason.Scan));
+                files.AddRange(ProcessSeriesImages(consumer, author, consumerFiles));
+                files.AddRange(ProcessSeasonImages(consumer, author, consumerFiles));
 
-                foreach (var episodeFile in episodeFiles)
+                foreach (var editionFile in editionFiles)
                 {
-                    files.AddIfNotNull(ProcessEpisodeMetadata(consumer, series, episodeFile, consumerFiles));
-                    files.AddRange(ProcessEpisodeImages(consumer, series, episodeFile, consumerFiles));
+                    files.AddIfNotNull(ProcessEpisodeMetadata(consumer, author, editionFile, consumerFiles));
+                    files.AddRange(ProcessEpisodeImages(consumer, author, editionFile, consumerFiles));
                 }
             }
 
@@ -115,14 +115,14 @@ public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List
             return files;
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Author author)
         {
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
-            _cleanMetadataService.Clean(series);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
+            _cleanMetadataService.Clean(author);
 
-            if (!_diskProvider.FolderExists(series.Path))
+            if (!_diskProvider.FolderExists(author.Path))
             {
-                _logger.Info("Series folder does not exist, skipping metadata creation");
+                _logger.Info("Author folder does not exist, skipping metadata creation");
                 return Enumerable.Empty<MetadataFile>();
             }
 
@@ -132,7 +132,7 @@ public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series
             {
                 var consumerFiles = GetMetadataFilesForConsumer(consumer, metadataFiles);
 
-                files.AddIfNotNull(ProcessSeriesMetadata(consumer, series, consumerFiles, SeriesMetadataReason.EpisodesImported));
+                files.AddIfNotNull(ProcessSeriesMetadata(consumer, author, consumerFiles, SeriesMetadataReason.EpisodesImported));
             }
 
             _metadataFileService.Upsert(files);
@@ -140,14 +140,14 @@ public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series
             return files;
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Author author, EditionFile editionFile)
         {
             var files = new List<MetadataFile>();
 
             foreach (var consumer in _metadataFactory.Enabled())
             {
-                files.AddIfNotNull(ProcessEpisodeMetadata(consumer, series, episodeFile, new List<MetadataFile>()));
-                files.AddRange(ProcessEpisodeImages(consumer, series, episodeFile, new List<MetadataFile>()));
+                files.AddIfNotNull(ProcessEpisodeMetadata(consumer, author, editionFile, new List<MetadataFile>()));
+                files.AddRange(ProcessEpisodeImages(consumer, author, editionFile, new List<MetadataFile>()));
             }
 
             _metadataFileService.Upsert(files);
@@ -155,9 +155,9 @@ public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, E
             return files;
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, string seriesFolder, string seasonFolder)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Author author, string seriesFolder, string seasonFolder)
         {
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
 
             if (seriesFolder.IsNullOrWhiteSpace() && seasonFolder.IsNullOrWhiteSpace())
             {
@@ -172,13 +172,13 @@ public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, s
 
                 if (seriesFolder.IsNotNullOrWhiteSpace())
                 {
-                    files.AddIfNotNull(ProcessSeriesMetadata(consumer, series, consumerFiles, SeriesMetadataReason.EpisodeFolderCreated));
-                    files.AddRange(ProcessSeriesImages(consumer, series, consumerFiles));
+                    files.AddIfNotNull(ProcessSeriesMetadata(consumer, author, consumerFiles, SeriesMetadataReason.EpisodeFolderCreated));
+                    files.AddRange(ProcessSeriesImages(consumer, author, consumerFiles));
                 }
 
                 if (seasonFolder.IsNotNullOrWhiteSpace())
                 {
-                    files.AddRange(ProcessSeasonImages(consumer, series, consumerFiles));
+                    files.AddRange(ProcessSeasonImages(consumer, author, consumerFiles));
                 }
             }
 
@@ -187,9 +187,9 @@ public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, s
             return files;
         }
 
-        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Author author, List<EditionFile> editionFiles)
         {
-            var metadataFiles = _metadataFileService.GetFilesBySeries(series.Id);
+            var metadataFiles = _metadataFileService.GetFilesBySeries(author.Id);
             var movedFiles = new List<MetadataFile>();
 
             // TODO: Move EpisodeImage and EpisodeMetadata metadata files, instead of relying on consumers to do it
@@ -197,21 +197,21 @@ public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<
 
             foreach (var consumer in _metadataFactory.GetAvailableProviders())
             {
-                foreach (var episodeFile in episodeFiles)
+                foreach (var editionFile in editionFiles)
                 {
-                    var metadataFilesForConsumer = GetMetadataFilesForConsumer(consumer, metadataFiles).Where(m => m.EpisodeFileId == episodeFile.Id).ToList();
+                    var metadataFilesForConsumer = GetMetadataFilesForConsumer(consumer, metadataFiles).Where(m => m.EditionFileId == editionFile.Id).ToList();
 
                     foreach (var metadataFile in metadataFilesForConsumer)
                     {
-                        var newFileName = consumer.GetFilenameAfterMove(series, episodeFile, metadataFile);
-                        var existingFileName = Path.Combine(series.Path, metadataFile.RelativePath);
+                        var newFileName = consumer.GetFilenameAfterMove(author, editionFile, metadataFile);
+                        var existingFileName = Path.Combine(author.Path, metadataFile.RelativePath);
 
                         if (newFileName.PathNotEquals(existingFileName))
                         {
                             try
                             {
                                 _diskProvider.MoveFile(existingFileName, newFileName);
-                                metadataFile.RelativePath = series.Path.GetRelativePath(newFileName);
+                                metadataFile.RelativePath = author.Path.GetRelativePath(newFileName);
                                 movedFiles.Add(metadataFile);
                             }
                             catch (Exception ex)
@@ -228,12 +228,12 @@ public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<
             return movedFiles;
         }
 
-        public override bool CanImportFile(LocalEpisode localEpisode, EpisodeFile episodeFile, string path, string extension, bool readOnly)
+        public override bool CanImportFile(LocalEpisode localEpisode, EditionFile editionFile, string path, string extension, bool readOnly)
         {
             return false;
         }
 
-        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, List<string> files, bool isReadOnly)
+        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EditionFile editionFile, List<string> files, bool isReadOnly)
         {
             return Enumerable.Empty<ExtraFile>();
         }
@@ -243,9 +243,9 @@ private List<MetadataFile> GetMetadataFilesForConsumer(IMetadata consumer, List<
             return seriesMetadata.Where(c => c.Consumer == consumer.GetType().Name).ToList();
         }
 
-        private MetadataFile ProcessSeriesMetadata(IMetadata consumer, Series series, List<MetadataFile> existingMetadataFiles, SeriesMetadataReason reason)
+        private MetadataFile ProcessSeriesMetadata(IMetadata consumer, Author author, List<MetadataFile> existingMetadataFiles, SeriesMetadataReason reason)
         {
-            var seriesMetadata = consumer.SeriesMetadata(series, reason);
+            var seriesMetadata = consumer.SeriesMetadata(author, reason);
 
             if (seriesMetadata == null)
             {
@@ -254,10 +254,10 @@ private MetadataFile ProcessSeriesMetadata(IMetadata consumer, Series series, Li
 
             var hash = seriesMetadata.Contents.SHA256Hash();
 
-            var metadata = GetMetadataFile(series, existingMetadataFiles, e => e.Type == MetadataType.SeriesMetadata) ??
+            var metadata = GetMetadataFile(author, existingMetadataFiles, e => e.Type == MetadataType.SeriesMetadata) ??
                                new MetadataFile
                                {
-                                   SeriesId = series.Id,
+                                   SeriesId = author.Id,
                                    Consumer = consumer.GetType().Name,
                                    Type = MetadataType.SeriesMetadata
                                };
@@ -274,9 +274,9 @@ private MetadataFile ProcessSeriesMetadata(IMetadata consumer, Series series, Li
                 return null;
             }
 
-            var fullPath = Path.Combine(series.Path, seriesMetadata.RelativePath);
+            var fullPath = Path.Combine(author.Path, seriesMetadata.RelativePath);
 
-            _logger.Debug("Writing Series Metadata to: {0}", fullPath);
+            _logger.Debug("Writing Author Metadata to: {0}", fullPath);
             SaveMetadataFile(fullPath, seriesMetadata.Contents);
 
             metadata.Hash = hash;
@@ -286,25 +286,25 @@ private MetadataFile ProcessSeriesMetadata(IMetadata consumer, Series series, Li
             return metadata;
         }
 
-        private MetadataFile ProcessEpisodeMetadata(IMetadata consumer, Series series, EpisodeFile episodeFile, List<MetadataFile> existingMetadataFiles)
+        private MetadataFile ProcessEpisodeMetadata(IMetadata consumer, Author author, EditionFile editionFile, List<MetadataFile> existingMetadataFiles)
         {
-            var episodeMetadata = consumer.EpisodeMetadata(series, episodeFile);
+            var episodeMetadata = consumer.EpisodeMetadata(author, editionFile);
 
             if (episodeMetadata == null)
             {
                 return null;
             }
 
-            var fullPath = Path.Combine(series.Path, episodeMetadata.RelativePath);
+            var fullPath = Path.Combine(author.Path, episodeMetadata.RelativePath);
 
-            _otherExtraFileRenamer.RenameOtherExtraFile(series, fullPath);
+            _otherExtraFileRenamer.RenameOtherExtraFile(author, fullPath);
 
-            var existingMetadata = GetMetadataFile(series, existingMetadataFiles, c => c.Type == MetadataType.EpisodeMetadata &&
-                                                                                  c.EpisodeFileId == episodeFile.Id);
+            var existingMetadata = GetMetadataFile(author, existingMetadataFiles, c => c.Type == MetadataType.EpisodeMetadata &&
+                                                                                  c.EditionFileId == editionFile.Id);
 
             if (existingMetadata != null)
             {
-                var existingFullPath = Path.Combine(series.Path, existingMetadata.RelativePath);
+                var existingFullPath = Path.Combine(author.Path, existingMetadata.RelativePath);
                 if (fullPath.PathNotEquals(existingFullPath))
                 {
                     _diskTransferService.TransferFile(existingFullPath, fullPath, TransferMode.Move);
@@ -317,9 +317,9 @@ private MetadataFile ProcessEpisodeMetadata(IMetadata consumer, Series series, E
             var metadata = existingMetadata ??
                            new MetadataFile
                            {
-                               SeriesId = series.Id,
-                               SeasonNumber = episodeFile.SeasonNumber,
-                               EpisodeFileId = episodeFile.Id,
+                               SeriesId = author.Id,
+                               SeasonNumber = editionFile.SeasonNumber,
+                               EditionFileId = editionFile.Id,
                                Consumer = consumer.GetType().Name,
                                Type = MetadataType.EpisodeMetadata,
                                RelativePath = episodeMetadata.RelativePath,
@@ -331,7 +331,7 @@ private MetadataFile ProcessEpisodeMetadata(IMetadata consumer, Series series, E
                 return null;
             }
 
-            _logger.Debug("Writing Episode Metadata to: {0}", fullPath);
+            _logger.Debug("Writing Edition Metadata to: {0}", fullPath);
             SaveMetadataFile(fullPath, episodeMetadata.Contents);
 
             metadata.Hash = hash;
@@ -339,34 +339,34 @@ private MetadataFile ProcessEpisodeMetadata(IMetadata consumer, Series series, E
             return metadata;
         }
 
-        private List<MetadataFile> ProcessSeriesImages(IMetadata consumer, Series series, List<MetadataFile> existingMetadataFiles)
+        private List<MetadataFile> ProcessSeriesImages(IMetadata consumer, Author author, List<MetadataFile> existingMetadataFiles)
         {
             var result = new List<MetadataFile>();
 
-            foreach (var image in consumer.SeriesImages(series))
+            foreach (var image in consumer.SeriesImages(author))
             {
-                var fullPath = Path.Combine(series.Path, image.RelativePath);
+                var fullPath = Path.Combine(author.Path, image.RelativePath);
 
                 if (_diskProvider.FileExists(fullPath))
                 {
-                    _logger.Debug("Series image already exists: {0}", fullPath);
+                    _logger.Debug("Author image already exists: {0}", fullPath);
                     continue;
                 }
 
-                _otherExtraFileRenamer.RenameOtherExtraFile(series, fullPath);
+                _otherExtraFileRenamer.RenameOtherExtraFile(author, fullPath);
 
-                var metadata = GetMetadataFile(series, existingMetadataFiles, c => c.Type == MetadataType.SeriesImage &&
+                var metadata = GetMetadataFile(author, existingMetadataFiles, c => c.Type == MetadataType.SeriesImage &&
                                                                               c.RelativePath == image.RelativePath) ??
                                new MetadataFile
                                {
-                                   SeriesId = series.Id,
+                                   SeriesId = author.Id,
                                    Consumer = consumer.GetType().Name,
                                    Type = MetadataType.SeriesImage,
                                    RelativePath = image.RelativePath,
                                    Extension = Path.GetExtension(fullPath)
                                };
 
-                DownloadImage(series, image);
+                DownloadImage(author, image);
 
                 result.Add(metadata);
             }
@@ -374,38 +374,38 @@ private List<MetadataFile> ProcessSeriesImages(IMetadata consumer, Series series
             return result;
         }
 
-        private List<MetadataFile> ProcessSeasonImages(IMetadata consumer, Series series, List<MetadataFile> existingMetadataFiles)
+        private List<MetadataFile> ProcessSeasonImages(IMetadata consumer, Author author, List<MetadataFile> existingMetadataFiles)
         {
             var result = new List<MetadataFile>();
 
-            foreach (var season in series.Seasons)
+            foreach (var book in author.Books)
             {
-                foreach (var image in consumer.SeasonImages(series, season))
+                foreach (var image in consumer.SeasonImages(author, book))
                 {
-                    var fullPath = Path.Combine(series.Path, image.RelativePath);
+                    var fullPath = Path.Combine(author.Path, image.RelativePath);
 
                     if (_diskProvider.FileExists(fullPath))
                     {
-                        _logger.Debug("Season image already exists: {0}", fullPath);
+                        _logger.Debug("Book image already exists: {0}", fullPath);
                         continue;
                     }
 
-                    _otherExtraFileRenamer.RenameOtherExtraFile(series, fullPath);
+                    _otherExtraFileRenamer.RenameOtherExtraFile(author, fullPath);
 
-                    var metadata = GetMetadataFile(series, existingMetadataFiles, c => c.Type == MetadataType.SeasonImage &&
-                                                                                  c.SeasonNumber == season.SeasonNumber &&
+                    var metadata = GetMetadataFile(author, existingMetadataFiles, c => c.Type == MetadataType.SeasonImage &&
+                                                                                  c.SeasonNumber == book.SeasonNumber &&
                                                                                   c.RelativePath == image.RelativePath) ??
                                 new MetadataFile
                                 {
-                                    SeriesId = series.Id,
-                                    SeasonNumber = season.SeasonNumber,
+                                    SeriesId = author.Id,
+                                    SeasonNumber = book.SeasonNumber,
                                     Consumer = consumer.GetType().Name,
                                     Type = MetadataType.SeasonImage,
                                     RelativePath = image.RelativePath,
                                     Extension = Path.GetExtension(fullPath)
                                 };
 
-                    DownloadImage(series, image);
+                    DownloadImage(author, image);
 
                     result.Add(metadata);
                 }
@@ -414,28 +414,28 @@ private List<MetadataFile> ProcessSeasonImages(IMetadata consumer, Series series
             return result;
         }
 
-        private List<MetadataFile> ProcessEpisodeImages(IMetadata consumer, Series series, EpisodeFile episodeFile, List<MetadataFile> existingMetadataFiles)
+        private List<MetadataFile> ProcessEpisodeImages(IMetadata consumer, Author author, EditionFile editionFile, List<MetadataFile> existingMetadataFiles)
         {
             var result = new List<MetadataFile>();
 
-            foreach (var image in consumer.EpisodeImages(series, episodeFile))
+            foreach (var image in consumer.EpisodeImages(author, editionFile))
             {
-                var fullPath = Path.Combine(series.Path, image.RelativePath);
+                var fullPath = Path.Combine(author.Path, image.RelativePath);
 
                 if (_diskProvider.FileExists(fullPath))
                 {
-                    _logger.Debug("Episode image already exists: {0}", fullPath);
+                    _logger.Debug("Edition image already exists: {0}", fullPath);
                     continue;
                 }
 
-                _otherExtraFileRenamer.RenameOtherExtraFile(series, fullPath);
+                _otherExtraFileRenamer.RenameOtherExtraFile(author, fullPath);
 
-                var existingMetadata = GetMetadataFile(series, existingMetadataFiles, c => c.Type == MetadataType.EpisodeImage &&
-                                                                                      c.EpisodeFileId == episodeFile.Id);
+                var existingMetadata = GetMetadataFile(author, existingMetadataFiles, c => c.Type == MetadataType.EpisodeImage &&
+                                                                                      c.EditionFileId == editionFile.Id);
 
                 if (existingMetadata != null)
                 {
-                    var existingFullPath = Path.Combine(series.Path, existingMetadata.RelativePath);
+                    var existingFullPath = Path.Combine(author.Path, existingMetadata.RelativePath);
                     if (fullPath.PathNotEquals(existingFullPath))
                     {
                         _diskTransferService.TransferFile(existingFullPath, fullPath, TransferMode.Move);
@@ -448,16 +448,16 @@ private List<MetadataFile> ProcessEpisodeImages(IMetadata consumer, Series serie
                 var metadata = existingMetadata ??
                                new MetadataFile
                                {
-                                   SeriesId = series.Id,
-                                   SeasonNumber = episodeFile.SeasonNumber,
-                                   EpisodeFileId = episodeFile.Id,
+                                   SeriesId = author.Id,
+                                   SeasonNumber = editionFile.SeasonNumber,
+                                   EditionFileId = editionFile.Id,
                                    Consumer = consumer.GetType().Name,
                                    Type = MetadataType.EpisodeImage,
                                    RelativePath = image.RelativePath,
                                    Extension = Path.GetExtension(fullPath)
                                };
 
-                DownloadImage(series, image);
+                DownloadImage(author, image);
 
                 result.Add(metadata);
             }
@@ -465,9 +465,9 @@ private List<MetadataFile> ProcessEpisodeImages(IMetadata consumer, Series serie
             return result;
         }
 
-        private void DownloadImage(Series series, ImageFileResult image)
+        private void DownloadImage(Author author, ImageFileResult image)
         {
-            var fullPath = Path.Combine(series.Path, image.RelativePath);
+            var fullPath = Path.Combine(author.Path, image.RelativePath);
             var downloaded = true;
 
             try
@@ -492,15 +492,15 @@ private void DownloadImage(Series series, ImageFileResult image)
             }
             catch (HttpException ex)
             {
-                _logger.Warn(ex, "Couldn't download image {0} for {1}. {2}", image.Url, series, ex.Message);
+                _logger.Warn(ex, "Couldn't download image {0} for {1}. {2}", image.Url, author, ex.Message);
             }
             catch (WebException ex)
             {
-                _logger.Warn(ex, "Couldn't download image {0} for {1}. {2}", image.Url, series, ex.Message);
+                _logger.Warn(ex, "Couldn't download image {0} for {1}. {2}", image.Url, author, ex.Message);
             }
             catch (Exception ex)
             {
-                _logger.Error(ex, "Couldn't download image {0} for {1}. {2}", image.Url, series, ex.Message);
+                _logger.Error(ex, "Couldn't download image {0} for {1}. {2}", image.Url, author, ex.Message);
             }
         }
 
@@ -510,7 +510,7 @@ private void SaveMetadataFile(string path, string contents)
             _mediaFileAttributeService.SetFilePermissions(path);
         }
 
-        private MetadataFile GetMetadataFile(Series series, List<MetadataFile> existingMetadataFiles, Func<MetadataFile, bool> predicate)
+        private MetadataFile GetMetadataFile(Author author, List<MetadataFile> existingMetadataFiles, Func<MetadataFile, bool> predicate)
         {
             var matchingMetadataFiles = existingMetadataFiles.Where(predicate).ToList();
 
@@ -522,11 +522,11 @@ private MetadataFile GetMetadataFile(Series series, List<MetadataFile> existingM
             // Remove duplicate metadata files from DB and disk
             foreach (var file in matchingMetadataFiles.Skip(1))
             {
-                var path = Path.Combine(series.Path, file.RelativePath);
+                var path = Path.Combine(author.Path, file.RelativePath);
 
                 _logger.Debug("Removing duplicate Metadata file: {0}", path);
 
-                var subfolder = _diskProvider.GetParentFolder(series.Path).GetRelativePath(_diskProvider.GetParentFolder(path));
+                var subfolder = _diskProvider.GetParentFolder(author.Path).GetRelativePath(_diskProvider.GetParentFolder(path));
                 _recycleBinProvider.DeleteFile(path, subfolder);
                 _metadataFileService.Delete(file.Id);
             }
diff --git a/src/NzbDrone.Core/Extras/Others/ExistingOtherExtraImporter.cs b/src/NzbDrone.Core/Extras/Others/ExistingOtherExtraImporter.cs
index 9b852da7c..b59637f61 100644
--- a/src/NzbDrone.Core/Extras/Others/ExistingOtherExtraImporter.cs
+++ b/src/NzbDrone.Core/Extras/Others/ExistingOtherExtraImporter.cs
@@ -2,7 +2,7 @@
 using System.IO;
 using System.Linq;
 using NLog;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Extensions;
 using Readarr.Core.Extras.Files;
 using Readarr.Core.MediaFiles.EpisodeImport.Aggregation;
 using Readarr.Core.Parser.Model;
@@ -28,12 +28,12 @@ public ExistingOtherExtraImporter(IExtraFileService<OtherExtraFile> otherExtraFi
 
         public override int Order => 2;
 
-        public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
+        public override IEnumerable<ExtraFile> ProcessFiles(Author author, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
         {
-            _logger.Debug("Looking for existing extra files in {0}", series.Path);
+            _logger.Debug("Looking for existing extra files in {0}", author.Path);
 
             var extraFiles = new List<OtherExtraFile>();
-            var filterResult = FilterAndClean(series, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
+            var filterResult = FilterAndClean(author, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
 
             foreach (var possibleExtraFile in filterResult.FilesOnDisk)
             {
@@ -48,7 +48,7 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                 var localEpisode = new LocalEpisode
                                    {
                                        FileEpisodeInfo = Parser.Parser.ParsePath(possibleExtraFile),
-                                       Series = series,
+                                       Author = author,
                                        Path = possibleExtraFile
                                    };
 
@@ -62,13 +62,13 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                     continue;
                 }
 
-                if (localEpisode.Episodes.Empty())
+                if (localEpisode.Editions.Empty())
                 {
-                    _logger.Debug("Cannot find related episodes for: {0}", possibleExtraFile);
+                    _logger.Debug("Cannot find related editions for: {0}", possibleExtraFile);
                     continue;
                 }
 
-                if (localEpisode.Episodes.DistinctBy(e => e.EpisodeFileId).Count() > 1)
+                if (localEpisode.Editions.DistinctBy(e => e.EditionFileId).Count() > 1)
                 {
                     _logger.Debug("Extra file: {0} does not match existing files.", possibleExtraFile);
                     continue;
@@ -76,10 +76,10 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
 
                 var extraFile = new OtherExtraFile
                 {
-                    SeriesId = series.Id,
+                    SeriesId = author.Id,
                     SeasonNumber = localEpisode.SeasonNumber,
-                    EpisodeFileId = localEpisode.Episodes.First().EpisodeFileId,
-                    RelativePath = series.Path.GetRelativePath(possibleExtraFile),
+                    EditionFileId = localEpisode.Editions.First().EditionFileId,
+                    RelativePath = author.Path.GetRelativePath(possibleExtraFile),
                     Extension = extension
                 };
 
diff --git a/src/NzbDrone.Core/Extras/Others/OtherExtraFileRenamer.cs b/src/NzbDrone.Core/Extras/Others/OtherExtraFileRenamer.cs
index 395c355d0..6e2304685 100644
--- a/src/NzbDrone.Core/Extras/Others/OtherExtraFileRenamer.cs
+++ b/src/NzbDrone.Core/Extras/Others/OtherExtraFileRenamer.cs
@@ -1,7 +1,7 @@
 ﻿using System.IO;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.Extensions;
 using Readarr.Core.MediaFiles;
 using Readarr.Core.Tv;
 
@@ -9,7 +9,7 @@ namespace Readarr.Core.Extras.Others
 {
     public interface IOtherExtraFileRenamer
     {
-        void RenameOtherExtraFile(Series series, string path);
+        void RenameOtherExtraFile(Author author, string path);
     }
 
     public class OtherExtraFileRenamer : IOtherExtraFileRenamer
@@ -33,22 +33,22 @@ public OtherExtraFileRenamer(IOtherExtraFileService otherExtraFileService,
             _otherExtraFileService = otherExtraFileService;
         }
 
-        public void RenameOtherExtraFile(Series series, string path)
+        public void RenameOtherExtraFile(Author author, string path)
         {
             if (!_diskProvider.FileExists(path))
             {
                 return;
             }
 
-            var relativePath = series.Path.GetRelativePath(path);
-            var otherExtraFile = _otherExtraFileService.FindByPath(series.Id, relativePath);
+            var relativePath = author.Path.GetRelativePath(path);
+            var otherExtraFile = _otherExtraFileService.FindByPath(author.Id, relativePath);
 
             if (otherExtraFile != null)
             {
                 var newPath = path + "-orig";
 
                 // Recycle an existing -orig file.
-                RemoveOtherExtraFile(series, newPath);
+                RemoveOtherExtraFile(author, newPath);
 
                 // Rename the file to .*-orig
                 _diskProvider.MoveFile(path, newPath);
@@ -58,15 +58,15 @@ public void RenameOtherExtraFile(Series series, string path)
             }
         }
 
-        private void RemoveOtherExtraFile(Series series, string path)
+        private void RemoveOtherExtraFile(Author author, string path)
         {
             if (!_diskProvider.FileExists(path))
             {
                 return;
             }
 
-            var relativePath = series.Path.GetRelativePath(path);
-            var otherExtraFile = _otherExtraFileService.FindByPath(series.Id, relativePath);
+            var relativePath = author.Path.GetRelativePath(path);
+            var otherExtraFile = _otherExtraFileService.FindByPath(author.Id, relativePath);
 
             if (otherExtraFile != null)
             {
diff --git a/src/NzbDrone.Core/Extras/Others/OtherExtraFileService.cs b/src/NzbDrone.Core/Extras/Others/OtherExtraFileService.cs
index 355be97b6..51782ffac 100644
--- a/src/NzbDrone.Core/Extras/Others/OtherExtraFileService.cs
+++ b/src/NzbDrone.Core/Extras/Others/OtherExtraFileService.cs
@@ -1,5 +1,5 @@
 ﻿using NLog;
-using Readarr.Common.Disk;
+using NzbDrone.Common.Disk;
 using Readarr.Core.Extras.Files;
 using Readarr.Core.MediaFiles;
 using Readarr.Core.Tv;
diff --git a/src/NzbDrone.Core/Extras/Others/OtherExtraService.cs b/src/NzbDrone.Core/Extras/Others/OtherExtraService.cs
index 9dbd18d74..644cf75a9 100644
--- a/src/NzbDrone.Core/Extras/Others/OtherExtraService.cs
+++ b/src/NzbDrone.Core/Extras/Others/OtherExtraService.cs
@@ -3,8 +3,8 @@
 using System.IO;
 using System.Linq;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.Extensions;
 using Readarr.Core.Configuration;
 using Readarr.Core.Extras.Files;
 using Readarr.Core.MediaFiles;
@@ -36,43 +36,43 @@ public OtherExtraService(IConfigService configService,
 
         public override int Order => 2;
 
-        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Author author)
         {
             return Enumerable.Empty<ExtraFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Author author, List<EditionFile> editionFiles)
         {
             return Enumerable.Empty<ExtraFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Author author)
         {
             return Enumerable.Empty<ExtraFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Author author, EditionFile editionFile)
         {
             return Enumerable.Empty<ExtraFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, string seriesFolder, string seasonFolder)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Author author, string seriesFolder, string seasonFolder)
         {
             return Enumerable.Empty<ExtraFile>();
         }
 
-        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Author author, List<EditionFile> editionFiles)
         {
-            var extraFiles = _otherExtraFileService.GetFilesBySeries(series.Id);
+            var extraFiles = _otherExtraFileService.GetFilesBySeries(author.Id);
             var movedFiles = new List<OtherExtraFile>();
 
-            foreach (var episodeFile in episodeFiles)
+            foreach (var editionFile in editionFiles)
             {
-                var extraFilesForEpisodeFile = extraFiles.Where(m => m.EpisodeFileId == episodeFile.Id).ToList();
+                var extraFilesForEditionFile = extraFiles.Where(m => m.EditionFileId == editionFile.Id).ToList();
 
-                foreach (var extraFile in extraFilesForEpisodeFile)
+                foreach (var extraFile in extraFilesForEditionFile)
                 {
-                    movedFiles.AddIfNotNull(MoveFile(series, episodeFile, extraFile));
+                    movedFiles.AddIfNotNull(MoveFile(author, editionFile, extraFile));
                 }
             }
 
@@ -81,15 +81,15 @@ public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<
             return movedFiles;
         }
 
-        public override bool CanImportFile(LocalEpisode localEpisode, EpisodeFile episodeFile, string path, string extension, bool readOnly)
+        public override bool CanImportFile(LocalEpisode localEpisode, EditionFile editionFile, string path, string extension, bool readOnly)
         {
             return true;
         }
 
-        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, List<string> files, bool isReadOnly)
+        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EditionFile editionFile, List<string> files, bool isReadOnly)
         {
             var importedFiles = new List<ExtraFile>();
-            var filteredFiles = files.Where(f => CanImportFile(localEpisode, episodeFile, f, Path.GetExtension(f), isReadOnly)).ToList();
+            var filteredFiles = files.Where(f => CanImportFile(localEpisode, editionFile, f, Path.GetExtension(f), isReadOnly)).ToList();
             var sourcePath = localEpisode.Path;
             var sourceFolder = _diskProvider.GetParentFolder(sourcePath);
             var sourceFileName = Path.GetFileNameWithoutExtension(sourcePath);
@@ -118,7 +118,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                         continue;
                     }
 
-                    // Season and episode match
+                    // Book and edition match
                     var fileEpisodeInfo = Parser.Parser.ParsePath(file) ?? new ParsedEpisodeInfo();
 
                     if (fileEpisodeInfo.EpisodeNumbers.Length == 0)
@@ -142,7 +142,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
             {
                 try
                 {
-                    var extraFile = ImportFile(localEpisode.Series, episodeFile, file, isReadOnly, Path.GetExtension(file), null);
+                    var extraFile = ImportFile(localEpisode.Author, editionFile, file, isReadOnly, Path.GetExtension(file), null);
                     _mediaFileAttributeService.SetFilePermissions(file);
                     _otherExtraFileService.Upsert(extraFile);
                     importedFiles.Add(extraFile);
diff --git a/src/NzbDrone.Core/Extras/Subtitles/ExistingSubtitleImporter.cs b/src/NzbDrone.Core/Extras/Subtitles/ExistingSubtitleImporter.cs
index 631c92be3..4a02e5b62 100644
--- a/src/NzbDrone.Core/Extras/Subtitles/ExistingSubtitleImporter.cs
+++ b/src/NzbDrone.Core/Extras/Subtitles/ExistingSubtitleImporter.cs
@@ -29,12 +29,12 @@ public ExistingSubtitleImporter(IExtraFileService<SubtitleFile> subtitleFileServ
 
         public override int Order => 1;
 
-        public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
+        public override IEnumerable<ExtraFile> ProcessFiles(Author author, List<string> filesOnDisk, List<string> importedFiles, string fileNameBeforeRename)
         {
-            _logger.Debug("Looking for existing subtitle files in {0}", series.Path);
+            _logger.Debug("Looking for existing subtitle files in {0}", author.Path);
 
             var subtitleFiles = new List<SubtitleFile>();
-            var filterResult = FilterAndClean(series, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
+            var filterResult = FilterAndClean(author, filesOnDisk, importedFiles, fileNameBeforeRename is not null);
 
             foreach (var possibleSubtitleFile in filterResult.FilesOnDisk)
             {
@@ -45,7 +45,7 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                     var localEpisode = new LocalEpisode
                     {
                         FileEpisodeInfo = Parser.Parser.ParsePath(possibleSubtitleFile),
-                        Series = series,
+                        Author = author,
                         Path = possibleSubtitleFile,
                         FileNameBeforeRename = fileNameBeforeRename
                     };
@@ -60,26 +60,26 @@ public override IEnumerable<ExtraFile> ProcessFiles(Series series, List<string>
                         continue;
                     }
 
-                    if (localEpisode.Episodes.Empty())
+                    if (localEpisode.Editions.Empty())
                     {
-                        _logger.Debug("Cannot find related episodes for: {0}", possibleSubtitleFile);
+                        _logger.Debug("Cannot find related editions for: {0}", possibleSubtitleFile);
                         continue;
                     }
 
-                    if (localEpisode.Episodes.DistinctBy(e => e.EpisodeFileId).Count() > 1)
+                    if (localEpisode.Editions.DistinctBy(e => e.EditionFileId).Count() > 1)
                     {
                         _logger.Debug("Subtitle file: {0} does not match existing files.", possibleSubtitleFile);
                         continue;
                     }
 
-                    var firstEpisode = localEpisode.Episodes.First();
+                    var firstEpisode = localEpisode.Editions.First();
 
                     var subtitleFile = new SubtitleFile
                                        {
-                                           SeriesId = series.Id,
+                                           SeriesId = author.Id,
                                            SeasonNumber = localEpisode.SeasonNumber,
-                                           EpisodeFileId = firstEpisode.EpisodeFileId,
-                                           RelativePath = series.Path.GetRelativePath(possibleSubtitleFile),
+                                           EditionFileId = firstEpisode.EditionFileId,
+                                           RelativePath = author.Path.GetRelativePath(possibleSubtitleFile),
                                            Language = localEpisode.SubtitleInfo?.Language ?? Language.Unknown,
                                            LanguageTags = localEpisode.SubtitleInfo?.LanguageTags ?? new List<string>(),
                                            Title = localEpisode.SubtitleInfo?.Title,
diff --git a/src/NzbDrone.Core/Extras/Subtitles/SubtitleService.cs b/src/NzbDrone.Core/Extras/Subtitles/SubtitleService.cs
index 18e4cbdca..f09cc521f 100644
--- a/src/NzbDrone.Core/Extras/Subtitles/SubtitleService.cs
+++ b/src/NzbDrone.Core/Extras/Subtitles/SubtitleService.cs
@@ -43,43 +43,43 @@ public SubtitleService(IConfigService configService,
 
         public override int Order => 1;
 
-        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterMediaCoverUpdate(Author author)
         {
             return Enumerable.Empty<SubtitleFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> CreateAfterSeriesScan(Author author, List<EditionFile> editionFiles)
         {
             return Enumerable.Empty<SubtitleFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Series series)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodesImported(Author author)
         {
             return Enumerable.Empty<SubtitleFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Series series, EpisodeFile episodeFile)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeImport(Author author, EditionFile editionFile)
         {
             return Enumerable.Empty<SubtitleFile>();
         }
 
-        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Series series, string seriesFolder, string seasonFolder)
+        public override IEnumerable<ExtraFile> CreateAfterEpisodeFolder(Author author, string seriesFolder, string seasonFolder)
         {
             return Enumerable.Empty<SubtitleFile>();
         }
 
-        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<EpisodeFile> episodeFiles)
+        public override IEnumerable<ExtraFile> MoveFilesAfterRename(Author author, List<EditionFile> editionFiles)
         {
-            var subtitleFiles = _subtitleFileService.GetFilesBySeries(series.Id);
+            var subtitleFiles = _subtitleFileService.GetFilesBySeries(author.Id);
 
             var movedFiles = new List<SubtitleFile>();
 
-            foreach (var episodeFile in episodeFiles)
+            foreach (var editionFile in editionFiles)
             {
-                var groupedExtraFilesForEpisodeFile = subtitleFiles.Where(m => m.EpisodeFileId == episodeFile.Id)
+                var groupedExtraFilesForEditionFile = subtitleFiles.Where(m => m.EditionFileId == editionFile.Id)
                                                             .GroupBy(s => s.AggregateString).ToList();
 
-                foreach (var group in groupedExtraFilesForEpisodeFile)
+                foreach (var group in groupedExtraFilesForEditionFile)
                 {
                     var multipleCopies = group.Count() > 1;
                     var orderedGroup = group.OrderBy(s => -s.Copy).ToList();
@@ -94,7 +94,7 @@ public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<
 
                         var suffix = GetSuffix(subtitleFile.Language, subtitleFile.Copy, subtitleFile.LanguageTags, multipleCopies, subtitleFile.Title);
 
-                        movedFiles.AddIfNotNull(MoveFile(series, episodeFile, subtitleFile, suffix));
+                        movedFiles.AddIfNotNull(MoveFile(author, editionFile, subtitleFile, suffix));
                     }
                 }
             }
@@ -104,16 +104,16 @@ public override IEnumerable<ExtraFile> MoveFilesAfterRename(Series series, List<
             return movedFiles;
         }
 
-        public override bool CanImportFile(LocalEpisode localEpisode, EpisodeFile episodeFile, string path, string extension, bool readOnly)
+        public override bool CanImportFile(LocalEpisode localEpisode, EditionFile editionFile, string path, string extension, bool readOnly)
         {
             return SubtitleFileExtensions.Extensions.Contains(extension.ToLowerInvariant());
         }
 
-        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EpisodeFile episodeFile, List<string> files, bool isReadOnly)
+        public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, EditionFile editionFile, List<string> files, bool isReadOnly)
         {
             var importedFiles = new List<SubtitleFile>();
 
-            var filteredFiles = files.Where(f => CanImportFile(localEpisode, episodeFile, f, Path.GetExtension(f), isReadOnly)).ToList();
+            var filteredFiles = files.Where(f => CanImportFile(localEpisode, editionFile, f, Path.GetExtension(f), isReadOnly)).ToList();
 
             var sourcePath = localEpisode.Path;
             var sourceFolder = _diskProvider.GetParentFolder(sourcePath);
@@ -132,7 +132,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                         continue;
                     }
 
-                    // Season and episode match
+                    // Book and edition match
                     var fileEpisodeInfo = Parser.Parser.ParsePath(file) ?? new ParsedEpisodeInfo();
 
                     if (fileEpisodeInfo.EpisodeNumbers.Length == 0)
@@ -152,7 +152,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                 }
             }
 
-            // Use any sub if only episode in folder
+            // Use any sub if only edition in folder
             if (matchingFiles.Count == 0 && filteredFiles.Count > 0)
             {
                 var videoFiles = _diskProvider.GetFiles(sourceFolder, true)
@@ -167,7 +167,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                 // Filter out samples
                 videoFiles = videoFiles.Where(file =>
                 {
-                    var sample = _detectSample.IsSample(localEpisode.Series, file, false);
+                    var sample = _detectSample.IsSample(localEpisode.Author, file, false);
 
                     if (sample == DetectSampleResult.Sample)
                     {
@@ -181,7 +181,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                 {
                     matchingFiles.AddRange(filteredFiles);
 
-                    _logger.Warn("Imported any available subtitle file for episode: {0}", localEpisode);
+                    _logger.Warn("Imported any available subtitle file for edition: {0}", localEpisode);
                 }
             }
 
@@ -217,7 +217,7 @@ public override IEnumerable<ExtraFile> ImportFiles(LocalEpisode localEpisode, Ep
                     var suffix = GetSuffix(language, copy, file.LanguageTags, groupCount > 1);
                     try
                     {
-                        var subtitleFile = ImportFile(localEpisode.Series, episodeFile, path, isReadOnly, extension, suffix);
+                        var subtitleFile = ImportFile(localEpisode.Author, editionFile, path, isReadOnly, extension, suffix);
                         subtitleFile.Language = language;
                         subtitleFile.LanguageTags = file.LanguageTags;
 
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/AggregationFailedException.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/AggregationFailedException.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/AggregationFailedException.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/AggregationFailedException.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/AggregationService.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/AggregationService.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/AggregationService.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/AggregationService.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateEpisodes.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateEpisodes.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateEpisodes.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateEpisodes.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateLanguage.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateLanguage.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateLanguage.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateLanguage.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateQuality.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateQuality.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateQuality.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateQuality.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseGroup.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseGroup.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseGroup.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseGroup.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseHash.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseHash.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseHash.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseHash.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseInfo.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseInfo.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateReleaseInfo.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateReleaseInfo.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateSubtitleInfo.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateSubtitleInfo.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/AggregateSubtitleInfo.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/AggregateSubtitleInfo.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromDownloadClientItem.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromDownloadClientItem.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromDownloadClientItem.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromDownloadClientItem.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFileName.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFileName.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFileName.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFileName.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFolder.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFolder.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFolder.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromFolder.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfo.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfo.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfo.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageFromMediaInfo.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageResult.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageResult.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageResult.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/AugmentLanguageResult.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/Confidence.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/Confidence.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/Confidence.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/Confidence.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/IAugmentLanguage.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/IAugmentLanguage.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Language/IAugmentLanguage.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Language/IAugmentLanguage.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromDownloadClientItem.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromDownloadClientItem.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromDownloadClientItem.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromDownloadClientItem.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFileName.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFileName.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFileName.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFileName.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFolder.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFolder.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFolder.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromFolder.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfo.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfo.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfo.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromMediaInfo.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseName.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseName.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseName.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityFromReleaseName.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityResult.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityResult.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityResult.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/AugmentQualityResult.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/Confidence.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/Confidence.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/Confidence.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/Confidence.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/IAugmentQuality.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/IAugmentQuality.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/Augmenters/Quality/IAugmentQuality.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/Augmenters/Quality/IAugmentQuality.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/IAggregateLocalEpisode.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/IAggregateLocalEpisode.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Aggregation/Aggregators/IAggregateLocalEpisode.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Aggregation/Aggregators/IAggregateLocalEpisode.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/DetectSample.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/DetectSample.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/DetectSample.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/DetectSample.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/DetectSampleResult.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/DetectSampleResult.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/DetectSampleResult.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/DetectSampleResult.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/EpisodeTitleRequiredType.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/EpisodeTitleRequiredType.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/EpisodeTitleRequiredType.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/EpisodeTitleRequiredType.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/IImportDecisionEngineSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/IImportDecisionEngineSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/IImportDecisionEngineSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/IImportDecisionEngineSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportApprovedEpisodes.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportApprovedEpisodes.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportApprovedEpisodes.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportApprovedEpisodes.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecision.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportDecision.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecision.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportDecision.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportDecisionMaker.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportDecisionMaker.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportMode.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportMode.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportMode.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportMode.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportRejection.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportRejection.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportRejection.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportRejection.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportRejectionReason.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportRejectionReason.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportRejectionReason.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportRejectionReason.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportResult.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportResult.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportResult.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportResult.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportResultType.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportResultType.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportResultType.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportResultType.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportSpecDecision.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/ImportSpecDecision.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportSpecDecision.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/ImportSpecDecision.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportCommand.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportCommand.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportCommand.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportCommand.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportFile.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportFile.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportFile.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportFile.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportItem.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportItem.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportItem.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportItem.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportService.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManualImportService.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManuallyImportedFile.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManuallyImportedFile.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManuallyImportedFile.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Manual/ManuallyImportedFile.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/RecycleBinException.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/RecycleBinException.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/RecycleBinException.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/RecycleBinException.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/RootFolderNotFoundException.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/RootFolderNotFoundException.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/RootFolderNotFoundException.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/RootFolderNotFoundException.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/SceneNameCalculator.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/SceneNameCalculator.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/SceneNameCalculator.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/SceneNameCalculator.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/AbsoluteEpisodeNumberSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/AbsoluteEpisodeNumberSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/AbsoluteEpisodeNumberSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/AbsoluteEpisodeNumberSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/AlreadyImportedSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/AlreadyImportedSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/AlreadyImportedSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/AlreadyImportedSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/EpisodeTitleSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/EpisodeTitleSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/FreeSpaceSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/FreeSpaceSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/FreeSpaceSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/FreeSpaceSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/FullSeasonSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/FullSeasonSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/FullSeasonSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/FullSeasonSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/HasAudioTrackSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/HasAudioTrackSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/HasAudioTrackSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/HasAudioTrackSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/MatchesFolderSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/MatchesFolderSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/MatchesFolderSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/MatchesFolderSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/MatchesGrabSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/MatchesGrabSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/MatchesGrabSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/MatchesGrabSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/NotSampleSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/NotSampleSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/NotSampleSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/NotSampleSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/NotUnpackingSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/NotUnpackingSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/NotUnpackingSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/NotUnpackingSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/SameEpisodesImportSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/SameEpisodesImportSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/SameEpisodesImportSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/SameEpisodesImportSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/SplitEpisodeSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/SplitEpisodeSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/SplitEpisodeSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/SplitEpisodeSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/UnverifiedSceneNumberingSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/UnverifiedSceneNumberingSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/UnverifiedSceneNumberingSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/UnverifiedSceneNumberingSpecification.cs
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/UpgradeSpecification.cs b/src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/UpgradeSpecification.cs
similarity index 100%
rename from src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/UpgradeSpecification.cs
rename to src/NzbDrone.Core/MediaFiles/EditionImport/Specifications/UpgradeSpecification.cs
diff --git a/src/NzbDrone.Host/AccessControl/FirewallAdapter.cs b/src/NzbDrone.Host/AccessControl/FirewallAdapter.cs
index a8a43fba2..97ba51394 100644
--- a/src/NzbDrone.Host/AccessControl/FirewallAdapter.cs
+++ b/src/NzbDrone.Host/AccessControl/FirewallAdapter.cs
@@ -2,7 +2,7 @@
 using System.Linq;
 using NetFwTypeLib;
 using NLog;
-using Readarr.Common.EnvironmentInfo;
+using NzbDrone.Common.EnvironmentInfo;
 using Readarr.Core.Configuration;
 
 namespace Readarr.Host.AccessControl
@@ -77,7 +77,7 @@ private void OpenFirewallPort(int portNumber)
                 var netFwMgrType = Type.GetTypeFromProgID("HNetCfg.FwMgr", false);
                 var mgr = (INetFwMgr)Activator.CreateInstance(netFwMgrType);
 
-                // Open the port for the standard profile, should help when the user has multiple network adapters
+                // Open the port for the standard profile, should help when the user has multiple publisher adapters
                 mgr.LocalPolicy.GetProfileByType(FIREWALL_PROFILE).GloballyOpenPorts.Add(port);
             }
             catch (Exception ex)
diff --git a/src/NzbDrone.Host/AccessControl/RemoteAccessAdapter.cs b/src/NzbDrone.Host/AccessControl/RemoteAccessAdapter.cs
index b4e866068..176a47e1f 100644
--- a/src/NzbDrone.Host/AccessControl/RemoteAccessAdapter.cs
+++ b/src/NzbDrone.Host/AccessControl/RemoteAccessAdapter.cs
@@ -1,4 +1,4 @@
-using Readarr.Common.EnvironmentInfo;
+using NzbDrone.Common.EnvironmentInfo;
 
 namespace Readarr.Host.AccessControl
 {
diff --git a/src/NzbDrone.Host/AccessControl/RemoteAccessException.cs b/src/NzbDrone.Host/AccessControl/RemoteAccessException.cs
index a05a61df2..ceee39167 100644
--- a/src/NzbDrone.Host/AccessControl/RemoteAccessException.cs
+++ b/src/NzbDrone.Host/AccessControl/RemoteAccessException.cs
@@ -1,5 +1,5 @@
 using System;
-using Readarr.Common.Exceptions;
+using NzbDrone.Common.Exceptions;
 
 namespace Readarr.Host.AccessControl
 {
diff --git a/src/NzbDrone.Host/AppLifetime.cs b/src/NzbDrone.Host/AppLifetime.cs
index b097330a6..5421b6820 100644
--- a/src/NzbDrone.Host/AppLifetime.cs
+++ b/src/NzbDrone.Host/AppLifetime.cs
@@ -2,8 +2,8 @@
 using System.Threading.Tasks;
 using Microsoft.Extensions.Hosting;
 using NLog;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Processes;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Processes;
 using Readarr.Core.Configuration;
 using Readarr.Core.Lifecycle;
 using Readarr.Core.Messaging.Events;
diff --git a/src/NzbDrone.Host/Bootstrap.cs b/src/NzbDrone.Host/Bootstrap.cs
index 9a4164765..0af763fd0 100644
--- a/src/NzbDrone.Host/Bootstrap.cs
+++ b/src/NzbDrone.Host/Bootstrap.cs
@@ -14,13 +14,13 @@
 using Microsoft.Extensions.Hosting.WindowsServices;
 using Microsoft.Extensions.Logging;
 using NLog;
-using Readarr.Common.Composition.Extensions;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Exceptions;
-using Readarr.Common.Extensions;
-using Readarr.Common.Instrumentation;
-using Readarr.Common.Instrumentation.Extensions;
-using Readarr.Common.Options;
+using NzbDrone.Common.Composition.Extensions;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Exceptions;
+using NzbDrone.Common.Extensions;
+using NzbDrone.Common.Instrumentation;
+using NzbDrone.Common.Instrumentation.Extensions;
+using NzbDrone.Common.Options;
 using Readarr.Core.Configuration;
 using Readarr.Core.Datastore.Extensions;
 using LogLevel = Microsoft.Extensions.Logging.LogLevel;
diff --git a/src/NzbDrone.Host/BrowserService.cs b/src/NzbDrone.Host/BrowserService.cs
index 652e37434..8787b5713 100644
--- a/src/NzbDrone.Host/BrowserService.cs
+++ b/src/NzbDrone.Host/BrowserService.cs
@@ -1,7 +1,7 @@
 ﻿using System;
 using NLog;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Processes;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Processes;
 using Readarr.Core.Configuration;
 
 namespace Readarr.Host
diff --git a/src/NzbDrone.Host/SingleInstancePolicy.cs b/src/NzbDrone.Host/SingleInstancePolicy.cs
index 6bd8d9f48..bb4b09bb5 100644
--- a/src/NzbDrone.Host/SingleInstancePolicy.cs
+++ b/src/NzbDrone.Host/SingleInstancePolicy.cs
@@ -2,7 +2,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using NLog;
-using Readarr.Common.Processes;
+using NzbDrone.Common.Processes;
 
 namespace Readarr.Host
 {
diff --git a/src/NzbDrone.Host/Startup.cs b/src/NzbDrone.Host/Startup.cs
index 231bb6552..8104f9c7b 100644
--- a/src/NzbDrone.Host/Startup.cs
+++ b/src/NzbDrone.Host/Startup.cs
@@ -14,10 +14,10 @@
 using Microsoft.Extensions.Logging;
 using Microsoft.OpenApi.Models;
 using NLog.Extensions.Logging;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Instrumentation;
-using Readarr.Common.Processes;
-using Readarr.Common.Serializer;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Instrumentation;
+using NzbDrone.Common.Processes;
+using NzbDrone.Common.Serializer;
 using Readarr.Core.Configuration;
 using Readarr.Core.Datastore;
 using Readarr.Core.Instrumentation;
@@ -26,7 +26,7 @@
 using Readarr.Host.AccessControl;
 using Readarr.Http.Authentication;
 using Readarr.SignalR;
-using Readarr.Api.V3.Series;
+using Readarr.Api.V3.Author;
 using Readarr.Api.V3.System;
 using Readarr.Http;
 using Readarr.Http.Authentication;
diff --git a/src/NzbDrone.Host/UtilityModeRouter.cs b/src/NzbDrone.Host/UtilityModeRouter.cs
index a5904099e..7e1883ba1 100644
--- a/src/NzbDrone.Host/UtilityModeRouter.cs
+++ b/src/NzbDrone.Host/UtilityModeRouter.cs
@@ -1,7 +1,7 @@
 using NLog;
-using Readarr.Common;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Processes;
+using NzbDrone.Common;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Processes;
 using Readarr.Host.AccessControl;
 using IServiceProvider = NzbDrone.Common.IServiceProvider;
 
diff --git a/src/NzbDrone.Integration.Test/ApiTests/SeriesEditorFixture.cs b/src/NzbDrone.Integration.Test/ApiTests/AuthorEditorFixture.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/ApiTests/SeriesEditorFixture.cs
rename to src/NzbDrone.Integration.Test/ApiTests/AuthorEditorFixture.cs
diff --git a/src/NzbDrone.Integration.Test/ApiTests/SeriesFixture.cs b/src/NzbDrone.Integration.Test/ApiTests/AuthorFixture.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/ApiTests/SeriesFixture.cs
rename to src/NzbDrone.Integration.Test/ApiTests/AuthorFixture.cs
diff --git a/src/NzbDrone.Integration.Test/ApiTests/SeriesLookupFixture.cs b/src/NzbDrone.Integration.Test/ApiTests/AuthorLookupFixture.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/ApiTests/SeriesLookupFixture.cs
rename to src/NzbDrone.Integration.Test/ApiTests/AuthorLookupFixture.cs
diff --git a/src/NzbDrone.Integration.Test/ApiTests/EpisodeFileFixture.cs b/src/NzbDrone.Integration.Test/ApiTests/EditionFileFixture.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/ApiTests/EpisodeFileFixture.cs
rename to src/NzbDrone.Integration.Test/ApiTests/EditionFileFixture.cs
diff --git a/src/NzbDrone.Integration.Test/ApiTests/EpisodeFixture.cs b/src/NzbDrone.Integration.Test/ApiTests/EditionFixture.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/ApiTests/EpisodeFixture.cs
rename to src/NzbDrone.Integration.Test/ApiTests/EditionFixture.cs
diff --git a/src/NzbDrone.Integration.Test/Client/SeriesClient.cs b/src/NzbDrone.Integration.Test/Client/AuthorClient.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/Client/SeriesClient.cs
rename to src/NzbDrone.Integration.Test/Client/AuthorClient.cs
diff --git a/src/NzbDrone.Integration.Test/Client/EpisodeClient.cs b/src/NzbDrone.Integration.Test/Client/EditionClient.cs
similarity index 100%
rename from src/NzbDrone.Integration.Test/Client/EpisodeClient.cs
rename to src/NzbDrone.Integration.Test/Client/EditionClient.cs
diff --git a/src/NzbDrone.Update/UpdateApp.cs b/src/NzbDrone.Update/UpdateApp.cs
index 079fd942a..aa17d580e 100644
--- a/src/NzbDrone.Update/UpdateApp.cs
+++ b/src/NzbDrone.Update/UpdateApp.cs
@@ -4,12 +4,12 @@
 using System.Linq;
 using DryIoc;
 using NLog;
-using Readarr.Common.Composition.Extensions;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Extensions;
-using Readarr.Common.Instrumentation;
-using Readarr.Common.Instrumentation.Extensions;
-using Readarr.Common.Processes;
+using NzbDrone.Common.Composition.Extensions;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Extensions;
+using NzbDrone.Common.Instrumentation;
+using NzbDrone.Common.Instrumentation.Extensions;
+using NzbDrone.Common.Processes;
 using Readarr.Update.UpdateEngine;
 
 namespace Readarr.Update
diff --git a/src/NzbDrone.Update/UpdateEngine/BackupAndRestore.cs b/src/NzbDrone.Update/UpdateEngine/BackupAndRestore.cs
index 079712a74..e1c29c5d9 100644
--- a/src/NzbDrone.Update/UpdateEngine/BackupAndRestore.cs
+++ b/src/NzbDrone.Update/UpdateEngine/BackupAndRestore.cs
@@ -1,7 +1,7 @@
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Extensions;
 
 namespace Readarr.Update.UpdateEngine
 {
diff --git a/src/NzbDrone.Update/UpdateEngine/BackupAppData.cs b/src/NzbDrone.Update/UpdateEngine/BackupAppData.cs
index ba7ad35d7..65b99e0b1 100644
--- a/src/NzbDrone.Update/UpdateEngine/BackupAppData.cs
+++ b/src/NzbDrone.Update/UpdateEngine/BackupAppData.cs
@@ -1,8 +1,8 @@
 ﻿using System;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Extensions;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Extensions;
 
 namespace Readarr.Update.UpdateEngine
 {
diff --git a/src/NzbDrone.Update/UpdateEngine/DetectApplicationType.cs b/src/NzbDrone.Update/UpdateEngine/DetectApplicationType.cs
index f6c7c4365..b59076b95 100644
--- a/src/NzbDrone.Update/UpdateEngine/DetectApplicationType.cs
+++ b/src/NzbDrone.Update/UpdateEngine/DetectApplicationType.cs
@@ -1,6 +1,6 @@
-using Readarr.Common;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Processes;
+using NzbDrone.Common;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Processes;
 
 namespace Readarr.Update.UpdateEngine
 {
diff --git a/src/NzbDrone.Update/UpdateEngine/InstallUpdateService.cs b/src/NzbDrone.Update/UpdateEngine/InstallUpdateService.cs
index c88adcada..a3c9bb173 100644
--- a/src/NzbDrone.Update/UpdateEngine/InstallUpdateService.cs
+++ b/src/NzbDrone.Update/UpdateEngine/InstallUpdateService.cs
@@ -1,10 +1,10 @@
 using System;
 using System.IO;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Extensions;
-using Readarr.Common.Processes;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Extensions;
+using NzbDrone.Common.Processes;
 
 namespace Readarr.Update.UpdateEngine
 {
diff --git a/src/NzbDrone.Update/UpdateEngine/StartNzbDrone.cs b/src/NzbDrone.Update/UpdateEngine/StartNzbDrone.cs
index c4b3e3ba9..696b59e2e 100644
--- a/src/NzbDrone.Update/UpdateEngine/StartNzbDrone.cs
+++ b/src/NzbDrone.Update/UpdateEngine/StartNzbDrone.cs
@@ -1,10 +1,10 @@
 using System;
 using System.IO;
 using NLog;
-using Readarr.Common;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Extensions;
-using Readarr.Common.Processes;
+using NzbDrone.Common;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Extensions;
+using NzbDrone.Common.Processes;
 using IServiceProvider = NzbDrone.Common.IServiceProvider;
 
 namespace Readarr.Update.UpdateEngine
diff --git a/src/NzbDrone.Update/UpdateEngine/TerminateNzbDrone.cs b/src/NzbDrone.Update/UpdateEngine/TerminateNzbDrone.cs
index 77cd9e090..a642c9cb8 100644
--- a/src/NzbDrone.Update/UpdateEngine/TerminateNzbDrone.cs
+++ b/src/NzbDrone.Update/UpdateEngine/TerminateNzbDrone.cs
@@ -1,8 +1,8 @@
 using System;
 using NLog;
-using Readarr.Common;
-using Readarr.Common.EnvironmentInfo;
-using Readarr.Common.Processes;
+using NzbDrone.Common;
+using NzbDrone.Common.EnvironmentInfo;
+using NzbDrone.Common.Processes;
 using IServiceProvider = NzbDrone.Common.IServiceProvider;
 
 namespace Readarr.Update.UpdateEngine
diff --git a/src/NzbDrone.Windows.Test/DiskProviderTests/DiskProviderFixture.cs b/src/NzbDrone.Windows.Test/DiskProviderTests/DiskProviderFixture.cs
index 22f2aeb1a..913007308 100644
--- a/src/NzbDrone.Windows.Test/DiskProviderTests/DiskProviderFixture.cs
+++ b/src/NzbDrone.Windows.Test/DiskProviderTests/DiskProviderFixture.cs
@@ -2,7 +2,7 @@
 using System.Security.AccessControl;
 using System.Security.Principal;
 using NUnit.Framework;
-using Readarr.Common.Test.DiskTests;
+using NzbDrone.Common.Test.DiskTests;
 using Readarr.Windows.Disk;
 
 namespace Readarr.Windows.Test.DiskProviderTests
diff --git a/src/NzbDrone.Windows.Test/DiskProviderTests/FreeSpaceFixture.cs b/src/NzbDrone.Windows.Test/DiskProviderTests/FreeSpaceFixture.cs
index 0936aef6f..b056983c4 100644
--- a/src/NzbDrone.Windows.Test/DiskProviderTests/FreeSpaceFixture.cs
+++ b/src/NzbDrone.Windows.Test/DiskProviderTests/FreeSpaceFixture.cs
@@ -1,7 +1,7 @@
 using System.IO;
 using FluentAssertions;
 using NUnit.Framework;
-using Readarr.Common.Test.DiskTests;
+using NzbDrone.Common.Test.DiskTests;
 using Readarr.Windows.Disk;
 
 namespace Readarr.Windows.Test.DiskProviderTests
diff --git a/src/NzbDrone.Windows.Test/EnvironmentInfo/DotNetPlatformInfoFixture.cs b/src/NzbDrone.Windows.Test/EnvironmentInfo/DotNetPlatformInfoFixture.cs
index 7fcc0f0b8..ac450f4cb 100644
--- a/src/NzbDrone.Windows.Test/EnvironmentInfo/DotNetPlatformInfoFixture.cs
+++ b/src/NzbDrone.Windows.Test/EnvironmentInfo/DotNetPlatformInfoFixture.cs
@@ -1,6 +1,6 @@
 ﻿using FluentAssertions;
 using NUnit.Framework;
-using Readarr.Common.EnvironmentInfo;
+using NzbDrone.Common.EnvironmentInfo;
 using Readarr.Test.Common;
 
 namespace Readarr.Windows.Test.EnvironmentInfo
diff --git a/src/NzbDrone.Windows/Disk/DiskProvider.cs b/src/NzbDrone.Windows/Disk/DiskProvider.cs
index e7046dae1..a446319c5 100644
--- a/src/NzbDrone.Windows/Disk/DiskProvider.cs
+++ b/src/NzbDrone.Windows/Disk/DiskProvider.cs
@@ -5,9 +5,9 @@
 using System.Security.AccessControl;
 using System.Security.Principal;
 using NLog;
-using Readarr.Common.Disk;
-using Readarr.Common.EnsureThat;
-using Readarr.Common.Instrumentation;
+using NzbDrone.Common.Disk;
+using NzbDrone.Common.EnsureThat;
+using NzbDrone.Common.Instrumentation;
 
 namespace Readarr.Windows.Disk
 {
diff --git a/src/NzbDrone.Windows/Disk/FolderMount.cs b/src/NzbDrone.Windows/Disk/FolderMount.cs
index d4a01dd1d..60c94328a 100644
--- a/src/NzbDrone.Windows/Disk/FolderMount.cs
+++ b/src/NzbDrone.Windows/Disk/FolderMount.cs
@@ -1,5 +1,5 @@
 using System.IO;
-using Readarr.Common.Disk;
+using NzbDrone.Common.Disk;
 
 namespace Readarr.Windows.Disk
 {
diff --git a/src/NzbDrone.Windows/EnvironmentInfo/WindowsVersionInfo.cs b/src/NzbDrone.Windows/EnvironmentInfo/WindowsVersionInfo.cs
index 2516db953..25fe1418e 100644
--- a/src/NzbDrone.Windows/EnvironmentInfo/WindowsVersionInfo.cs
+++ b/src/NzbDrone.Windows/EnvironmentInfo/WindowsVersionInfo.cs
@@ -1,7 +1,7 @@
 ﻿using System;
 using Microsoft.Win32;
 using NLog;
-using Readarr.Common.EnvironmentInfo;
+using NzbDrone.Common.EnvironmentInfo;
 
 namespace Readarr.Windows.EnvironmentInfo
 {
diff --git a/src/Readarr.Api.V1/Series/AlternateTitleResource.cs b/src/Readarr.Api.V1/Author/AlternateTitleResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/AlternateTitleResource.cs
rename to src/Readarr.Api.V1/Author/AlternateTitleResource.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesController.cs b/src/Readarr.Api.V1/Author/AuthorController.cs
similarity index 99%
rename from src/Readarr.Api.V1/Series/SeriesController.cs
rename to src/Readarr.Api.V1/Author/AuthorController.cs
index 341373167..610bd519e 100644
--- a/src/Readarr.Api.V1/Series/SeriesController.cs
+++ b/src/Readarr.Api.V1/Author/AuthorController.cs
@@ -12,7 +12,7 @@
 using NzbDrone.Core.Messaging.Commands;
 using NzbDrone.Core.Messaging.Events;
 using NzbDrone.Core.RootFolders;
-using NzbDrone.Core.SeriesStats;
+using NzbDrone.Core.AuthorStats;
 using NzbDrone.Core.Tv;
 using NzbDrone.Core.Tv.Commands;
 using NzbDrone.Core.Tv.Events;
diff --git a/src/Readarr.Api.V1/Series/SeriesEditorController.cs b/src/Readarr.Api.V1/Author/AuthorEditorController.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesEditorController.cs
rename to src/Readarr.Api.V1/Author/AuthorEditorController.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesEditorDeleteResource.cs b/src/Readarr.Api.V1/Author/AuthorEditorDeleteResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesEditorDeleteResource.cs
rename to src/Readarr.Api.V1/Author/AuthorEditorDeleteResource.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesEditorResource.cs b/src/Readarr.Api.V1/Author/AuthorEditorResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesEditorResource.cs
rename to src/Readarr.Api.V1/Author/AuthorEditorResource.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesEditorValidator.cs b/src/Readarr.Api.V1/Author/AuthorEditorValidator.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesEditorValidator.cs
rename to src/Readarr.Api.V1/Author/AuthorEditorValidator.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesFolderAsRootFolderValidator.cs b/src/Readarr.Api.V1/Author/AuthorFolderAsRootFolderValidator.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesFolderAsRootFolderValidator.cs
rename to src/Readarr.Api.V1/Author/AuthorFolderAsRootFolderValidator.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesFolderController.cs b/src/Readarr.Api.V1/Author/AuthorFolderController.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesFolderController.cs
rename to src/Readarr.Api.V1/Author/AuthorFolderController.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesImportController.cs b/src/Readarr.Api.V1/Author/AuthorImportController.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesImportController.cs
rename to src/Readarr.Api.V1/Author/AuthorImportController.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesLookupController.cs b/src/Readarr.Api.V1/Author/AuthorLookupController.cs
similarity index 98%
rename from src/Readarr.Api.V1/Series/SeriesLookupController.cs
rename to src/Readarr.Api.V1/Author/AuthorLookupController.cs
index 0103163b6..b5808427e 100644
--- a/src/Readarr.Api.V1/Series/SeriesLookupController.cs
+++ b/src/Readarr.Api.V1/Author/AuthorLookupController.cs
@@ -4,7 +4,7 @@
 using NzbDrone.Core.MediaCover;
 using NzbDrone.Core.MetadataSource;
 using NzbDrone.Core.Organizer;
-using NzbDrone.Core.SeriesStats;
+using NzbDrone.Core.AuthorStats;
 using Sonarr.Http;
 
 namespace Sonarr.Api.V3.Series
diff --git a/src/Readarr.Api.V1/Series/SeriesResource.cs b/src/Readarr.Api.V1/Author/AuthorResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeriesResource.cs
rename to src/Readarr.Api.V1/Author/AuthorResource.cs
diff --git a/src/Readarr.Api.V1/Series/SeriesStatisticsResource.cs b/src/Readarr.Api.V1/Author/AuthorStatisticsResource.cs
similarity index 97%
rename from src/Readarr.Api.V1/Series/SeriesStatisticsResource.cs
rename to src/Readarr.Api.V1/Author/AuthorStatisticsResource.cs
index 6a9dfa99e..950c785d5 100644
--- a/src/Readarr.Api.V1/Series/SeriesStatisticsResource.cs
+++ b/src/Readarr.Api.V1/Author/AuthorStatisticsResource.cs
@@ -1,6 +1,6 @@
 using System.Collections.Generic;
 using System.Linq;
-using NzbDrone.Core.SeriesStats;
+using NzbDrone.Core.AuthorStats;
 
 namespace Sonarr.Api.V3.Series
 {
diff --git a/src/Readarr.Api.V1/Series/SeasonResource.cs b/src/Readarr.Api.V1/Author/BookResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Series/SeasonResource.cs
rename to src/Readarr.Api.V1/Author/BookResource.cs
diff --git a/src/Readarr.Api.V1/Series/SeasonStatisticsResource.cs b/src/Readarr.Api.V1/Author/BookStatisticsResource.cs
similarity index 97%
rename from src/Readarr.Api.V1/Series/SeasonStatisticsResource.cs
rename to src/Readarr.Api.V1/Author/BookStatisticsResource.cs
index 02b8eddf4..0ca03a7b5 100644
--- a/src/Readarr.Api.V1/Series/SeasonStatisticsResource.cs
+++ b/src/Readarr.Api.V1/Author/BookStatisticsResource.cs
@@ -1,6 +1,6 @@
 ﻿using System;
 using System.Collections.Generic;
-using NzbDrone.Core.SeriesStats;
+using NzbDrone.Core.AuthorStats;
 
 namespace Sonarr.Api.V3.Series
 {
diff --git a/src/Readarr.Api.V1/SeasonPass/SeasonPassSeriesResource.cs b/src/Readarr.Api.V1/BookPass/BookPassAuthorResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/SeasonPass/SeasonPassSeriesResource.cs
rename to src/Readarr.Api.V1/BookPass/BookPassAuthorResource.cs
diff --git a/src/Readarr.Api.V1/SeasonPass/SeasonPassController.cs b/src/Readarr.Api.V1/BookPass/BookPassController.cs
similarity index 100%
rename from src/Readarr.Api.V1/SeasonPass/SeasonPassController.cs
rename to src/Readarr.Api.V1/BookPass/BookPassController.cs
diff --git a/src/Readarr.Api.V1/SeasonPass/SeasonPassResource.cs b/src/Readarr.Api.V1/BookPass/BookPassResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/SeasonPass/SeasonPassResource.cs
rename to src/Readarr.Api.V1/BookPass/BookPassResource.cs
diff --git a/src/Readarr.Api.V1/EpisodeFiles/EpisodeFileController.cs b/src/Readarr.Api.V1/EditionFiles/EditionFileController.cs
similarity index 100%
rename from src/Readarr.Api.V1/EpisodeFiles/EpisodeFileController.cs
rename to src/Readarr.Api.V1/EditionFiles/EditionFileController.cs
diff --git a/src/Readarr.Api.V1/EpisodeFiles/EpisodeFileListResource.cs b/src/Readarr.Api.V1/EditionFiles/EditionFileListResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/EpisodeFiles/EpisodeFileListResource.cs
rename to src/Readarr.Api.V1/EditionFiles/EditionFileListResource.cs
diff --git a/src/Readarr.Api.V1/EpisodeFiles/EpisodeFileResource.cs b/src/Readarr.Api.V1/EditionFiles/EditionFileResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/EpisodeFiles/EpisodeFileResource.cs
rename to src/Readarr.Api.V1/EditionFiles/EditionFileResource.cs
diff --git a/src/Readarr.Api.V1/EpisodeFiles/MediaInfoResource.cs b/src/Readarr.Api.V1/EditionFiles/MediaInfoResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/EpisodeFiles/MediaInfoResource.cs
rename to src/Readarr.Api.V1/EditionFiles/MediaInfoResource.cs
diff --git a/src/Readarr.Api.V1/Episodes/EpisodeController.cs b/src/Readarr.Api.V1/Editions/EditionController.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/EpisodeController.cs
rename to src/Readarr.Api.V1/Editions/EditionController.cs
diff --git a/src/Readarr.Api.V1/Episodes/EpisodeControllerWithSignalR.cs b/src/Readarr.Api.V1/Editions/EditionControllerWithSignalR.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/EpisodeControllerWithSignalR.cs
rename to src/Readarr.Api.V1/Editions/EditionControllerWithSignalR.cs
diff --git a/src/Readarr.Api.V1/Episodes/EpisodeResource.cs b/src/Readarr.Api.V1/Editions/EditionResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/EpisodeResource.cs
rename to src/Readarr.Api.V1/Editions/EditionResource.cs
diff --git a/src/Readarr.Api.V1/Episodes/EpisodesMonitoredResource.cs b/src/Readarr.Api.V1/Editions/EditionsMonitoredResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/EpisodesMonitoredResource.cs
rename to src/Readarr.Api.V1/Editions/EditionsMonitoredResource.cs
diff --git a/src/Readarr.Api.V1/Episodes/RenameEpisodeController.cs b/src/Readarr.Api.V1/Editions/RenameEditionController.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/RenameEpisodeController.cs
rename to src/Readarr.Api.V1/Editions/RenameEditionController.cs
diff --git a/src/Readarr.Api.V1/Episodes/RenameEpisodeResource.cs b/src/Readarr.Api.V1/Editions/RenameEditionResource.cs
similarity index 100%
rename from src/Readarr.Api.V1/Episodes/RenameEpisodeResource.cs
rename to src/Readarr.Api.V1/Editions/RenameEditionResource.cs
-- 
2.48.1

